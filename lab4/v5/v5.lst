
v5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  00002d2a  00002dbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000039  00800166  00800166  00002e24  2**0
                  ALLOC
  3 .stab         00005784  00000000  00000000  00002e24  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013cc  00000000  00000000  000085a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00009974  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00009988  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1b 02 	jmp	0x436	; 0x436 <__ctors_end>
       4:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
       8:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
       c:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      10:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      14:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      18:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      1c:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      20:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      24:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      28:	0c 94 45 03 	jmp	0x68a	; 0x68a <__vector_10>
      2c:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      30:	0c 94 c1 15 	jmp	0x2b82	; 0x2b82 <__vector_12>
      34:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      38:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      3c:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      40:	0c 94 58 05 	jmp	0xab0	; 0xab0 <__vector_16>
      44:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      48:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      4c:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      50:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      54:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      58:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      5c:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      60:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      64:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      68:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      6c:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      70:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      74:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      78:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      7c:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      80:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      84:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      88:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
      8c:	2b 0a       	sbc	r2, r27
      8e:	35 0a       	sbc	r3, r21
      90:	3f 0a       	sbc	r3, r31
      92:	49 0a       	sbc	r4, r25
      94:	54 0a       	sbc	r5, r20
      96:	5f 0a       	sbc	r5, r31
      98:	6a 0a       	sbc	r6, r26
      9a:	17 0a       	sbc	r1, r23
      9c:	21 0a       	sbc	r2, r17
      9e:	c0 0b       	sbc	r28, r16
      a0:	b8 0b       	sbc	r27, r24
      a2:	b3 0b       	sbc	r27, r19
      a4:	dd 0b       	sbc	r29, r29
      a6:	d0 0b       	sbc	r29, r16
      a8:	d8 0b       	sbc	r29, r24
      aa:	c8 0b       	sbc	r28, r24
      ac:	91 0b       	sbc	r25, r17
      ae:	89 0b       	sbc	r24, r25
      b0:	84 0b       	sbc	r24, r20
      b2:	7c 0b       	sbc	r23, r28
      b4:	e5 0b       	sbc	r30, r21
      b6:	99 0b       	sbc	r25, r25
      b8:	6f 0b       	sbc	r22, r31
      ba:	57 0b       	sbc	r21, r23
      bc:	05 0c       	add	r0, r5
      be:	ae 0b       	sbc	r26, r30
      c0:	a6 0b       	sbc	r26, r22
      c2:	9e 0b       	sbc	r25, r30
      c4:	25 0c       	add	r2, r5
      c6:	5f 0b       	sbc	r21, r31
      c8:	15 0c       	add	r1, r5
      ca:	67 0b       	sbc	r22, r23
      cc:	32 0c       	add	r3, r2
      ce:	fd 0b       	sbc	r31, r29
      d0:	1d 0c       	add	r1, r13
      d2:	77 0b       	sbc	r23, r23
      d4:	f5 0b       	sbc	r31, r21
      d6:	ed 0b       	sbc	r30, r29
      d8:	0d 0c       	add	r0, r13
      da:	52 0b       	sbc	r21, r18
      dc:	20 0b       	sbc	r18, r16
      de:	18 0b       	sbc	r17, r24
      e0:	28 0b       	sbc	r18, r24
      e2:	2a 0c       	add	r2, r10
      e4:	0b 0b       	sbc	r16, r27
      e6:	03 0b       	sbc	r16, r19
      e8:	2d 0b       	sbc	r18, r29
      ea:	e6 0a       	sbc	r14, r22
      ec:	4a 0b       	sbc	r20, r26
      ee:	13 0b       	sbc	r17, r19
      f0:	f6 0a       	sbc	r15, r22
      f2:	ee 0a       	sbc	r14, r30
      f4:	3a 0b       	sbc	r19, r26
      f6:	fe 0a       	sbc	r15, r30
      f8:	32 0b       	sbc	r19, r18
      fa:	de 0a       	sbc	r13, r30
      fc:	c4 0a       	sbc	r12, r20
      fe:	42 0b       	sbc	r20, r18
     100:	b4 0a       	sbc	r11, r20
     102:	ac 0a       	sbc	r10, r28
     104:	d1 0a       	sbc	r13, r17
     106:	c9 0a       	sbc	r12, r25
     108:	d6 0a       	sbc	r13, r22
     10a:	a7 0a       	sbc	r10, r23
     10c:	bc 0a       	sbc	r11, r28
     10e:	8f 0a       	sbc	r8, r31
     110:	9f 0a       	sbc	r9, r31
     112:	8a 0a       	sbc	r8, r26
     114:	82 0a       	sbc	r8, r18
     116:	7a 0a       	sbc	r7, r26
     118:	75 0a       	sbc	r7, r21
     11a:	97 0a       	sbc	r9, r23
     11c:	3c 0d       	add	r19, r12
     11e:	5a 0d       	add	r21, r10
     120:	36 0d       	add	r19, r6
     122:	48 0d       	add	r20, r8
     124:	2a 0d       	add	r18, r10
     126:	30 0d       	add	r19, r0
     128:	2a 0d       	add	r18, r10
     12a:	30 0d       	add	r19, r0
     12c:	60 0d       	add	r22, r0
     12e:	3c 0d       	add	r19, r12
     130:	5a 0d       	add	r21, r10
     132:	36 0d       	add	r19, r6
     134:	48 0d       	add	r20, r8
     136:	42 0d       	add	r20, r2
     138:	24 0d       	add	r18, r4
     13a:	42 0d       	add	r20, r2
     13c:	24 0d       	add	r18, r4
     13e:	90 0d       	add	r25, r0
     140:	cf 0d       	add	r28, r15
     142:	81 0d       	add	r24, r1
     144:	ff 0d       	add	r31, r15
     146:	81 0d       	add	r24, r1
     148:	c3 0d       	add	r28, r3
     14a:	bd 0d       	add	r27, r13
     14c:	24 0d       	add	r18, r4
     14e:	96 0d       	add	r25, r6
     150:	24 0d       	add	r18, r4
     152:	a8 0d       	add	r26, r8
     154:	4e 0d       	add	r20, r14
     156:	ed 0d       	add	r30, r13
     158:	2a 0d       	add	r18, r10
     15a:	e1 0d       	add	r30, r1
     15c:	66 0d       	add	r22, r6
     15e:	e7 0d       	add	r30, r7
     160:	6c 0d       	add	r22, r12
     162:	f3 0d       	add	r31, r3
     164:	b7 0d       	add	r27, r7
     166:	54 0d       	add	r21, r4
     168:	4e 0d       	add	r20, r14
     16a:	9c 0d       	add	r25, r12
     16c:	72 0d       	add	r23, r2
     16e:	3c 0d       	add	r19, r12
     170:	5a 0d       	add	r21, r10
     172:	36 0d       	add	r19, r6
     174:	48 0d       	add	r20, r8
     176:	2a 0d       	add	r18, r10
     178:	30 0d       	add	r19, r0
     17a:	2a 0d       	add	r18, r10
     17c:	30 0d       	add	r19, r0
     17e:	60 0d       	add	r22, r0
     180:	3c 0d       	add	r19, r12
     182:	c9 0d       	add	r28, r9
     184:	54 0d       	add	r21, r4
     186:	36 0d       	add	r19, r6
     188:	42 0d       	add	r20, r2
     18a:	24 0d       	add	r18, r4
     18c:	42 0d       	add	r20, r2
     18e:	24 0d       	add	r18, r4
     190:	90 0d       	add	r25, r0
     192:	d5 0d       	add	r29, r5
     194:	a2 0d       	add	r26, r2
     196:	60 0d       	add	r22, r0
     198:	db 0d       	add	r29, r11
     19a:	96 0d       	add	r25, r6
     19c:	66 0d       	add	r22, r6
     19e:	6c 0d       	add	r22, r12
     1a0:	4e 0d       	add	r20, r14
     1a2:	54 0d       	add	r21, r4
     1a4:	f9 0d       	add	r31, r9
     1a6:	72 0d       	add	r23, r2
     1a8:	17 0e       	add	r1, r23
     1aa:	3e 0e       	add	r3, r30
     1ac:	11 0e       	add	r1, r17
     1ae:	38 0e       	add	r3, r24
     1b0:	c2 0e       	add	r12, r18
     1b2:	bc 0e       	add	r11, r28
     1b4:	11 0e       	add	r1, r17
     1b6:	3e 0e       	add	r3, r30
     1b8:	44 0e       	add	r4, r20
     1ba:	1d 0e       	add	r1, r29
     1bc:	ce 0e       	add	r12, r30
     1be:	11 0e       	add	r1, r17
     1c0:	17 0e       	add	r1, r23
     1c2:	38 0e       	add	r3, r24
     1c4:	11 0e       	add	r1, r17
     1c6:	83 0e       	add	r8, r19
     1c8:	11 0e       	add	r1, r17
     1ca:	2c 0e       	add	r2, r28
     1cc:	17 0e       	add	r1, r23
     1ce:	5c 0e       	add	r5, r28
     1d0:	44 0e       	add	r4, r20
     1d2:	1d 0e       	add	r1, r29
     1d4:	56 0e       	add	r5, r22
     1d6:	e0 0e       	add	r14, r16
     1d8:	2c 0e       	add	r2, r28
     1da:	4a 0e       	add	r4, r26
     1dc:	ef 0e       	add	r14, r31
     1de:	9e 0e       	add	r9, r30
     1e0:	4a 0e       	add	r4, r26
     1e2:	b6 0e       	add	r11, r22
     1e4:	11 0e       	add	r1, r17
     1e6:	17 0e       	add	r1, r23
     1e8:	38 0e       	add	r3, r24
     1ea:	11 0e       	add	r1, r17
     1ec:	7d 0e       	add	r7, r29
     1ee:	1d 0e       	add	r1, r29
     1f0:	3e 0e       	add	r3, r30
     1f2:	11 0e       	add	r1, r17
     1f4:	2c 0e       	add	r2, r28
     1f6:	17 0e       	add	r1, r23
     1f8:	5c 0e       	add	r5, r28
     1fa:	44 0e       	add	r4, r20
     1fc:	1d 0e       	add	r1, r29
     1fe:	da 0e       	add	r13, r26
     200:	6e 0e       	add	r6, r30
     202:	68 0e       	add	r6, r24
     204:	32 0e       	add	r3, r18
     206:	62 0e       	add	r6, r18
     208:	50 0e       	add	r5, r16
     20a:	32 0e       	add	r3, r18
     20c:	aa 0e       	add	r10, r26
     20e:	b0 0e       	add	r11, r16
     210:	a4 0e       	add	r10, r20
     212:	6e 0e       	add	r6, r30
     214:	68 0e       	add	r6, r24
     216:	32 0e       	add	r3, r18
     218:	62 0e       	add	r6, r18
     21a:	50 0e       	add	r5, r16
     21c:	c8 0e       	add	r12, r24
     21e:	d4 0e       	add	r13, r20
     220:	56 0e       	add	r5, r22
     222:	89 0e       	add	r8, r25
     224:	8f 0e       	add	r8, r31
     226:	35 14       	cp	r3, r5
     228:	26 14       	cp	r2, r6
     22a:	20 14       	cp	r2, r0
     22c:	11 14       	cp	r1, r1
     22e:	0b 14       	cp	r0, r11
     230:	fc 13       	cpse	r31, r28
     232:	f6 13       	cpse	r31, r22
     234:	f0 13       	cpse	r31, r16
     236:	ea 13       	cpse	r30, r26
     238:	e4 13       	cpse	r30, r20
     23a:	d5 13       	cpse	r29, r21
     23c:	cf 13       	cpse	r28, r31
     23e:	c9 13       	cpse	r28, r25
     240:	ba 13       	cpse	r27, r26
     242:	b4 13       	cpse	r27, r20
     244:	a5 13       	cpse	r26, r21
     246:	9f 13       	cpse	r25, r31
     248:	90 13       	cpse	r25, r16
     24a:	8a 13       	cpse	r24, r26
     24c:	7b 13       	cpse	r23, r27
     24e:	75 13       	cpse	r23, r21
     250:	6f 13       	cpse	r22, r31
     252:	69 13       	cpse	r22, r25
     254:	63 13       	cpse	r22, r19
     256:	54 13       	cpse	r21, r20
     258:	4e 13       	cpse	r20, r30
     25a:	48 13       	cpse	r20, r24
     25c:	42 13       	cpse	r20, r18
     25e:	3c 13       	cpse	r19, r28
     260:	2d 13       	cpse	r18, r29
     262:	27 13       	cpse	r18, r23
     264:	18 13       	cpse	r17, r24
     266:	12 13       	cpse	r17, r18
     268:	0c 13       	cpse	r16, r28
     26a:	06 13       	cpse	r16, r22
     26c:	f7 12       	cpse	r15, r23
     26e:	f1 12       	cpse	r15, r17
     270:	e2 12       	cpse	r14, r18
     272:	dc 12       	cpse	r13, r28
     274:	cd 12       	cpse	r12, r29
     276:	c7 12       	cpse	r12, r23
     278:	b8 12       	cpse	r11, r24
     27a:	b2 12       	cpse	r11, r18
     27c:	a3 12       	cpse	r10, r19
     27e:	9d 12       	cpse	r9, r29
     280:	8e 12       	cpse	r8, r30
     282:	88 12       	cpse	r8, r24
     284:	82 12       	cpse	r8, r18
     286:	7c 12       	cpse	r7, r28
     288:	76 12       	cpse	r7, r22
     28a:	67 12       	cpse	r6, r23
     28c:	61 12       	cpse	r6, r17
     28e:	5b 12       	cpse	r5, r27
     290:	55 12       	cpse	r5, r21
     292:	4f 12       	cpse	r4, r31
     294:	40 12       	cpse	r4, r16
     296:	3a 12       	cpse	r3, r26
     298:	2b 12       	cpse	r2, r27
     29a:	25 12       	cpse	r2, r21
     29c:	1f 12       	cpse	r1, r31
     29e:	19 12       	cpse	r1, r25
     2a0:	0a 12       	cpse	r0, r26
     2a2:	04 12       	cpse	r0, r20
     2a4:	fe 11       	cpse	r31, r14
     2a6:	f8 11       	cpse	r31, r8
     2a8:	f2 11       	cpse	r31, r2
     2aa:	e3 11       	cpse	r30, r3
     2ac:	dd 11       	cpse	r29, r13
     2ae:	ce 11       	cpse	r28, r14
     2b0:	c8 11       	cpse	r28, r8
     2b2:	c2 11       	cpse	r28, r2
     2b4:	bc 11       	cpse	r27, r12
     2b6:	ad 11       	cpse	r26, r13
     2b8:	a7 11       	cpse	r26, r7
     2ba:	a1 11       	cpse	r26, r1
     2bc:	9b 11       	cpse	r25, r11
     2be:	8c 11       	cpse	r24, r12
     2c0:	86 11       	cpse	r24, r6
     2c2:	80 11       	cpse	r24, r0
     2c4:	7a 11       	cpse	r23, r10
     2c6:	74 11       	cpse	r23, r4
     2c8:	65 11       	cpse	r22, r5
     2ca:	5f 11       	cpse	r21, r15
     2cc:	50 11       	cpse	r21, r0
     2ce:	4a 11       	cpse	r20, r10
     2d0:	3b 11       	cpse	r19, r11
     2d2:	35 11       	cpse	r19, r5
     2d4:	26 11       	cpse	r18, r6
     2d6:	20 11       	cpse	r18, r0
     2d8:	11 11       	cpse	r17, r1
     2da:	0b 11       	cpse	r16, r11
     2dc:	05 11       	cpse	r16, r5
     2de:	ff 10       	cpse	r15, r15
     2e0:	f9 10       	cpse	r15, r9
     2e2:	ea 10       	cpse	r14, r10
     2e4:	e4 10       	cpse	r14, r4
     2e6:	d5 10       	cpse	r13, r5
     2e8:	cf 10       	cpse	r12, r15
     2ea:	c9 10       	cpse	r12, r9
     2ec:	c3 10       	cpse	r12, r3
     2ee:	b4 10       	cpse	r11, r4
     2f0:	ae 10       	cpse	r10, r14
     2f2:	a8 10       	cpse	r10, r8
     2f4:	a2 10       	cpse	r10, r2
     2f6:	93 10       	cpse	r9, r3
     2f8:	8d 10       	cpse	r8, r13
     2fa:	7e 10       	cpse	r7, r14
     2fc:	78 10       	cpse	r7, r8
     2fe:	69 10       	cpse	r6, r9
     300:	63 10       	cpse	r6, r3
     302:	54 10       	cpse	r5, r4
     304:	4e 10       	cpse	r4, r14
     306:	3f 10       	cpse	r3, r15
     308:	39 10       	cpse	r3, r9
     30a:	2a 10       	cpse	r2, r10
     30c:	24 10       	cpse	r2, r4
     30e:	15 10       	cpse	r1, r5
     310:	0f 10       	cpse	r0, r15
     312:	09 10       	cpse	r0, r9
     314:	03 10       	cpse	r0, r3
     316:	fd 0f       	add	r31, r29
     318:	ee 0f       	add	r30, r30
     31a:	e8 0f       	add	r30, r24
     31c:	e2 0f       	add	r30, r18
     31e:	d3 0f       	add	r29, r19
     320:	cd 0f       	add	r28, r29
     322:	be 0f       	add	r27, r30
     324:	b8 0f       	add	r27, r24
     326:	a9 0f       	add	r26, r25
     328:	a3 0f       	add	r26, r19
     32a:	94 0f       	add	r25, r20
     32c:	8e 0f       	add	r24, r30
     32e:	88 0f       	add	r24, r24
     330:	82 0f       	add	r24, r18
     332:	73 0f       	add	r23, r19
     334:	6d 0f       	add	r22, r29
     336:	5e 0f       	add	r21, r30
     338:	58 0f       	add	r21, r24
     33a:	49 0f       	add	r20, r25
     33c:	43 0f       	add	r20, r19
     33e:	34 0f       	add	r19, r20
     340:	2e 0f       	add	r18, r30
     342:	28 0f       	add	r18, r24
     344:	22 0f       	add	r18, r18
     346:	1c 0f       	add	r17, r28
     348:	0d 0f       	add	r16, r29
     34a:	07 0f       	add	r16, r23
     34c:	01 0f       	add	r16, r17
     34e:	3b 14       	cp	r3, r11
     350:	6b 14       	cp	r6, r11
     352:	56 14       	cp	r5, r6
     354:	6b 14       	cp	r6, r11
     356:	56 14       	cp	r5, r6
     358:	6b 14       	cp	r6, r11
     35a:	56 14       	cp	r5, r6
     35c:	92 14       	cp	r9, r2
     35e:	56 14       	cp	r5, r6
     360:	92 14       	cp	r9, r2
     362:	77 14       	cp	r7, r7
     364:	65 14       	cp	r6, r5
     366:	aa 14       	cp	r10, r10
     368:	65 14       	cp	r6, r5
     36a:	98 14       	cp	r9, r8
     36c:	86 14       	cp	r8, r6
     36e:	71 14       	cp	r7, r1
     370:	56 14       	cp	r5, r6
     372:	71 14       	cp	r7, r1
     374:	56 14       	cp	r5, r6
     376:	71 14       	cp	r7, r1
     378:	56 14       	cp	r5, r6
     37a:	8c 14       	cp	r8, r12
     37c:	56 14       	cp	r5, r6
     37e:	8c 14       	cp	r8, r12
     380:	77 14       	cp	r7, r7
     382:	9e 14       	cp	r9, r14
     384:	a4 14       	cp	r10, r4
     386:	56 14       	cp	r5, r6
     388:	65 14       	cp	r6, r5
     38a:	b0 14       	cp	r11, r0
     38c:	86 14       	cp	r8, r6
     38e:	e3 14       	cp	r14, r3
     390:	d1 14       	cp	r13, r1
     392:	c2 14       	cp	r12, r2
     394:	d1 14       	cp	r13, r1
     396:	c2 14       	cp	r12, r2
     398:	d1 14       	cp	r13, r1
     39a:	c2 14       	cp	r12, r2
     39c:	4f 15       	cp	r20, r15
     39e:	e3 14       	cp	r14, r3
     3a0:	04 15       	cp	r16, r4
     3a2:	c2 14       	cp	r12, r2
     3a4:	04 15       	cp	r16, r4
     3a6:	c2 14       	cp	r12, r2
     3a8:	04 15       	cp	r16, r4
     3aa:	c2 14       	cp	r12, r2
     3ac:	61 15       	cp	r22, r1
     3ae:	e3 14       	cp	r14, r3
     3b0:	d1 14       	cp	r13, r1
     3b2:	c2 14       	cp	r12, r2
     3b4:	d1 14       	cp	r13, r1
     3b6:	c2 14       	cp	r12, r2
     3b8:	d1 14       	cp	r13, r1
     3ba:	c2 14       	cp	r12, r2
     3bc:	43 15       	cp	r20, r3
     3be:	dd 14       	cp	r13, r13
     3c0:	c2 14       	cp	r12, r2
     3c2:	dd 14       	cp	r13, r13
     3c4:	c2 14       	cp	r12, r2
     3c6:	dd 14       	cp	r13, r13
     3c8:	c2 14       	cp	r12, r2
     3ca:	10 15       	cp	r17, r0
     3cc:	f8 14       	cp	r15, r8
     3ce:	c2 14       	cp	r12, r2
     3d0:	f8 14       	cp	r15, r8
     3d2:	c2 14       	cp	r12, r2
     3d4:	f8 14       	cp	r15, r8
     3d6:	c2 14       	cp	r12, r2
     3d8:	31 15       	cp	r19, r1
     3da:	e3 14       	cp	r14, r3
     3dc:	d1 14       	cp	r13, r1
     3de:	c2 14       	cp	r12, r2
     3e0:	d1 14       	cp	r13, r1
     3e2:	c2 14       	cp	r12, r2
     3e4:	d1 14       	cp	r13, r1
     3e6:	c2 14       	cp	r12, r2
     3e8:	55 15       	cp	r21, r5
     3ea:	dd 14       	cp	r13, r13
     3ec:	c2 14       	cp	r12, r2
     3ee:	dd 14       	cp	r13, r13
     3f0:	c2 14       	cp	r12, r2
     3f2:	dd 14       	cp	r13, r13
     3f4:	10 15       	cp	r17, r0
     3f6:	fe 14       	cp	r15, r14
     3f8:	c2 14       	cp	r12, r2
     3fa:	fe 14       	cp	r15, r14
     3fc:	c2 14       	cp	r12, r2
     3fe:	fe 14       	cp	r15, r14
     400:	c2 14       	cp	r12, r2
     402:	5b 15       	cp	r21, r11
     404:	25 15       	cp	r18, r5
     406:	d7 14       	cp	r13, r7
     408:	c2 14       	cp	r12, r2
     40a:	d7 14       	cp	r13, r7
     40c:	c2 14       	cp	r12, r2
     40e:	f2 14       	cp	r15, r2
     410:	0a 15       	cp	r16, r10
     412:	2b 15       	cp	r18, r11
     414:	d7 14       	cp	r13, r7
     416:	c2 14       	cp	r12, r2
     418:	d7 14       	cp	r13, r7
     41a:	c2 14       	cp	r12, r2
     41c:	f2 14       	cp	r15, r2
     41e:	0a 15       	cp	r16, r10
     420:	25 15       	cp	r18, r5
     422:	d7 14       	cp	r13, r7
     424:	c2 14       	cp	r12, r2
     426:	d7 14       	cp	r13, r7
     428:	c2 14       	cp	r12, r2
     42a:	f2 14       	cp	r15, r2
     42c:	49 15       	cp	r20, r9
     42e:	16 15       	cp	r17, r6
     430:	37 15       	cp	r19, r7
     432:	16 15       	cp	r17, r6
     434:	3d 15       	cp	r19, r13

00000436 <__ctors_end>:
     436:	11 24       	eor	r1, r1
     438:	1f be       	out	0x3f, r1	; 63
     43a:	cf ef       	ldi	r28, 0xFF	; 255
     43c:	d0 e1       	ldi	r29, 0x10	; 16
     43e:	de bf       	out	0x3e, r29	; 62
     440:	cd bf       	out	0x3d, r28	; 61

00000442 <__do_copy_data>:
     442:	11 e0       	ldi	r17, 0x01	; 1
     444:	a0 e0       	ldi	r26, 0x00	; 0
     446:	b1 e0       	ldi	r27, 0x01	; 1
     448:	ea e2       	ldi	r30, 0x2A	; 42
     44a:	fd e2       	ldi	r31, 0x2D	; 45
     44c:	00 e0       	ldi	r16, 0x00	; 0
     44e:	0b bf       	out	0x3b, r16	; 59
     450:	02 c0       	rjmp	.+4      	; 0x456 <__do_copy_data+0x14>
     452:	07 90       	elpm	r0, Z+
     454:	0d 92       	st	X+, r0
     456:	a6 36       	cpi	r26, 0x66	; 102
     458:	b1 07       	cpc	r27, r17
     45a:	d9 f7       	brne	.-10     	; 0x452 <__do_copy_data+0x10>

0000045c <__do_clear_bss>:
     45c:	21 e0       	ldi	r18, 0x01	; 1
     45e:	a6 e6       	ldi	r26, 0x66	; 102
     460:	b1 e0       	ldi	r27, 0x01	; 1
     462:	01 c0       	rjmp	.+2      	; 0x466 <.do_clear_bss_start>

00000464 <.do_clear_bss_loop>:
     464:	1d 92       	st	X+, r1

00000466 <.do_clear_bss_start>:
     466:	af 39       	cpi	r26, 0x9F	; 159
     468:	b2 07       	cpc	r27, r18
     46a:	e1 f7       	brne	.-8      	; 0x464 <.do_clear_bss_loop>
     46c:	0e 94 04 16 	call	0x2c08	; 0x2c08 <main>
     470:	0c 94 93 16 	jmp	0x2d26	; 0x2d26 <_exit>

00000474 <__bad_interrupt>:
     474:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000478 <init_adc>:
uint8_t clock_conversion();
uint8_t clock_update();
uint8_t LED_seg(uint8_t mode, uint8_t clock, uint8_t alarm, uint8_t digit);

void init_adc(){
    ADMUX   = (0<<REFS1) | (1<<REFS0) | (1<<ADLAR) |(1<<MUX2)|(1<<MUX1)|(1<<MUX0); //AVCC refrence, Left justified.
     478:	87 e6       	ldi	r24, 0x67	; 103
     47a:	87 b9       	out	0x07, r24	; 7
    ADCSRA  = (1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //enable ADC, prescale by 128
     47c:	87 e8       	ldi	r24, 0x87	; 135
     47e:	86 b9       	out	0x06, r24	; 6
     480:	08 95       	ret

00000482 <read_adc>:
}
uint8_t read_adc(){
    ADCSRA |= (1<<ADSC); //start conversion.
     482:	36 9a       	sbi	0x06, 6	; 6
    while(bit_is_clear(ADCSRA, ADIF)){}
     484:	34 9b       	sbis	0x06, 4	; 6
     486:	fe cf       	rjmp	.-4      	; 0x484 <read_adc+0x2>
    ADCSRA |= (1<<ADIF);
     488:	34 9a       	sbi	0x06, 4	; 6
    return ADCW>>6;
     48a:	84 b1       	in	r24, 0x04	; 4
     48c:	95 b1       	in	r25, 0x05	; 5
     48e:	00 24       	eor	r0, r0
     490:	88 0f       	add	r24, r24
     492:	99 1f       	adc	r25, r25
     494:	00 1c       	adc	r0, r0
     496:	88 0f       	add	r24, r24
     498:	99 1f       	adc	r25, r25
     49a:	00 1c       	adc	r0, r0
     49c:	89 2f       	mov	r24, r25
     49e:	90 2d       	mov	r25, r0
}
     4a0:	08 95       	ret

000004a2 <init_tcnt3>:

// PORTD bit 7 -> alarm signal.
// PORTE bit 3 -> volume.
extern volatile uint16_t beat;
void init_tcnt3(){
    TCCR3A |= (1<<COM3A1) | (0<<COM3A0)  | (1<<WGM31) | (0<<WGM30);
     4a2:	eb e8       	ldi	r30, 0x8B	; 139
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	80 81       	ld	r24, Z
     4a8:	82 68       	ori	r24, 0x82	; 130
     4aa:	80 83       	st	Z, r24
    TCCR3B |= (1<<WGM33) | (1<<WGM32) | (1<<CS30);
     4ac:	ea e8       	ldi	r30, 0x8A	; 138
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	80 81       	ld	r24, Z
     4b2:	89 61       	ori	r24, 0x19	; 25
     4b4:	80 83       	st	Z, r24
    ICR3   = 0x0fff;
     4b6:	8f ef       	ldi	r24, 0xFF	; 255
     4b8:	9f e0       	ldi	r25, 0x0F	; 15
     4ba:	90 93 81 00 	sts	0x0081, r25
     4be:	80 93 80 00 	sts	0x0080, r24
    OCR3A  = 0x0fff/3; //Volume duty cycle.
     4c2:	85 e5       	ldi	r24, 0x55	; 85
     4c4:	95 e0       	ldi	r25, 0x05	; 5
     4c6:	90 93 87 00 	sts	0x0087, r25
     4ca:	80 93 86 00 	sts	0x0086, r24
     4ce:	08 95       	ret

000004d0 <init_tcnt2>:
}

void init_tcnt2(){
    TIMSK |= (1<<TOIE2);                             //enable timer overflow interrupt.
     4d0:	87 b7       	in	r24, 0x37	; 55
     4d2:	80 64       	ori	r24, 0x40	; 64
     4d4:	87 bf       	out	0x37, r24	; 55
    TCCR2 |= (1<<WGM20)|(1<<WGM21)|(1<<COM21)|(1<<COM20)|(0<<CS22)|(0<<CS21)|(1<<CS20); //Fast PWM, (non-inverting), 256 prescale 
     4d6:	85 b5       	in	r24, 0x25	; 37
     4d8:	89 67       	ori	r24, 0x79	; 121
     4da:	85 bd       	out	0x25, r24	; 37
     4dc:	08 95       	ret

000004de <clock_conversion>:
/******************************************************************************************************/


uint8_t clock_conversion(){

    if( (mode>>AM_PM) & 0x01 ){ // convert to 12 mode
     4de:	80 91 67 01 	lds	r24, 0x0167
     4e2:	85 ff       	sbrs	r24, 5
     4e4:	10 c0       	rjmp	.+32     	; 0x506 <clock_conversion+0x28>
        if( CLOCK[HOURS] > 12 ){
     4e6:	80 91 07 01 	lds	r24, 0x0107
     4ea:	8d 30       	cpi	r24, 0x0D	; 13
     4ec:	08 f5       	brcc	.+66     	; 0x530 <clock_conversion+0x52>
            CLOCK[HOURS] -= 12;
            am_pm = 1; //pm
        }
        else if(CLOCK[HOURS] == 12)
     4ee:	80 91 07 01 	lds	r24, 0x0107
     4f2:	8c 30       	cpi	r24, 0x0C	; 12
     4f4:	71 f1       	breq	.+92     	; 0x552 <clock_conversion+0x74>
            am_pm = 1; //pm
        else if(CLOCK[HOURS] == 0){
     4f6:	80 91 07 01 	lds	r24, 0x0107
     4fa:	88 23       	and	r24, r24
     4fc:	19 f1       	breq	.+70     	; 0x544 <clock_conversion+0x66>
        }
        else{
            if(CLOCK[HOURS] == 12) //if 12am
                CLOCK[HOURS] = 0;
        }
        am_pm = 0; // turn off
     4fe:	10 92 66 01 	sts	0x0166, r1
    }

    return 0;
}
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	08 95       	ret
        }
        else
            am_pm = 0; //am
    }
    else{
        if(am_pm){  // if pm 
     506:	80 91 66 01 	lds	r24, 0x0166
     50a:	88 23       	and	r24, r24
     50c:	51 f0       	breq	.+20     	; 0x522 <clock_conversion+0x44>
            if(CLOCK[HOURS] != 12)
     50e:	80 91 07 01 	lds	r24, 0x0107
     512:	8c 30       	cpi	r24, 0x0C	; 12
     514:	a1 f3       	breq	.-24     	; 0x4fe <clock_conversion+0x20>
                CLOCK[HOURS] += 12;
     516:	80 91 07 01 	lds	r24, 0x0107
     51a:	84 5f       	subi	r24, 0xF4	; 244
     51c:	80 93 07 01 	sts	0x0107, r24
     520:	ee cf       	rjmp	.-36     	; 0x4fe <clock_conversion+0x20>
        }
        else{
            if(CLOCK[HOURS] == 12) //if 12am
     522:	80 91 07 01 	lds	r24, 0x0107
     526:	8c 30       	cpi	r24, 0x0C	; 12
     528:	51 f7       	brne	.-44     	; 0x4fe <clock_conversion+0x20>
                CLOCK[HOURS] = 0;
     52a:	10 92 07 01 	sts	0x0107, r1
     52e:	e7 cf       	rjmp	.-50     	; 0x4fe <clock_conversion+0x20>

uint8_t clock_conversion(){

    if( (mode>>AM_PM) & 0x01 ){ // convert to 12 mode
        if( CLOCK[HOURS] > 12 ){
            CLOCK[HOURS] -= 12;
     530:	80 91 07 01 	lds	r24, 0x0107
     534:	8c 50       	subi	r24, 0x0C	; 12
     536:	80 93 07 01 	sts	0x0107, r24
            am_pm = 1; //pm
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	80 93 66 01 	sts	0x0166, r24
        }
        am_pm = 0; // turn off
    }

    return 0;
}
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	08 95       	ret
            am_pm = 1; //pm
        }
        else if(CLOCK[HOURS] == 12)
            am_pm = 1; //pm
        else if(CLOCK[HOURS] == 0){
            CLOCK[HOURS] = 12;
     544:	8c e0       	ldi	r24, 0x0C	; 12
     546:	80 93 07 01 	sts	0x0107, r24
            am_pm = 0; //am
     54a:	10 92 66 01 	sts	0x0166, r1
        }
        am_pm = 0; // turn off
    }

    return 0;
}
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	08 95       	ret
        if( CLOCK[HOURS] > 12 ){
            CLOCK[HOURS] -= 12;
            am_pm = 1; //pm
        }
        else if(CLOCK[HOURS] == 12)
            am_pm = 1; //pm
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	80 93 66 01 	sts	0x0166, r24
     558:	d4 cf       	rjmp	.-88     	; 0x502 <clock_conversion+0x24>

0000055a <clock_update>:
}

uint8_t clock_update(){
    static uint8_t old_sec = 0;
    
    if(CLOCK[SECONDS] != old_sec) //clock ticked. update it. No waste of time.
     55a:	90 91 05 01 	lds	r25, 0x0105
     55e:	80 91 6d 01 	lds	r24, 0x016D
     562:	98 17       	cp	r25, r24
     564:	61 f1       	breq	.+88     	; 0x5be <clock_update+0x64>
    {
        if( CLOCK[SECONDS] >= 60 ){
     566:	80 91 05 01 	lds	r24, 0x0105
     56a:	8c 33       	cpi	r24, 0x3C	; 60
     56c:	20 f1       	brcs	.+72     	; 0x5b6 <clock_update+0x5c>
            CLOCK[SECONDS] -= 60;
     56e:	80 91 05 01 	lds	r24, 0x0105
     572:	8c 53       	subi	r24, 0x3C	; 60
     574:	80 93 05 01 	sts	0x0105, r24
            CLOCK[MINUTES] += 1;
     578:	80 91 06 01 	lds	r24, 0x0106
     57c:	8f 5f       	subi	r24, 0xFF	; 255
     57e:	80 93 06 01 	sts	0x0106, r24
            if( CLOCK[MINUTES] >= 60 ){
     582:	80 91 06 01 	lds	r24, 0x0106
     586:	8c 33       	cpi	r24, 0x3C	; 60
     588:	b0 f0       	brcs	.+44     	; 0x5b6 <clock_update+0x5c>
                CLOCK[MINUTES] -= 60;
     58a:	80 91 06 01 	lds	r24, 0x0106
     58e:	8c 53       	subi	r24, 0x3C	; 60
     590:	80 93 06 01 	sts	0x0106, r24
                CLOCK[HOURS]++;
     594:	80 91 07 01 	lds	r24, 0x0107
     598:	8f 5f       	subi	r24, 0xFF	; 255
     59a:	80 93 07 01 	sts	0x0107, r24
                switch( (mode>>AM_PM)&0x01 ){   //if 12hr mode or else 24hr mode.
     59e:	80 91 67 01 	lds	r24, 0x0167
     5a2:	85 ff       	sbrs	r24, 5
     5a4:	0e c0       	rjmp	.+28     	; 0x5c2 <clock_update+0x68>
                    case 1:
                        if( CLOCK[HOURS] == 12 ) 
     5a6:	80 91 07 01 	lds	r24, 0x0107
     5aa:	8c 30       	cpi	r24, 0x0C	; 12
     5ac:	d1 f0       	breq	.+52     	; 0x5e2 <clock_update+0x88>
                            am_pm ^= (1<<7);    // flip am_pm.
                        else if( CLOCK[HOURS] > 12 )
     5ae:	80 91 07 01 	lds	r24, 0x0107
     5b2:	8d 30       	cpi	r24, 0x0D	; 13
     5b4:	80 f4       	brcc	.+32     	; 0x5d6 <clock_update+0x7c>
                            CLOCK[HOURS] -= 24;
                        break;
                }
            }
        }
        old_sec = CLOCK[SECONDS];
     5b6:	80 91 05 01 	lds	r24, 0x0105
     5ba:	80 93 6d 01 	sts	0x016D, r24
    }

    return 0;
}
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	08 95       	ret
                            am_pm ^= (1<<7);    // flip am_pm.
                        else if( CLOCK[HOURS] > 12 )
                            CLOCK[HOURS] -= 12;
                        break;
                    default:
                        if( CLOCK[HOURS] >= 24 )
     5c2:	80 91 07 01 	lds	r24, 0x0107
     5c6:	88 31       	cpi	r24, 0x18	; 24
     5c8:	b0 f3       	brcs	.-20     	; 0x5b6 <clock_update+0x5c>
                            CLOCK[HOURS] -= 24;
     5ca:	80 91 07 01 	lds	r24, 0x0107
     5ce:	88 51       	subi	r24, 0x18	; 24
     5d0:	80 93 07 01 	sts	0x0107, r24
     5d4:	f0 cf       	rjmp	.-32     	; 0x5b6 <clock_update+0x5c>
                switch( (mode>>AM_PM)&0x01 ){   //if 12hr mode or else 24hr mode.
                    case 1:
                        if( CLOCK[HOURS] == 12 ) 
                            am_pm ^= (1<<7);    // flip am_pm.
                        else if( CLOCK[HOURS] > 12 )
                            CLOCK[HOURS] -= 12;
     5d6:	80 91 07 01 	lds	r24, 0x0107
     5da:	8c 50       	subi	r24, 0x0C	; 12
     5dc:	80 93 07 01 	sts	0x0107, r24
     5e0:	ea cf       	rjmp	.-44     	; 0x5b6 <clock_update+0x5c>
                CLOCK[MINUTES] -= 60;
                CLOCK[HOURS]++;
                switch( (mode>>AM_PM)&0x01 ){   //if 12hr mode or else 24hr mode.
                    case 1:
                        if( CLOCK[HOURS] == 12 ) 
                            am_pm ^= (1<<7);    // flip am_pm.
     5e2:	80 91 66 01 	lds	r24, 0x0166
     5e6:	80 58       	subi	r24, 0x80	; 128
     5e8:	80 93 66 01 	sts	0x0166, r24
     5ec:	e4 cf       	rjmp	.-56     	; 0x5b6 <clock_update+0x5c>

000005ee <LED_seg>:

#define LETTER_A 0b10001000 
#define LETTER_H 0b10001001


    uint8_t right_digit = clock - 10*(clock/10);
     5ee:	9d ec       	ldi	r25, 0xCD	; 205
     5f0:	69 9f       	mul	r22, r25
     5f2:	91 2d       	mov	r25, r1
     5f4:	11 24       	eor	r1, r1
     5f6:	96 95       	lsr	r25
     5f8:	96 95       	lsr	r25
     5fa:	96 95       	lsr	r25
     5fc:	3a e0       	ldi	r19, 0x0A	; 10
     5fe:	93 9f       	mul	r25, r19
     600:	60 19       	sub	r22, r0
     602:	11 24       	eor	r1, r1
    uint8_t left_digit  = clock / 10;
    switch(digit){
     604:	21 30       	cpi	r18, 0x01	; 1
     606:	71 f0       	breq	.+28     	; 0x624 <LED_seg+0x36>
     608:	98 f0       	brcs	.+38     	; 0x630 <LED_seg+0x42>
     60a:	23 30       	cpi	r18, 0x03	; 3
     60c:	21 f0       	breq	.+8      	; 0x616 <LED_seg+0x28>
     60e:	24 30       	cpi	r18, 0x04	; 4
     610:	49 f0       	breq	.+18     	; 0x624 <LED_seg+0x36>

            else
                return int_to_digit(left_digit);

        default:
            return 0b10111111; // return '-'
     612:	8f eb       	ldi	r24, 0xBF	; 191
     614:	08 95       	ret

            else
                return int_to_digit(left_digit);

        case 3:
            if( SET_ALARM_MODE )
     616:	86 fd       	sbrc	r24, 6
     618:	11 c0       	rjmp	.+34     	; 0x63c <LED_seg+0x4e>
                return int_to_digit(alarm-10*(alarm/10));
            
            else if( ALARM_NOW )
     61a:	82 fd       	sbrc	r24, 2
     61c:	07 c0       	rjmp	.+14     	; 0x62c <LED_seg+0x3e>
                return LETTER_A;

            else
                return int_to_digit(right_digit);
     61e:	86 2f       	mov	r24, r22
     620:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <int_to_digit>

                return int_to_digit(right_digit);
            }

        case 1:
            if( SET_ALARM_MODE )
     624:	86 fd       	sbrc	r24, 6
     626:	18 c0       	rjmp	.+48     	; 0x658 <LED_seg+0x6a>

        case 4:
            if( SET_ALARM_MODE )
                return int_to_digit(alarm/10);

            else if( ALARM_NOW )
     628:	82 ff       	sbrs	r24, 2
     62a:	1f c0       	rjmp	.+62     	; 0x66a <LED_seg+0x7c>
        case 1:
            if( SET_ALARM_MODE )
                return int_to_digit(alarm/10);

            else if( ALARM_NOW )
                return LETTER_A;
     62c:	88 e8       	ldi	r24, 0x88	; 136
    //              -- time PM
    //       setting alarm mode
    //          - alarm time in 24hr mode
    //       Alarm off mode
    //          - AAAH
}
     62e:	08 95       	ret

    uint8_t right_digit = clock - 10*(clock/10);
    uint8_t left_digit  = clock / 10;
    switch(digit){
        case 0:
            if( SET_ALARM_MODE )
     630:	86 fd       	sbrc	r24, 6
     632:	04 c0       	rjmp	.+8      	; 0x63c <LED_seg+0x4e>
                return int_to_digit(alarm - 10*(alarm/10));

            else if( ALARM_NOW )
     634:	82 ff       	sbrs	r24, 2
     636:	1c c0       	rjmp	.+56     	; 0x670 <LED_seg+0x82>
                    return LETTER_H;
     638:	89 e8       	ldi	r24, 0x89	; 137
     63a:	08 95       	ret
    uint8_t right_digit = clock - 10*(clock/10);
    uint8_t left_digit  = clock / 10;
    switch(digit){
        case 0:
            if( SET_ALARM_MODE )
                return int_to_digit(alarm - 10*(alarm/10));
     63c:	8d ec       	ldi	r24, 0xCD	; 205
     63e:	48 9f       	mul	r20, r24
     640:	81 2d       	mov	r24, r1
     642:	11 24       	eor	r1, r1
     644:	86 95       	lsr	r24
     646:	86 95       	lsr	r24
     648:	86 95       	lsr	r24
     64a:	9a e0       	ldi	r25, 0x0A	; 10
     64c:	89 9f       	mul	r24, r25
     64e:	40 19       	sub	r20, r0
     650:	11 24       	eor	r1, r1
     652:	84 2f       	mov	r24, r20
     654:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <int_to_digit>
                return int_to_digit(right_digit);
            }

        case 1:
            if( SET_ALARM_MODE )
                return int_to_digit(alarm/10);
     658:	8d ec       	ldi	r24, 0xCD	; 205
     65a:	48 9f       	mul	r20, r24
     65c:	81 2d       	mov	r24, r1
     65e:	11 24       	eor	r1, r1
     660:	86 95       	lsr	r24
     662:	86 95       	lsr	r24
     664:	86 95       	lsr	r24
     666:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <int_to_digit>

            else if( ALARM_NOW )
                return LETTER_A;

            else
                return int_to_digit(left_digit);
     66a:	89 2f       	mov	r24, r25
     66c:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <int_to_digit>
                return int_to_digit(alarm - 10*(alarm/10));

            else if( ALARM_NOW )
                    return LETTER_H;
            else{
                if( MODE_12HR )     // if display mode is 12 hr, indicate am or pm in digit 0's dot.
     670:	85 ff       	sbrs	r24, 5
     672:	d5 cf       	rjmp	.-86     	; 0x61e <LED_seg+0x30>
                    return int_to_digit(right_digit) & ~(am_pm<<7);
     674:	86 2f       	mov	r24, r22
     676:	0e 94 36 06 	call	0xc6c	; 0xc6c <int_to_digit>
     67a:	90 91 66 01 	lds	r25, 0x0166
     67e:	97 95       	ror	r25
     680:	99 27       	eor	r25, r25
     682:	97 95       	ror	r25
     684:	90 95       	com	r25
     686:	89 23       	and	r24, r25
     688:	08 95       	ret

0000068a <__vector_10>:
//incremented.  Every 7680 interrupts the minutes counter is incremented.
//tcnt0 interrupts come at 7.8125ms internals.
// (1/16M)          = 62.5nS
// (1/16M)*256*256  = 4.09mS = ~244 Hz
/*************************************************************************/
ISR(TIMER2_OVF_vect){
     68a:	1f 92       	push	r1
     68c:	0f 92       	push	r0
     68e:	0f b6       	in	r0, 0x3f	; 63
     690:	0f 92       	push	r0
     692:	11 24       	eor	r1, r1
     694:	0b b6       	in	r0, 0x3b	; 59
     696:	0f 92       	push	r0
     698:	2f 93       	push	r18
     69a:	3f 93       	push	r19
     69c:	4f 93       	push	r20
     69e:	5f 93       	push	r21
     6a0:	6f 93       	push	r22
     6a2:	7f 93       	push	r23
     6a4:	8f 93       	push	r24
     6a6:	9f 93       	push	r25
     6a8:	af 93       	push	r26
     6aa:	bf 93       	push	r27
     6ac:	cf 93       	push	r28
     6ae:	ef 93       	push	r30
     6b0:	ff 93       	push	r31
    static uint8_t counter = 0;
    counter++;
     6b2:	80 91 77 01 	lds	r24, 0x0177
     6b6:	8f 5f       	subi	r24, 0xFF	; 255
    
if(counter == 128){
     6b8:	80 38       	cpi	r24, 0x80	; 128
     6ba:	b1 f0       	breq	.+44     	; 0x6e8 <__vector_10+0x5e>
// (1/16M)          = 62.5nS
// (1/16M)*256*256  = 4.09mS = ~244 Hz
/*************************************************************************/
ISR(TIMER2_OVF_vect){
    static uint8_t counter = 0;
    counter++;
     6bc:	80 93 77 01 	sts	0x0177, r24
        }

    }
}

}
     6c0:	ff 91       	pop	r31
     6c2:	ef 91       	pop	r30
     6c4:	cf 91       	pop	r28
     6c6:	bf 91       	pop	r27
     6c8:	af 91       	pop	r26
     6ca:	9f 91       	pop	r25
     6cc:	8f 91       	pop	r24
     6ce:	7f 91       	pop	r23
     6d0:	6f 91       	pop	r22
     6d2:	5f 91       	pop	r21
     6d4:	4f 91       	pop	r20
     6d6:	3f 91       	pop	r19
     6d8:	2f 91       	pop	r18
     6da:	0f 90       	pop	r0
     6dc:	0b be       	out	0x3b, r0	; 59
     6de:	0f 90       	pop	r0
     6e0:	0f be       	out	0x3f, r0	; 63
     6e2:	0f 90       	pop	r0
     6e4:	1f 90       	pop	r1
     6e6:	18 95       	reti
ISR(TIMER2_OVF_vect){
    static uint8_t counter = 0;
    counter++;
    
if(counter == 128){
    counter =   0;
     6e8:	10 92 77 01 	sts	0x0177, r1

    static uint8_t data     = 0;
    static int8_t old_mode  = 0;
    
/******************************************************************************************************/
    OCR2 = 255;
     6ec:	8f ef       	ldi	r24, 0xFF	; 255
     6ee:	83 bd       	out	0x23, r24	; 35
void init_adc(){
    ADMUX   = (0<<REFS1) | (1<<REFS0) | (1<<ADLAR) |(1<<MUX2)|(1<<MUX1)|(1<<MUX0); //AVCC refrence, Left justified.
    ADCSRA  = (1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //enable ADC, prescale by 128
}
uint8_t read_adc(){
    ADCSRA |= (1<<ADSC); //start conversion.
     6f0:	36 9a       	sbi	0x06, 6	; 6
    while(bit_is_clear(ADCSRA, ADIF)){}
     6f2:	34 9b       	sbis	0x06, 4	; 6
     6f4:	fe cf       	rjmp	.-4      	; 0x6f2 <__vector_10+0x68>
    ADCSRA |= (1<<ADIF);
     6f6:	34 9a       	sbi	0x06, 4	; 6
    return ADCW>>6;
     6f8:	84 b1       	in	r24, 0x04	; 4
     6fa:	95 b1       	in	r25, 0x05	; 5
    read_adc();

/******************************************************************************************************/
//TODO: Improvements:   alarm goes off in both 12am or 24hr mode
//                      snoozing push the freaking 10 minutes but doesn't change alarm.             
    if( ( (CLOCK[MINUTES])==(ALARM[MINUTES]) ) &&  ( (CLOCK[HOURS])==(ALARM[HOURS]) ) ){
     6fc:	90 91 06 01 	lds	r25, 0x0106
     700:	80 91 03 01 	lds	r24, 0x0103
     704:	98 17       	cp	r25, r24
     706:	09 f4       	brne	.+2      	; 0x70a <__vector_10+0x80>
     708:	1b c1       	rjmp	.+566    	; 0x940 <__vector_10+0x2b6>
    }

/******************************************************************************************************/

    static uint8_t ms       = 0;
    if( (mode>>ALARM_ON)&0x01 ){
     70a:	80 91 67 01 	lds	r24, 0x0167
     70e:	82 fd       	sbrc	r24, 2
     710:	b8 c0       	rjmp	.+368    	; 0x882 <__vector_10+0x1f8>
        }
    }

/******************************************************************************************************/

    PORTB   = 0x50; //enable tri-state 
     712:	80 e5       	ldi	r24, 0x50	; 80
     714:	88 bb       	out	0x18, r24	; 24
    DDRA    = 0x00; //set port A inputs.
     716:	1a ba       	out	0x1a, r1	; 26
    PORTA   = 0xff; //Enable pull-up resistors
     718:	cf ef       	ldi	r28, 0xFF	; 255
     71a:	cb bb       	out	0x1b, r28	; 27
    asm("nop");
     71c:	00 00       	nop
    mode    = check_buttons(mode, SET_CLOCK);
     71e:	80 91 67 01 	lds	r24, 0x0167
     722:	64 e0       	ldi	r22, 0x04	; 4
     724:	0e 94 0f 06 	call	0xc1e	; 0xc1e <check_buttons>
     728:	80 93 67 01 	sts	0x0167, r24
    mode    = check_buttons(mode, SET_ALARM);
     72c:	80 91 67 01 	lds	r24, 0x0167
     730:	66 e0       	ldi	r22, 0x06	; 6
     732:	0e 94 0f 06 	call	0xc1e	; 0xc1e <check_buttons>
     736:	80 93 67 01 	sts	0x0167, r24
    mode    = check_buttons(mode, SNOOZE);
     73a:	80 91 67 01 	lds	r24, 0x0167
     73e:	67 e0       	ldi	r22, 0x07	; 7
     740:	0e 94 0f 06 	call	0xc1e	; 0xc1e <check_buttons>
     744:	80 93 67 01 	sts	0x0167, r24
    mode    = check_buttons(mode, AM_PM);
     748:	80 91 67 01 	lds	r24, 0x0167
     74c:	65 e0       	ldi	r22, 0x05	; 5
     74e:	0e 94 0f 06 	call	0xc1e	; 0xc1e <check_buttons>
     752:	80 93 67 01 	sts	0x0167, r24
    DDRA    = 0xff;  //set port A outputs.
     756:	ca bb       	out	0x1a, r28	; 26
    asm("nop");
     758:	00 00       	nop
    
/******************************************************************************************************/

   if( (mode>>SNOOZE)&0x01 ){ //if snooze button is pressed
     75a:	80 91 67 01 	lds	r24, 0x0167
     75e:	87 fd       	sbrc	r24, 7
     760:	b3 c0       	rjmp	.+358    	; 0x8c8 <__vector_10+0x23e>

       music_off();   
       ms   = 0;
   }

   if( ((mode>>AM_PM)&0x01)!=((old_mode>>AM_PM)&0x01) ) //if AM_PM toggled.
     762:	20 91 67 01 	lds	r18, 0x0167
     766:	80 91 75 01 	lds	r24, 0x0175
     76a:	85 95       	asr	r24
     76c:	85 95       	asr	r24
     76e:	85 95       	asr	r24
     770:	85 95       	asr	r24
     772:	85 95       	asr	r24
     774:	08 2e       	mov	r0, r24
     776:	00 0c       	add	r0, r0
     778:	99 0b       	sbc	r25, r25
     77a:	22 95       	swap	r18
     77c:	26 95       	lsr	r18
     77e:	27 70       	andi	r18, 0x07	; 7
     780:	82 27       	eor	r24, r18
     782:	80 fd       	sbrc	r24, 0
     784:	9e c0       	rjmp	.+316    	; 0x8c2 <__vector_10+0x238>
       clock_conversion();

   old_mode = mode;
     786:	80 91 67 01 	lds	r24, 0x0167
     78a:	80 93 75 01 	sts	0x0175, r24

    static uint8_t L_curr   = 0;
    static uint8_t L_prev   = 0;
    static uint8_t R_curr   = 0;
    static uint8_t R_prev   = 0;
    data = spi_read_send( mode );
     78e:	80 91 67 01 	lds	r24, 0x0167
     792:	0e 94 06 06 	call	0xc0c	; 0xc0c <spi_read_send>
     796:	80 93 74 01 	sts	0x0174, r24
    L_curr = (data)&0x03;
     79a:	38 2f       	mov	r19, r24
     79c:	33 70       	andi	r19, 0x03	; 3
     79e:	30 93 73 01 	sts	0x0173, r19
    R_curr = (data>>2)&0x03;
     7a2:	86 95       	lsr	r24
     7a4:	86 95       	lsr	r24
     7a6:	83 70       	andi	r24, 0x03	; 3
     7a8:	80 93 72 01 	sts	0x0172, r24
    static uint8_t sw_table[]   = {0,1,2,0,2,0,0,1,1,0,0,2,0,2,1,0};
    uint8_t sw_index            = 0;
    uint8_t dir                 = 0;
    int8_t enc_mode = 0;

    uint8_t _set_clock_mode = SET_CLOCK_MODE;
     7ac:	90 91 67 01 	lds	r25, 0x0167
    uint8_t _set_alarm_mode = SET_ALARM_MODE;
     7b0:	20 91 67 01 	lds	r18, 0x0167

    static int8_t tick_4R = 0;
    static int8_t tick_4L = 0;

if( _set_alarm_mode || _set_clock_mode || SET_VOLUME){ // if mode is either : set clock, set alarm
        if( _set_clock_mode ){          //priority for setting clock.
     7b4:	94 fd       	sbrc	r25, 4
     7b6:	5f c0       	rjmp	.+190    	; 0x876 <__vector_10+0x1ec>
            L_cnt   = CLOCK[MINUTES];
            R_cnt   = CLOCK[HOURS];
            enc_mode= SET_CLOCK;
        }
        else if( _set_alarm_mode ){
     7b8:	26 ff       	sbrs	r18, 6
     7ba:	24 c1       	rjmp	.+584    	; 0xa04 <__vector_10+0x37a>
            L_cnt   = ALARM[MINUTES];
     7bc:	20 91 03 01 	lds	r18, 0x0103
            R_cnt   = ALARM[HOURS];
     7c0:	90 91 04 01 	lds	r25, 0x0104
            enc_mode= SET_ALARM;
     7c4:	46 e0       	ldi	r20, 0x06	; 6
        }

        sw_index    = (R_prev<<2)|R_curr;
     7c6:	e0 91 71 01 	lds	r30, 0x0171
     7ca:	ee 0f       	add	r30, r30
     7cc:	ee 0f       	add	r30, r30
     7ce:	e8 2b       	or	r30, r24
        R_prev      = R_curr;
     7d0:	80 93 71 01 	sts	0x0171, r24
        dir         = sw_table[sw_index];
     7d4:	f0 e0       	ldi	r31, 0x00	; 0
     7d6:	e8 5f       	subi	r30, 0xF8	; 248
     7d8:	fe 4f       	sbci	r31, 0xFE	; 254
     7da:	80 81       	ld	r24, Z
        if(dir == CW) {tick_4R++;}
     7dc:	81 30       	cpi	r24, 0x01	; 1
     7de:	09 f4       	brne	.+2      	; 0x7e2 <__vector_10+0x158>
     7e0:	a9 c0       	rjmp	.+338    	; 0x934 <__vector_10+0x2aa>
        if(dir == CCW){tick_4R--;}
     7e2:	82 30       	cpi	r24, 0x02	; 2
     7e4:	09 f4       	brne	.+2      	; 0x7e8 <__vector_10+0x15e>
     7e6:	a0 c0       	rjmp	.+320    	; 0x928 <__vector_10+0x29e>
     7e8:	80 91 70 01 	lds	r24, 0x0170

        if(tick_4R >= 4){
     7ec:	84 30       	cpi	r24, 0x04	; 4
     7ee:	0c f4       	brge	.+2      	; 0x7f2 <__vector_10+0x168>
     7f0:	61 c0       	rjmp	.+194    	; 0x8b4 <__vector_10+0x22a>
            tick_4R = 0;
     7f2:	10 92 70 01 	sts	0x0170, r1
            R_cnt++;
     7f6:	9f 5f       	subi	r25, 0xFF	; 255
        else if(tick_4R <= -4){
            tick_4R = 0;
            R_cnt--;
        }
        
        sw_index= (L_prev<<2)|L_curr;
     7f8:	e0 91 6f 01 	lds	r30, 0x016F
     7fc:	ee 0f       	add	r30, r30
     7fe:	ee 0f       	add	r30, r30
     800:	e3 2b       	or	r30, r19
        dir     = sw_table[sw_index];
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	e8 5f       	subi	r30, 0xF8	; 248
     806:	fe 4f       	sbci	r31, 0xFE	; 254
     808:	80 81       	ld	r24, Z
        L_prev = L_curr;
     80a:	30 93 6f 01 	sts	0x016F, r19
        if(dir == CW) {tick_4L++;}
     80e:	81 30       	cpi	r24, 0x01	; 1
     810:	09 f4       	brne	.+2      	; 0x814 <__vector_10+0x18a>
     812:	e8 c0       	rjmp	.+464    	; 0x9e4 <__vector_10+0x35a>
        if(dir == CCW){tick_4L--;}
     814:	82 30       	cpi	r24, 0x02	; 2
     816:	09 f4       	brne	.+2      	; 0x81a <__vector_10+0x190>
     818:	df c0       	rjmp	.+446    	; 0x9d8 <__vector_10+0x34e>
     81a:	80 91 6e 01 	lds	r24, 0x016E

        if(tick_4L >= 4){
     81e:	84 30       	cpi	r24, 0x04	; 4
     820:	0c f4       	brge	.+2      	; 0x824 <__vector_10+0x19a>
     822:	41 c0       	rjmp	.+130    	; 0x8a6 <__vector_10+0x21c>
            tick_4L = 0;
     824:	10 92 6e 01 	sts	0x016E, r1
            L_cnt++;
     828:	2f 5f       	subi	r18, 0xFF	; 255
            tick_4L = 0;
            L_cnt--;
        }


        if(enc_mode == SET_ALARM){
     82a:	46 30       	cpi	r20, 0x06	; 6
     82c:	09 f4       	brne	.+2      	; 0x830 <__vector_10+0x1a6>
     82e:	9a c0       	rjmp	.+308    	; 0x964 <__vector_10+0x2da>
            LED[0] = LED_seg(mode, CLOCK[SECONDS], ALARM[MINUTES], 0);
            LED[1] = LED_seg(mode, CLOCK[SECONDS], ALARM[MINUTES], 1);
            LED[3] = LED_seg(mode, CLOCK[MINUTES], ALARM[HOURS], 3);
            LED[4] = LED_seg(mode, CLOCK[MINUTES], ALARM[HOURS], 4);
        }
        else if(enc_mode == SET_CLOCK){
     830:	44 30       	cpi	r20, 0x04	; 4
     832:	09 f4       	brne	.+2      	; 0x836 <__vector_10+0x1ac>
     834:	eb c0       	rjmp	.+470    	; 0xa0c <__vector_10+0x382>
            LED[4] = LED_seg(mode, CLOCK[HOURS], ALARM[HOURS], 4);
        }

        else {
            static int16_t volume  = 0x0FFF/2;
            volume += R_cnt*50;
     836:	40 91 00 01 	lds	r20, 0x0100
     83a:	50 91 01 01 	lds	r21, 0x0101
     83e:	ba 01       	movw	r22, r20
     840:	32 e3       	ldi	r19, 0x32	; 50
     842:	93 02       	muls	r25, r19
     844:	60 0d       	add	r22, r0
     846:	71 1d       	adc	r23, r1
     848:	11 24       	eor	r1, r1
     84a:	cb 01       	movw	r24, r22
            volume += L_cnt*50;
     84c:	62 e3       	ldi	r22, 0x32	; 50
     84e:	26 02       	muls	r18, r22
     850:	80 0d       	add	r24, r0
     852:	91 1d       	adc	r25, r1
     854:	11 24       	eor	r1, r1
            if(volume>0x0fff) 
     856:	81 15       	cp	r24, r1
     858:	70 e1       	ldi	r23, 0x10	; 16
     85a:	97 07       	cpc	r25, r23
     85c:	0c f4       	brge	.+2      	; 0x860 <__vector_10+0x1d6>
     85e:	c8 c0       	rjmp	.+400    	; 0x9f0 <__vector_10+0x366>
               volume = 0x0fff; 
     860:	8f ef       	ldi	r24, 0xFF	; 255
     862:	9f e0       	ldi	r25, 0x0F	; 15
     864:	90 93 01 01 	sts	0x0101, r25
     868:	80 93 00 01 	sts	0x0100, r24
            if (volume<51) 
                volume = 52;
            
            OCR3A   = volume;
     86c:	90 93 87 00 	sts	0x0087, r25
     870:	80 93 86 00 	sts	0x0086, r24
     874:	25 cf       	rjmp	.-438    	; 0x6c0 <__vector_10+0x36>
    static int8_t tick_4R = 0;
    static int8_t tick_4L = 0;

if( _set_alarm_mode || _set_clock_mode || SET_VOLUME){ // if mode is either : set clock, set alarm
        if( _set_clock_mode ){          //priority for setting clock.
            L_cnt   = CLOCK[MINUTES];
     876:	20 91 06 01 	lds	r18, 0x0106
            R_cnt   = CLOCK[HOURS];
     87a:	90 91 07 01 	lds	r25, 0x0107
            enc_mode= SET_CLOCK;
     87e:	44 e0       	ldi	r20, 0x04	; 4
     880:	a2 cf       	rjmp	.-188    	; 0x7c6 <__vector_10+0x13c>

/******************************************************************************************************/

    static uint8_t ms       = 0;
    if( (mode>>ALARM_ON)&0x01 ){
        ms++;
     882:	80 91 76 01 	lds	r24, 0x0176
     886:	8f 5f       	subi	r24, 0xFF	; 255
     888:	80 93 76 01 	sts	0x0176, r24
        if(ms % 16 == 0) {
     88c:	8f 70       	andi	r24, 0x0F	; 15
     88e:	09 f0       	breq	.+2      	; 0x892 <__vector_10+0x208>
     890:	40 cf       	rjmp	.-384    	; 0x712 <__vector_10+0x88>
            //for note duration (64th notes) 
            beat++;
     892:	80 91 9d 01 	lds	r24, 0x019D
     896:	90 91 9e 01 	lds	r25, 0x019E
     89a:	01 96       	adiw	r24, 0x01	; 1
     89c:	90 93 9e 01 	sts	0x019E, r25
     8a0:	80 93 9d 01 	sts	0x019D, r24
     8a4:	36 cf       	rjmp	.-404    	; 0x712 <__vector_10+0x88>

        if(tick_4L >= 4){
            tick_4L = 0;
            L_cnt++;
        }
        else if(tick_4L <= -4){
     8a6:	8d 3f       	cpi	r24, 0xFD	; 253
     8a8:	0c f0       	brlt	.+2      	; 0x8ac <__vector_10+0x222>
     8aa:	bf cf       	rjmp	.-130    	; 0x82a <__vector_10+0x1a0>
            tick_4L = 0;
     8ac:	10 92 6e 01 	sts	0x016E, r1
            L_cnt--;
     8b0:	21 50       	subi	r18, 0x01	; 1
     8b2:	bb cf       	rjmp	.-138    	; 0x82a <__vector_10+0x1a0>

        if(tick_4R >= 4){
            tick_4R = 0;
            R_cnt++;
        }
        else if(tick_4R <= -4){
     8b4:	8d 3f       	cpi	r24, 0xFD	; 253
     8b6:	0c f0       	brlt	.+2      	; 0x8ba <__vector_10+0x230>
     8b8:	9f cf       	rjmp	.-194    	; 0x7f8 <__vector_10+0x16e>
            tick_4R = 0;
     8ba:	10 92 70 01 	sts	0x0170, r1
            R_cnt--;
     8be:	91 50       	subi	r25, 0x01	; 1
     8c0:	9b cf       	rjmp	.-202    	; 0x7f8 <__vector_10+0x16e>
       music_off();   
       ms   = 0;
   }

   if( ((mode>>AM_PM)&0x01)!=((old_mode>>AM_PM)&0x01) ) //if AM_PM toggled.
       clock_conversion();
     8c2:	0e 94 6f 02 	call	0x4de	; 0x4de <clock_conversion>
     8c6:	5f cf       	rjmp	.-322    	; 0x786 <__vector_10+0xfc>
    asm("nop");
    
/******************************************************************************************************/

   if( (mode>>SNOOZE)&0x01 ){ //if snooze button is pressed
       mode &= ~(1<<SNOOZE); 
     8c8:	80 91 67 01 	lds	r24, 0x0167
     8cc:	8f 77       	andi	r24, 0x7F	; 127
     8ce:	80 93 67 01 	sts	0x0167, r24
       mode &= ~(1<<ALARM_ON); //Don't shout.
     8d2:	80 91 67 01 	lds	r24, 0x0167
     8d6:	8b 7f       	andi	r24, 0xFB	; 251
     8d8:	80 93 67 01 	sts	0x0167, r24
       ALARM[MINUTES] += 10 ;
     8dc:	80 91 03 01 	lds	r24, 0x0103
     8e0:	86 5f       	subi	r24, 0xF6	; 246
     8e2:	80 93 03 01 	sts	0x0103, r24
       LCD_MovCursor(1,0);                      //~ 0.1ms
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	0e 94 c7 06 	call	0xd8e	; 0xd8e <LCD_MovCursor>
       LCD_PutStr("Next Alarm:     ");          //~ 1.6ms
     8ee:	83 e3       	ldi	r24, 0x33	; 51
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	0e 94 44 08 	call	0x1088	; 0x1088 <LCD_PutStr>
       LCD_MovCursor(2,7);                      //~ 0.1ms
     8f6:	67 e0       	ldi	r22, 0x07	; 7
     8f8:	82 e0       	ldi	r24, 0x02	; 2
     8fa:	0e 94 c7 06 	call	0xd8e	; 0xd8e <LCD_MovCursor>
       if(ALARM[HOURS]<10)
     8fe:	80 91 04 01 	lds	r24, 0x0104
     902:	8a 30       	cpi	r24, 0x0A	; 10
     904:	08 f4       	brcc	.+2      	; 0x908 <__vector_10+0x27e>
     906:	c9 c0       	rjmp	.+402    	; 0xa9a <__vector_10+0x410>
           LCD_PutChar('0');
       LCD_PutDec8(ALARM[HOURS]);               //~ 0.2ms 
     908:	80 91 04 01 	lds	r24, 0x0104
     90c:	0e 94 06 07 	call	0xe0c	; 0xe0c <LCD_PutDec8>
       LCD_PutChar(':');                        //~ 0.1ms
     910:	8a e3       	ldi	r24, 0x3A	; 58
     912:	0e 94 2c 08 	call	0x1058	; 0x1058 <LCD_PutChar>
       LCD_PutDec8(ALARM[MINUTES]);             //~ 0.2ms
     916:	80 91 03 01 	lds	r24, 0x0103
     91a:	0e 94 06 07 	call	0xe0c	; 0xe0c <LCD_PutDec8>

       music_off();   
     91e:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <music_off>
       ms   = 0;
     922:	10 92 76 01 	sts	0x0176, r1
     926:	1d cf       	rjmp	.-454    	; 0x762 <__vector_10+0xd8>

        sw_index    = (R_prev<<2)|R_curr;
        R_prev      = R_curr;
        dir         = sw_table[sw_index];
        if(dir == CW) {tick_4R++;}
        if(dir == CCW){tick_4R--;}
     928:	80 91 70 01 	lds	r24, 0x0170
     92c:	81 50       	subi	r24, 0x01	; 1
     92e:	80 93 70 01 	sts	0x0170, r24
     932:	5c cf       	rjmp	.-328    	; 0x7ec <__vector_10+0x162>
        }

        sw_index    = (R_prev<<2)|R_curr;
        R_prev      = R_curr;
        dir         = sw_table[sw_index];
        if(dir == CW) {tick_4R++;}
     934:	80 91 70 01 	lds	r24, 0x0170
     938:	8f 5f       	subi	r24, 0xFF	; 255
     93a:	80 93 70 01 	sts	0x0170, r24
     93e:	56 cf       	rjmp	.-340    	; 0x7ec <__vector_10+0x162>
    read_adc();

/******************************************************************************************************/
//TODO: Improvements:   alarm goes off in both 12am or 24hr mode
//                      snoozing push the freaking 10 minutes but doesn't change alarm.             
    if( ( (CLOCK[MINUTES])==(ALARM[MINUTES]) ) &&  ( (CLOCK[HOURS])==(ALARM[HOURS]) ) ){
     940:	90 91 07 01 	lds	r25, 0x0107
     944:	80 91 04 01 	lds	r24, 0x0104
     948:	98 13       	cpse	r25, r24
     94a:	df ce       	rjmp	.-578    	; 0x70a <__vector_10+0x80>
        if(!ALARM_NOW)
     94c:	80 91 67 01 	lds	r24, 0x0167
     950:	86 95       	lsr	r24
     952:	86 95       	lsr	r24
     954:	09 f4       	brne	.+2      	; 0x958 <__vector_10+0x2ce>
     956:	a9 c0       	rjmp	.+338    	; 0xaaa <__vector_10+0x420>
            music_on();   
        mode |= (1<<ALARM_ON);
     958:	80 91 67 01 	lds	r24, 0x0167
     95c:	84 60       	ori	r24, 0x04	; 4
     95e:	80 93 67 01 	sts	0x0167, r24
     962:	d3 ce       	rjmp	.-602    	; 0x70a <__vector_10+0x80>
            L_cnt--;
        }


        if(enc_mode == SET_ALARM){
            if(L_cnt >= 60)
     964:	2c 33       	cpi	r18, 0x3C	; 60
     966:	0c f4       	brge	.+2      	; 0x96a <__vector_10+0x2e0>
     968:	8e c0       	rjmp	.+284    	; 0xa86 <__vector_10+0x3fc>
                L_cnt= L_cnt-60;
     96a:	2c 53       	subi	r18, 0x3C	; 60
            else if(L_cnt < 0)
                L_cnt=60+L_cnt;

            if(R_cnt >= 24)
     96c:	98 31       	cpi	r25, 0x18	; 24
     96e:	0c f0       	brlt	.+2      	; 0x972 <__vector_10+0x2e8>
     970:	92 c0       	rjmp	.+292    	; 0xa96 <__vector_10+0x40c>
                R_cnt=0;
            else if(R_cnt < 0)
     972:	97 fd       	sbrc	r25, 7
     974:	8e c0       	rjmp	.+284    	; 0xa92 <__vector_10+0x408>
                R_cnt=23;

            ALARM[MINUTES] = L_cnt;
     976:	20 93 03 01 	sts	0x0103, r18
            ALARM[HOURS]   = R_cnt;
     97a:	90 93 04 01 	sts	0x0104, r25
            LED[0] = LED_seg(mode, CLOCK[SECONDS], ALARM[MINUTES], 0);
     97e:	40 91 03 01 	lds	r20, 0x0103
     982:	60 91 05 01 	lds	r22, 0x0105
     986:	80 91 67 01 	lds	r24, 0x0167
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <LED_seg>
     990:	80 93 68 01 	sts	0x0168, r24
            LED[1] = LED_seg(mode, CLOCK[SECONDS], ALARM[MINUTES], 1);
     994:	40 91 03 01 	lds	r20, 0x0103
     998:	60 91 05 01 	lds	r22, 0x0105
     99c:	80 91 67 01 	lds	r24, 0x0167
     9a0:	21 e0       	ldi	r18, 0x01	; 1
     9a2:	0e 94 f7 02 	call	0x5ee	; 0x5ee <LED_seg>
     9a6:	80 93 69 01 	sts	0x0169, r24
            LED[3] = LED_seg(mode, CLOCK[MINUTES], ALARM[HOURS], 3);
     9aa:	40 91 04 01 	lds	r20, 0x0104
     9ae:	60 91 06 01 	lds	r22, 0x0106
     9b2:	80 91 67 01 	lds	r24, 0x0167
     9b6:	23 e0       	ldi	r18, 0x03	; 3
     9b8:	0e 94 f7 02 	call	0x5ee	; 0x5ee <LED_seg>
     9bc:	80 93 6b 01 	sts	0x016B, r24
            LED[4] = LED_seg(mode, CLOCK[MINUTES], ALARM[HOURS], 4);
     9c0:	40 91 04 01 	lds	r20, 0x0104
     9c4:	60 91 06 01 	lds	r22, 0x0106
     9c8:	80 91 67 01 	lds	r24, 0x0167
     9cc:	24 e0       	ldi	r18, 0x04	; 4
     9ce:	0e 94 f7 02 	call	0x5ee	; 0x5ee <LED_seg>
     9d2:	80 93 6c 01 	sts	0x016C, r24
     9d6:	74 ce       	rjmp	.-792    	; 0x6c0 <__vector_10+0x36>
        
        sw_index= (L_prev<<2)|L_curr;
        dir     = sw_table[sw_index];
        L_prev = L_curr;
        if(dir == CW) {tick_4L++;}
        if(dir == CCW){tick_4L--;}
     9d8:	80 91 6e 01 	lds	r24, 0x016E
     9dc:	81 50       	subi	r24, 0x01	; 1
     9de:	80 93 6e 01 	sts	0x016E, r24
     9e2:	1d cf       	rjmp	.-454    	; 0x81e <__vector_10+0x194>
        }
        
        sw_index= (L_prev<<2)|L_curr;
        dir     = sw_table[sw_index];
        L_prev = L_curr;
        if(dir == CW) {tick_4L++;}
     9e4:	80 91 6e 01 	lds	r24, 0x016E
     9e8:	8f 5f       	subi	r24, 0xFF	; 255
     9ea:	80 93 6e 01 	sts	0x016E, r24
     9ee:	17 cf       	rjmp	.-466    	; 0x81e <__vector_10+0x194>
            static int16_t volume  = 0x0FFF/2;
            volume += R_cnt*50;
            volume += L_cnt*50;
            if(volume>0x0fff) 
               volume = 0x0fff; 
            if (volume<51) 
     9f0:	83 33       	cpi	r24, 0x33	; 51
     9f2:	91 05       	cpc	r25, r1
     9f4:	14 f4       	brge	.+4      	; 0x9fa <__vector_10+0x370>
                volume = 52;
     9f6:	84 e3       	ldi	r24, 0x34	; 52
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	90 93 01 01 	sts	0x0101, r25
     9fe:	80 93 00 01 	sts	0x0100, r24
     a02:	34 cf       	rjmp	.-408    	; 0x86c <__vector_10+0x1e2>
    int8_t L_cnt    = 0;

    static uint8_t sw_table[]   = {0,1,2,0,2,0,0,1,1,0,0,2,0,2,1,0};
    uint8_t sw_index            = 0;
    uint8_t dir                 = 0;
    int8_t enc_mode = 0;
     a04:	40 e0       	ldi	r20, 0x00	; 0

#define CW 1 
#define CCW 2 

    int8_t R_cnt    = 0;
    int8_t L_cnt    = 0;
     a06:	20 e0       	ldi	r18, 0x00	; 0
//                  fix setting clock in 12hr mode.

#define CW 1 
#define CCW 2 

    int8_t R_cnt    = 0;
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	dd ce       	rjmp	.-582    	; 0x7c6 <__vector_10+0x13c>
            LED[1] = LED_seg(mode, CLOCK[SECONDS], ALARM[MINUTES], 1);
            LED[3] = LED_seg(mode, CLOCK[MINUTES], ALARM[HOURS], 3);
            LED[4] = LED_seg(mode, CLOCK[MINUTES], ALARM[HOURS], 4);
        }
        else if(enc_mode == SET_CLOCK){
            if(L_cnt >= 60)
     a0c:	2c 33       	cpi	r18, 0x3C	; 60
     a0e:	0c f0       	brlt	.+2      	; 0xa12 <__vector_10+0x388>
     a10:	3e c0       	rjmp	.+124    	; 0xa8e <__vector_10+0x404>
                L_cnt= L_cnt-60;
            else if(L_cnt < 0)
     a12:	27 fd       	sbrc	r18, 7
     a14:	48 c0       	rjmp	.+144    	; 0xaa6 <__vector_10+0x41c>
                L_cnt=60+L_cnt;

            if(R_cnt >= 24)
     a16:	98 31       	cpi	r25, 0x18	; 24
     a18:	0c f0       	brlt	.+2      	; 0xa1c <__vector_10+0x392>
     a1a:	43 c0       	rjmp	.+134    	; 0xaa2 <__vector_10+0x418>
                R_cnt=0;
            else if(R_cnt < 0)
     a1c:	97 fd       	sbrc	r25, 7
     a1e:	97 e1       	ldi	r25, 0x17	; 23
                R_cnt=23;

                CLOCK[SECONDS] = 0;
     a20:	10 92 05 01 	sts	0x0105, r1
            CLOCK[MINUTES] = L_cnt;
     a24:	20 93 06 01 	sts	0x0106, r18
            CLOCK[HOURS]   = R_cnt;
     a28:	90 93 07 01 	sts	0x0107, r25
            LED[0] = LED_seg(mode, CLOCK[MINUTES], ALARM[MINUTES], 0);
     a2c:	40 91 03 01 	lds	r20, 0x0103
     a30:	60 91 06 01 	lds	r22, 0x0106
     a34:	80 91 67 01 	lds	r24, 0x0167
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <LED_seg>
     a3e:	80 93 68 01 	sts	0x0168, r24
            LED[1] = LED_seg(mode, CLOCK[MINUTES], ALARM[MINUTES], 1);
     a42:	40 91 03 01 	lds	r20, 0x0103
     a46:	60 91 06 01 	lds	r22, 0x0106
     a4a:	80 91 67 01 	lds	r24, 0x0167
     a4e:	21 e0       	ldi	r18, 0x01	; 1
     a50:	0e 94 f7 02 	call	0x5ee	; 0x5ee <LED_seg>
     a54:	80 93 69 01 	sts	0x0169, r24
            LED[3] = LED_seg(mode, CLOCK[HOURS], ALARM[HOURS], 3);
     a58:	40 91 04 01 	lds	r20, 0x0104
     a5c:	60 91 07 01 	lds	r22, 0x0107
     a60:	80 91 67 01 	lds	r24, 0x0167
     a64:	23 e0       	ldi	r18, 0x03	; 3
     a66:	0e 94 f7 02 	call	0x5ee	; 0x5ee <LED_seg>
     a6a:	80 93 6b 01 	sts	0x016B, r24
            LED[4] = LED_seg(mode, CLOCK[HOURS], ALARM[HOURS], 4);
     a6e:	40 91 04 01 	lds	r20, 0x0104
     a72:	60 91 07 01 	lds	r22, 0x0107
     a76:	80 91 67 01 	lds	r24, 0x0167
     a7a:	24 e0       	ldi	r18, 0x04	; 4
     a7c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <LED_seg>
     a80:	80 93 6c 01 	sts	0x016C, r24
     a84:	1d ce       	rjmp	.-966    	; 0x6c0 <__vector_10+0x36>


        if(enc_mode == SET_ALARM){
            if(L_cnt >= 60)
                L_cnt= L_cnt-60;
            else if(L_cnt < 0)
     a86:	27 ff       	sbrs	r18, 7
     a88:	71 cf       	rjmp	.-286    	; 0x96c <__vector_10+0x2e2>
                L_cnt=60+L_cnt;
     a8a:	24 5c       	subi	r18, 0xC4	; 196
     a8c:	6f cf       	rjmp	.-290    	; 0x96c <__vector_10+0x2e2>
            LED[3] = LED_seg(mode, CLOCK[MINUTES], ALARM[HOURS], 3);
            LED[4] = LED_seg(mode, CLOCK[MINUTES], ALARM[HOURS], 4);
        }
        else if(enc_mode == SET_CLOCK){
            if(L_cnt >= 60)
                L_cnt= L_cnt-60;
     a8e:	2c 53       	subi	r18, 0x3C	; 60
     a90:	c2 cf       	rjmp	.-124    	; 0xa16 <__vector_10+0x38c>
     a92:	97 e1       	ldi	r25, 0x17	; 23
     a94:	70 cf       	rjmp	.-288    	; 0x976 <__vector_10+0x2ec>
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	6e cf       	rjmp	.-292    	; 0x976 <__vector_10+0x2ec>
       ALARM[MINUTES] += 10 ;
       LCD_MovCursor(1,0);                      //~ 0.1ms
       LCD_PutStr("Next Alarm:     ");          //~ 1.6ms
       LCD_MovCursor(2,7);                      //~ 0.1ms
       if(ALARM[HOURS]<10)
           LCD_PutChar('0');
     a9a:	80 e3       	ldi	r24, 0x30	; 48
     a9c:	0e 94 2c 08 	call	0x1058	; 0x1058 <LCD_PutChar>
     aa0:	33 cf       	rjmp	.-410    	; 0x908 <__vector_10+0x27e>
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	bd cf       	rjmp	.-134    	; 0xa20 <__vector_10+0x396>
        }
        else if(enc_mode == SET_CLOCK){
            if(L_cnt >= 60)
                L_cnt= L_cnt-60;
            else if(L_cnt < 0)
                L_cnt=60+L_cnt;
     aa6:	24 5c       	subi	r18, 0xC4	; 196
     aa8:	b6 cf       	rjmp	.-148    	; 0xa16 <__vector_10+0x38c>
/******************************************************************************************************/
//TODO: Improvements:   alarm goes off in both 12am or 24hr mode
//                      snoozing push the freaking 10 minutes but doesn't change alarm.             
    if( ( (CLOCK[MINUTES])==(ALARM[MINUTES]) ) &&  ( (CLOCK[HOURS])==(ALARM[HOURS]) ) ){
        if(!ALARM_NOW)
            music_on();   
     aaa:	0e 94 90 15 	call	0x2b20	; 0x2b20 <music_on>
     aae:	54 cf       	rjmp	.-344    	; 0x958 <__vector_10+0x2ce>

00000ab0 <__vector_16>:
//tcnt0 interrupts come at 7.8125ms internals.
// 1/32768          = 30.517578uS
//(1/32768)*256     = 7.8125ms
//(1/32768)*256*128 = 1 s
/*************************************************************************/
ISR(TIMER0_OVF_vect){
     ab0:	1f 92       	push	r1
     ab2:	0f 92       	push	r0
     ab4:	0f b6       	in	r0, 0x3f	; 63
     ab6:	0f 92       	push	r0
     ab8:	11 24       	eor	r1, r1
     aba:	0b b6       	in	r0, 0x3b	; 59
     abc:	0f 92       	push	r0
     abe:	2f 93       	push	r18
     ac0:	3f 93       	push	r19
     ac2:	4f 93       	push	r20
     ac4:	5f 93       	push	r21
     ac6:	6f 93       	push	r22
     ac8:	7f 93       	push	r23
     aca:	8f 93       	push	r24
     acc:	9f 93       	push	r25
     ace:	af 93       	push	r26
     ad0:	bf 93       	push	r27
     ad2:	ef 93       	push	r30
     ad4:	ff 93       	push	r31
    CLOCK[SECONDS] += 1; //increment seconds.
     ad6:	80 91 05 01 	lds	r24, 0x0105
     ada:	8f 5f       	subi	r24, 0xFF	; 255
     adc:	80 93 05 01 	sts	0x0105, r24
    clock_update();
     ae0:	0e 94 ad 02 	call	0x55a	; 0x55a <clock_update>
    
    if( (mode >> ALARM_ON) & 0x01 ){
     ae4:	80 91 67 01 	lds	r24, 0x0167
     ae8:	82 ff       	sbrs	r24, 2
     aea:	0c c0       	rjmp	.+24     	; 0xb04 <__vector_16+0x54>
        if(CLOCK[SECONDS]%2){
     aec:	80 91 05 01 	lds	r24, 0x0105
            LCD_MovCursor(1,0);
     af0:	60 e0       	ldi	r22, 0x00	; 0
ISR(TIMER0_OVF_vect){
    CLOCK[SECONDS] += 1; //increment seconds.
    clock_update();
    
    if( (mode >> ALARM_ON) & 0x01 ){
        if(CLOCK[SECONDS]%2){
     af2:	80 ff       	sbrs	r24, 0
     af4:	4d c0       	rjmp	.+154    	; 0xb90 <__vector_16+0xe0>
            LCD_MovCursor(1,0);
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	0e 94 c7 06 	call	0xd8e	; 0xd8e <LCD_MovCursor>
            LCD_PutStr("   Wake Up !!!  ");
     afc:	84 e4       	ldi	r24, 0x44	; 68
     afe:	91 e0       	ldi	r25, 0x01	; 1
     b00:	0e 94 44 08 	call	0x1088	; 0x1088 <LCD_PutStr>
        }
    }


    // load the LED with the right segments representation.
    if( CLOCK[0]%2 )    
     b04:	80 91 05 01 	lds	r24, 0x0105
     b08:	80 fd       	sbrc	r24, 0
     b0a:	4d c0       	rjmp	.+154    	; 0xba6 <__vector_16+0xf6>
        LED[2] = 0xfc;
    
    else
        LED[2] = 0xff;
     b0c:	8f ef       	ldi	r24, 0xFF	; 255
     b0e:	80 93 6a 01 	sts	0x016A, r24
    LED[0] = LED_seg(mode, CLOCK[SECONDS], ALARM[MINUTES], 0);
     b12:	40 91 03 01 	lds	r20, 0x0103
     b16:	60 91 05 01 	lds	r22, 0x0105
     b1a:	80 91 67 01 	lds	r24, 0x0167
     b1e:	20 e0       	ldi	r18, 0x00	; 0
     b20:	0e 94 f7 02 	call	0x5ee	; 0x5ee <LED_seg>
     b24:	80 93 68 01 	sts	0x0168, r24
    LED[1] = LED_seg(mode, CLOCK[SECONDS], ALARM[MINUTES], 1);
     b28:	40 91 03 01 	lds	r20, 0x0103
     b2c:	60 91 05 01 	lds	r22, 0x0105
     b30:	80 91 67 01 	lds	r24, 0x0167
     b34:	21 e0       	ldi	r18, 0x01	; 1
     b36:	0e 94 f7 02 	call	0x5ee	; 0x5ee <LED_seg>
     b3a:	80 93 69 01 	sts	0x0169, r24
    LED[3] = LED_seg(mode, CLOCK[MINUTES], ALARM[HOURS], 3);
     b3e:	40 91 04 01 	lds	r20, 0x0104
     b42:	60 91 06 01 	lds	r22, 0x0106
     b46:	80 91 67 01 	lds	r24, 0x0167
     b4a:	23 e0       	ldi	r18, 0x03	; 3
     b4c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <LED_seg>
     b50:	80 93 6b 01 	sts	0x016B, r24
    LED[4] = LED_seg(mode, CLOCK[MINUTES], ALARM[HOURS], 4);
     b54:	40 91 04 01 	lds	r20, 0x0104
     b58:	60 91 06 01 	lds	r22, 0x0106
     b5c:	80 91 67 01 	lds	r24, 0x0167
     b60:	24 e0       	ldi	r18, 0x04	; 4
     b62:	0e 94 f7 02 	call	0x5ee	; 0x5ee <LED_seg>
     b66:	80 93 6c 01 	sts	0x016C, r24

}
     b6a:	ff 91       	pop	r31
     b6c:	ef 91       	pop	r30
     b6e:	bf 91       	pop	r27
     b70:	af 91       	pop	r26
     b72:	9f 91       	pop	r25
     b74:	8f 91       	pop	r24
     b76:	7f 91       	pop	r23
     b78:	6f 91       	pop	r22
     b7a:	5f 91       	pop	r21
     b7c:	4f 91       	pop	r20
     b7e:	3f 91       	pop	r19
     b80:	2f 91       	pop	r18
     b82:	0f 90       	pop	r0
     b84:	0b be       	out	0x3b, r0	; 59
     b86:	0f 90       	pop	r0
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	0f 90       	pop	r0
     b8c:	1f 90       	pop	r1
     b8e:	18 95       	reti
        if(CLOCK[SECONDS]%2){
            LCD_MovCursor(1,0);
            LCD_PutStr("   Wake Up !!!  ");
        }
        else{
            LCD_MovCursor(1,0);
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	0e 94 c7 06 	call	0xd8e	; 0xd8e <LCD_MovCursor>
            LCD_PutStr(" Dont miss BUS! "); 
     b96:	85 e5       	ldi	r24, 0x55	; 85
     b98:	91 e0       	ldi	r25, 0x01	; 1
     b9a:	0e 94 44 08 	call	0x1088	; 0x1088 <LCD_PutStr>
        }
    }


    // load the LED with the right segments representation.
    if( CLOCK[0]%2 )    
     b9e:	80 91 05 01 	lds	r24, 0x0105
     ba2:	80 ff       	sbrs	r24, 0
     ba4:	b3 cf       	rjmp	.-154    	; 0xb0c <__vector_16+0x5c>
        LED[2] = 0xfc;
     ba6:	8c ef       	ldi	r24, 0xFC	; 252
     ba8:	80 93 6a 01 	sts	0x016A, r24
     bac:	b2 cf       	rjmp	.-156    	; 0xb12 <__vector_16+0x62>

00000bae <init_tcnt0>:
//Interrupt occurs at overflow 0xFF.
//
//
/*********************************************************************/
void init_tcnt0(){
    ASSR    |= (1<<AS0);                            //external 32khz osc (TOSC)
     bae:	80 b7       	in	r24, 0x30	; 48
     bb0:	88 60       	ori	r24, 0x08	; 8
     bb2:	80 bf       	out	0x30, r24	; 48
    TIMSK   |= (1<<TOIE0);                          //enable interrupts
     bb4:	87 b7       	in	r24, 0x37	; 55
     bb6:	81 60       	ori	r24, 0x01	; 1
     bb8:	87 bf       	out	0x37, r24	; 55
    TCCR0   |= (1<<CS02) |(0<<CS01) | (1<<CS00);    //normal mode, 128 prescale
     bba:	83 b7       	in	r24, 0x33	; 51
     bbc:	85 60       	ori	r24, 0x05	; 5
     bbe:	83 bf       	out	0x33, r24	; 51
     bc0:	08 95       	ret

00000bc2 <debounce_switch>:
// Function returns a 1 only once per debounced button push so a debounce and toggle 
// function can be implemented at the same time.  Expects active low pushbutton on 
// Port D bit zero.  Debounce time is determined by external loop delay times 12. 
//*******************************************************************************
//int8_t debounce_switch(uint8_t button, uint16_t *state) {
uint8_t debounce_switch(uint8_t button) {
     bc2:	48 2f       	mov	r20, r24
    static uint16_t state[8] = {0};
    state[button] = (state[button] << 1) | (! bit_is_clear(PINA, button) ) | 0xE000;
     bc4:	e8 2f       	mov	r30, r24
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	99 b3       	in	r25, 0x19	; 25
     bca:	ee 0f       	add	r30, r30
     bcc:	ff 1f       	adc	r31, r31
     bce:	e8 58       	subi	r30, 0x88	; 136
     bd0:	fe 4f       	sbci	r31, 0xFE	; 254
     bd2:	20 81       	ld	r18, Z
     bd4:	31 81       	ldd	r19, Z+1	; 0x01
     bd6:	22 0f       	add	r18, r18
     bd8:	33 1f       	adc	r19, r19
     bda:	30 6e       	ori	r19, 0xE0	; 224
     bdc:	89 2f       	mov	r24, r25
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	02 c0       	rjmp	.+4      	; 0xbe6 <debounce_switch+0x24>
     be2:	95 95       	asr	r25
     be4:	87 95       	ror	r24
     be6:	4a 95       	dec	r20
     be8:	e2 f7       	brpl	.-8      	; 0xbe2 <debounce_switch+0x20>
     bea:	81 70       	andi	r24, 0x01	; 1
     bec:	99 27       	eor	r25, r25
     bee:	28 2b       	or	r18, r24
     bf0:	39 2b       	or	r19, r25
     bf2:	31 83       	std	Z+1, r19	; 0x01
     bf4:	20 83       	st	Z, r18
    if (state[button] == 0xF000) return 1;
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	21 15       	cp	r18, r1
     bfa:	30 4f       	sbci	r19, 0xF0	; 240
     bfc:	09 f0       	breq	.+2      	; 0xc00 <debounce_switch+0x3e>
     bfe:	80 e0       	ldi	r24, 0x00	; 0
    return 0;
}
     c00:	08 95       	ret

00000c02 <spi_init>:
//                            spi_init                               
//Initializes the SPI port on the mega128. Does not do any further   
//external device specific initializations.                          
/*********************************************************************/
void spi_init(){
    SPCR = (1 << SPE) | (1 << MSTR) | (0 << SPR0) | (0 << SPR1);    // enable spi, master mode, low polarity, MSB 1st, fosc/2
     c02:	80 e5       	ldi	r24, 0x50	; 80
     c04:	8d b9       	out	0x0d, r24	; 13
    SPSR = (1 << SPI2X);                                            // Double clk rate.
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	8e b9       	out	0x0e, r24	; 14
     c0a:	08 95       	ret

00000c0c <spi_read_send>:
}

uint8_t spi_read_send(uint8_t data){
    PORTE |= (1<<PE6);                  //bit 6 high: enable encoders serial shift   
     c0c:	1e 9a       	sbi	0x03, 6	; 3
    SPDR = data;                        //send data byte
     c0e:	8f b9       	out	0x0f, r24	; 15
    while (bit_is_clear(SPSR,SPIF)) {}  //wait till data is sent out
     c10:	77 9b       	sbis	0x0e, 7	; 14
     c12:	fe cf       	rjmp	.-4      	; 0xc10 <spi_read_send+0x4>
    PORTE &= ~(1<<PE6);                  //bit 6 low: disable encoders serial shift   
     c14:	1e 98       	cbi	0x03, 6	; 3
    PORTB |= (1<<PD0);                  //shift storage to BarGraph
     c16:	c0 9a       	sbi	0x18, 0	; 24
    PORTB &= ~(1<<PD0);
     c18:	c0 98       	cbi	0x18, 0	; 24
    return SPDR;
     c1a:	8f b1       	in	r24, 0x0f	; 15
}
     c1c:	08 95       	ret

00000c1e <check_buttons>:
// Port D bit zero.  Debounce time is determined by external loop delay times 12. 
//*******************************************************************************
//int8_t debounce_switch(uint8_t button, uint16_t *state) {
uint8_t debounce_switch(uint8_t button) {
    static uint16_t state[8] = {0};
    state[button] = (state[button] << 1) | (! bit_is_clear(PINA, button) ) | 0xE000;
     c1e:	e6 2f       	mov	r30, r22
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	99 b3       	in	r25, 0x19	; 25
     c24:	ee 0f       	add	r30, r30
     c26:	ff 1f       	adc	r31, r31
     c28:	e8 58       	subi	r30, 0x88	; 136
     c2a:	fe 4f       	sbci	r31, 0xFE	; 254
     c2c:	20 81       	ld	r18, Z
     c2e:	31 81       	ldd	r19, Z+1	; 0x01
     c30:	22 0f       	add	r18, r18
     c32:	33 1f       	adc	r19, r19
     c34:	a9 01       	movw	r20, r18
     c36:	50 6e       	ori	r21, 0xE0	; 224
     c38:	29 2f       	mov	r18, r25
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	06 2e       	mov	r0, r22
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <check_buttons+0x26>
     c40:	35 95       	asr	r19
     c42:	27 95       	ror	r18
     c44:	0a 94       	dec	r0
     c46:	e2 f7       	brpl	.-8      	; 0xc40 <check_buttons+0x22>
     c48:	21 70       	andi	r18, 0x01	; 1
     c4a:	33 27       	eor	r19, r19
     c4c:	24 2b       	or	r18, r20
     c4e:	35 2b       	or	r19, r21
     c50:	31 83       	std	Z+1, r19	; 0x01
     c52:	20 83       	st	Z, r18
    if (state[button] == 0xF000) return 1;
     c54:	21 15       	cp	r18, r1
     c56:	30 4f       	sbci	r19, 0xF0	; 240
     c58:	09 f0       	breq	.+2      	; 0xc5c <check_buttons+0x3e>
        uint8_t local_mode = mode;
        if(debounce_switch(pin)){ 
            local_mode ^= (1<<pin);
        }  //if switch true for 12 passes, increment port B
        return local_mode;
}
     c5a:	08 95       	ret
//
/*********************************************************************/
uint8_t check_buttons(uint8_t mode, uint8_t pin){
        uint8_t local_mode = mode;
        if(debounce_switch(pin)){ 
            local_mode ^= (1<<pin);
     c5c:	21 e0       	ldi	r18, 0x01	; 1
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	01 c0       	rjmp	.+2      	; 0xc64 <check_buttons+0x46>
     c62:	22 0f       	add	r18, r18
     c64:	6a 95       	dec	r22
     c66:	ea f7       	brpl	.-6      	; 0xc62 <check_buttons+0x44>
     c68:	82 27       	eor	r24, r18
        }  //if switch true for 12 passes, increment port B
        return local_mode;
}
     c6a:	08 95       	ret

00000c6c <int_to_digit>:

/*********************************************************************/
//                  integer to segments
//
/*********************************************************************/
uint8_t int_to_digit(uint8_t num){
     c6c:	8a 30       	cpi	r24, 0x0A	; 10
     c6e:	30 f4       	brcc	.+12     	; 0xc7c <int_to_digit+0x10>
     c70:	e8 2f       	mov	r30, r24
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	e8 5e       	subi	r30, 0xE8	; 232
     c76:	fe 4f       	sbci	r31, 0xFE	; 254
     c78:	80 81       	ld	r24, Z
     c7a:	08 95       	ret
     c7c:	8f ec       	ldi	r24, 0xCF	; 207
        case 9:
            return 0x90; //0x10010000;
        default:
            return 0xcf; //0x10111111;
    }
}
     c7e:	08 95       	ret

00000c80 <strobe_lcd>:
}


void strobe_lcd(void) {
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
     c80:	e2 e6       	ldi	r30, 0x62	; 98
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	88 60       	ori	r24, 0x08	; 8
     c88:	80 83       	st	Z, r24
	PORTF &= ~0x08;
     c8a:	80 81       	ld	r24, Z
     c8c:	87 7f       	andi	r24, 0xF7	; 247
     c8e:	80 83       	st	Z, r24
     c90:	08 95       	ret

00000c92 <LCD_Clr>:
}

void LCD_Clr(void) {
	LCD_CMD(0x01);
     c92:	1f b8       	out	0x0f, r1	; 15
     c94:	77 9b       	sbis	0x0e, 7	; 14
     c96:	fe cf       	rjmp	.-4      	; 0xc94 <LCD_Clr+0x2>
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	8f b9       	out	0x0f, r24	; 15
     c9c:	77 9b       	sbis	0x0e, 7	; 14
     c9e:	fe cf       	rjmp	.-4      	; 0xc9c <LCD_Clr+0xa>
     ca0:	80 91 62 00 	lds	r24, 0x0062
     ca4:	88 60       	ori	r24, 0x08	; 8
     ca6:	80 93 62 00 	sts	0x0062, r24
     caa:	80 91 62 00 	lds	r24, 0x0062
     cae:	87 7f       	andi	r24, 0xF7	; 247
     cb0:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cb4:	8f e8       	ldi	r24, 0x8F	; 143
     cb6:	91 e0       	ldi	r25, 0x01	; 1
     cb8:	01 97       	sbiw	r24, 0x01	; 1
     cba:	f1 f7       	brne	.-4      	; 0xcb8 <LCD_Clr+0x26>
     cbc:	00 c0       	rjmp	.+0      	; 0xcbe <LCD_Clr+0x2c>
     cbe:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cc0:	8f e3       	ldi	r24, 0x3F	; 63
     cc2:	9f e1       	ldi	r25, 0x1F	; 31
     cc4:	01 97       	sbiw	r24, 0x01	; 1
     cc6:	f1 f7       	brne	.-4      	; 0xcc4 <LCD_Clr+0x32>
     cc8:	00 c0       	rjmp	.+0      	; 0xcca <LCD_Clr+0x38>
     cca:	00 00       	nop
     ccc:	08 95       	ret

00000cce <LCD_MovCursorLn1>:
	_delay_ms(2);   //obligatory waiting for slow LCD
}

void LCD_MovCursorLn1(void) {
	LCD_CMD(0x80);
     cce:	1f b8       	out	0x0f, r1	; 15
     cd0:	77 9b       	sbis	0x0e, 7	; 14
     cd2:	fe cf       	rjmp	.-4      	; 0xcd0 <LCD_MovCursorLn1+0x2>
     cd4:	80 e8       	ldi	r24, 0x80	; 128
     cd6:	8f b9       	out	0x0f, r24	; 15
     cd8:	77 9b       	sbis	0x0e, 7	; 14
     cda:	fe cf       	rjmp	.-4      	; 0xcd8 <LCD_MovCursorLn1+0xa>
     cdc:	80 91 62 00 	lds	r24, 0x0062
     ce0:	88 60       	ori	r24, 0x08	; 8
     ce2:	80 93 62 00 	sts	0x0062, r24
     ce6:	80 91 62 00 	lds	r24, 0x0062
     cea:	87 7f       	andi	r24, 0xF7	; 247
     cec:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cf0:	8f e8       	ldi	r24, 0x8F	; 143
     cf2:	91 e0       	ldi	r25, 0x01	; 1
     cf4:	01 97       	sbiw	r24, 0x01	; 1
     cf6:	f1 f7       	brne	.-4      	; 0xcf4 <LCD_MovCursorLn1+0x26>
     cf8:	00 c0       	rjmp	.+0      	; 0xcfa <LCD_MovCursorLn1+0x2c>
     cfa:	00 00       	nop
     cfc:	08 95       	ret

00000cfe <LCD_MovCursorLn2>:
}

void LCD_MovCursorLn2(void) {
	LCD_CMD(0xC0);
     cfe:	1f b8       	out	0x0f, r1	; 15
     d00:	77 9b       	sbis	0x0e, 7	; 14
     d02:	fe cf       	rjmp	.-4      	; 0xd00 <LCD_MovCursorLn2+0x2>
     d04:	80 ec       	ldi	r24, 0xC0	; 192
     d06:	8f b9       	out	0x0f, r24	; 15
     d08:	77 9b       	sbis	0x0e, 7	; 14
     d0a:	fe cf       	rjmp	.-4      	; 0xd08 <LCD_MovCursorLn2+0xa>
     d0c:	80 91 62 00 	lds	r24, 0x0062
     d10:	88 60       	ori	r24, 0x08	; 8
     d12:	80 93 62 00 	sts	0x0062, r24
     d16:	80 91 62 00 	lds	r24, 0x0062
     d1a:	87 7f       	andi	r24, 0xF7	; 247
     d1c:	80 93 62 00 	sts	0x0062, r24
     d20:	8f e8       	ldi	r24, 0x8F	; 143
     d22:	91 e0       	ldi	r25, 0x01	; 1
     d24:	01 97       	sbiw	r24, 0x01	; 1
     d26:	f1 f7       	brne	.-4      	; 0xd24 <LCD_MovCursorLn2+0x26>
     d28:	00 c0       	rjmp	.+0      	; 0xd2a <LCD_MovCursorLn2+0x2c>
     d2a:	00 00       	nop
     d2c:	08 95       	ret

00000d2e <LCD_CursorBlinkOn>:
}

void LCD_CursorBlinkOn(void) {
	LCD_CMD(0x0F);
     d2e:	1f b8       	out	0x0f, r1	; 15
     d30:	77 9b       	sbis	0x0e, 7	; 14
     d32:	fe cf       	rjmp	.-4      	; 0xd30 <LCD_CursorBlinkOn+0x2>
     d34:	8f e0       	ldi	r24, 0x0F	; 15
     d36:	8f b9       	out	0x0f, r24	; 15
     d38:	77 9b       	sbis	0x0e, 7	; 14
     d3a:	fe cf       	rjmp	.-4      	; 0xd38 <LCD_CursorBlinkOn+0xa>
     d3c:	80 91 62 00 	lds	r24, 0x0062
     d40:	88 60       	ori	r24, 0x08	; 8
     d42:	80 93 62 00 	sts	0x0062, r24
     d46:	80 91 62 00 	lds	r24, 0x0062
     d4a:	87 7f       	andi	r24, 0xF7	; 247
     d4c:	80 93 62 00 	sts	0x0062, r24
     d50:	8f e8       	ldi	r24, 0x8F	; 143
     d52:	91 e0       	ldi	r25, 0x01	; 1
     d54:	01 97       	sbiw	r24, 0x01	; 1
     d56:	f1 f7       	brne	.-4      	; 0xd54 <LCD_CursorBlinkOn+0x26>
     d58:	00 c0       	rjmp	.+0      	; 0xd5a <LCD_CursorBlinkOn+0x2c>
     d5a:	00 00       	nop
     d5c:	08 95       	ret

00000d5e <LCD_CursorBlinkOff>:
}

void LCD_CursorBlinkOff(void) {
	LCD_CMD(0x0C);
     d5e:	1f b8       	out	0x0f, r1	; 15
     d60:	77 9b       	sbis	0x0e, 7	; 14
     d62:	fe cf       	rjmp	.-4      	; 0xd60 <LCD_CursorBlinkOff+0x2>
     d64:	8c e0       	ldi	r24, 0x0C	; 12
     d66:	8f b9       	out	0x0f, r24	; 15
     d68:	77 9b       	sbis	0x0e, 7	; 14
     d6a:	fe cf       	rjmp	.-4      	; 0xd68 <LCD_CursorBlinkOff+0xa>
     d6c:	80 91 62 00 	lds	r24, 0x0062
     d70:	88 60       	ori	r24, 0x08	; 8
     d72:	80 93 62 00 	sts	0x0062, r24
     d76:	80 91 62 00 	lds	r24, 0x0062
     d7a:	87 7f       	andi	r24, 0xF7	; 247
     d7c:	80 93 62 00 	sts	0x0062, r24
     d80:	8f e8       	ldi	r24, 0x8F	; 143
     d82:	91 e0       	ldi	r25, 0x01	; 1
     d84:	01 97       	sbiw	r24, 0x01	; 1
     d86:	f1 f7       	brne	.-4      	; 0xd84 <LCD_CursorBlinkOff+0x26>
     d88:	00 c0       	rjmp	.+0      	; 0xd8a <LCD_CursorBlinkOff+0x2c>
     d8a:	00 00       	nop
     d8c:	08 95       	ret

00000d8e <LCD_MovCursor>:
		
	The cursor will not be moved if an invalid location is provided
*/
void LCD_MovCursor(uint8_t line, uint8_t position) {
	uint8_t addr;
	if (position > 15)
     d8e:	60 31       	cpi	r22, 0x10	; 16
     d90:	20 f4       	brcc	.+8      	; 0xd9a <LCD_MovCursor+0xc>
		return;
	if (line == 1) {
     d92:	81 30       	cpi	r24, 0x01	; 1
     d94:	19 f0       	breq	.+6      	; 0xd9c <LCD_MovCursor+0xe>
		addr = 0x80 + position;
	} else if (line == 2) {
     d96:	82 30       	cpi	r24, 0x02	; 2
     d98:	c9 f0       	breq	.+50     	; 0xdcc <LCD_MovCursor+0x3e>
     d9a:	08 95       	ret
void LCD_MovCursor(uint8_t line, uint8_t position) {
	uint8_t addr;
	if (position > 15)
		return;
	if (line == 1) {
		addr = 0x80 + position;
     d9c:	60 58       	subi	r22, 0x80	; 128
		addr = 0xC0 + position;
	} else {
		// invalid line number
		return;
	}
	LCD_CMD(addr);
     d9e:	1f b8       	out	0x0f, r1	; 15
     da0:	77 9b       	sbis	0x0e, 7	; 14
     da2:	fe cf       	rjmp	.-4      	; 0xda0 <LCD_MovCursor+0x12>
     da4:	6f b9       	out	0x0f, r22	; 15
     da6:	77 9b       	sbis	0x0e, 7	; 14
     da8:	fe cf       	rjmp	.-4      	; 0xda6 <LCD_MovCursor+0x18>
     daa:	80 91 62 00 	lds	r24, 0x0062
     dae:	88 60       	ori	r24, 0x08	; 8
     db0:	80 93 62 00 	sts	0x0062, r24
     db4:	80 91 62 00 	lds	r24, 0x0062
     db8:	87 7f       	andi	r24, 0xF7	; 247
     dba:	80 93 62 00 	sts	0x0062, r24
     dbe:	8f e8       	ldi	r24, 0x8F	; 143
     dc0:	91 e0       	ldi	r25, 0x01	; 1
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	f1 f7       	brne	.-4      	; 0xdc2 <LCD_MovCursor+0x34>
     dc6:	00 c0       	rjmp	.+0      	; 0xdc8 <LCD_MovCursor+0x3a>
     dc8:	00 00       	nop
     dca:	08 95       	ret
	if (position > 15)
		return;
	if (line == 1) {
		addr = 0x80 + position;
	} else if (line == 2) {
		addr = 0xC0 + position;
     dcc:	60 54       	subi	r22, 0x40	; 64
     dce:	e7 cf       	rjmp	.-50     	; 0xd9e <LCD_MovCursor+0x10>

00000dd0 <LCD_FillSpaces>:
		return;
	}
	LCD_CMD(addr);
}

void LCD_FillSpaces(void) {
     dd0:	20 e1       	ldi	r18, 0x10	; 16
     dd2:	30 e0       	ldi	r19, 0x00	; 0
	int count;
	for (count=0; count<=15; count++){
		LCD_DATA(' ');
     dd4:	41 e0       	ldi	r20, 0x01	; 1
     dd6:	90 e2       	ldi	r25, 0x20	; 32
     dd8:	4f b9       	out	0x0f, r20	; 15
     dda:	77 9b       	sbis	0x0e, 7	; 14
     ddc:	fe cf       	rjmp	.-4      	; 0xdda <LCD_FillSpaces+0xa>
     dde:	9f b9       	out	0x0f, r25	; 15
     de0:	77 9b       	sbis	0x0e, 7	; 14
     de2:	fe cf       	rjmp	.-4      	; 0xde0 <LCD_FillSpaces+0x10>
     de4:	80 91 62 00 	lds	r24, 0x0062
     de8:	88 60       	ori	r24, 0x08	; 8
     dea:	80 93 62 00 	sts	0x0062, r24
     dee:	80 91 62 00 	lds	r24, 0x0062
     df2:	87 7f       	andi	r24, 0xF7	; 247
     df4:	80 93 62 00 	sts	0x0062, r24
     df8:	ef e8       	ldi	r30, 0x8F	; 143
     dfa:	f1 e0       	ldi	r31, 0x01	; 1
     dfc:	31 97       	sbiw	r30, 0x01	; 1
     dfe:	f1 f7       	brne	.-4      	; 0xdfc <LCD_FillSpaces+0x2c>
     e00:	00 c0       	rjmp	.+0      	; 0xe02 <LCD_FillSpaces+0x32>
     e02:	00 00       	nop
     e04:	21 50       	subi	r18, 0x01	; 1
     e06:	31 09       	sbc	r19, r1
	LCD_CMD(addr);
}

void LCD_FillSpaces(void) {
	int count;
	for (count=0; count<=15; count++){
     e08:	39 f7       	brne	.-50     	; 0xdd8 <LCD_FillSpaces+0x8>
		LCD_DATA(' ');
	}
}
     e0a:	08 95       	ret

00000e0c <LCD_PutDec8>:
	and display the result.
*/
void LCD_PutDec8(uint8_t num) {
	uint8_t digit = 0;
	uint8_t flag = 0;
	while (num >= 100) {
     e0c:	84 36       	cpi	r24, 0x64	; 100
     e0e:	08 f4       	brcc	.+2      	; 0xe12 <LCD_PutDec8+0x6>
     e10:	5b c0       	rjmp	.+182    	; 0xec8 <LCD_PutDec8+0xbc>
		digit++;
		num -= 100;
     e12:	9c e9       	ldi	r25, 0x9C	; 156
     e14:	98 0f       	add	r25, r24
	and display the result.
*/
void LCD_PutDec8(uint8_t num) {
	uint8_t digit = 0;
	uint8_t flag = 0;
	while (num >= 100) {
     e16:	94 36       	cpi	r25, 0x64	; 100
     e18:	08 f4       	brcc	.+2      	; 0xe1c <LCD_PutDec8+0x10>
     e1a:	59 c0       	rjmp	.+178    	; 0xece <LCD_PutDec8+0xc2>
		digit++;
		num -= 100;
     e1c:	88 5c       	subi	r24, 0xC8	; 200
     e1e:	22 e3       	ldi	r18, 0x32	; 50
	}
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
     e20:	91 e0       	ldi	r25, 0x01	; 1
     e22:	9f b9       	out	0x0f, r25	; 15
     e24:	77 9b       	sbis	0x0e, 7	; 14
     e26:	fe cf       	rjmp	.-4      	; 0xe24 <LCD_PutDec8+0x18>
     e28:	2f b9       	out	0x0f, r18	; 15
     e2a:	77 9b       	sbis	0x0e, 7	; 14
     e2c:	fe cf       	rjmp	.-4      	; 0xe2a <LCD_PutDec8+0x1e>
     e2e:	90 91 62 00 	lds	r25, 0x0062
     e32:	98 60       	ori	r25, 0x08	; 8
     e34:	90 93 62 00 	sts	0x0062, r25
     e38:	90 91 62 00 	lds	r25, 0x0062
     e3c:	97 7f       	andi	r25, 0xF7	; 247
     e3e:	90 93 62 00 	sts	0x0062, r25
     e42:	ef e8       	ldi	r30, 0x8F	; 143
     e44:	f1 e0       	ldi	r31, 0x01	; 1
     e46:	31 97       	sbiw	r30, 0x01	; 1
     e48:	f1 f7       	brne	.-4      	; 0xe46 <LCD_PutDec8+0x3a>
     e4a:	00 c0       	rjmp	.+0      	; 0xe4c <LCD_PutDec8+0x40>
     e4c:	00 00       	nop
		flag = 1;
	}
	digit = 0;
	while (num >= 10) {
     e4e:	8a 30       	cpi	r24, 0x0A	; 10
     e50:	08 f4       	brcc	.+2      	; 0xe54 <LCD_PutDec8+0x48>
     e52:	40 c0       	rjmp	.+128    	; 0xed4 <LCD_PutDec8+0xc8>

/*
	Convert an 8 bit unsigned number to ASCII
	and display the result.
*/
void LCD_PutDec8(uint8_t num) {
     e54:	90 e0       	ldi	r25, 0x00	; 0
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 10) {
		digit++;
     e56:	9f 5f       	subi	r25, 0xFF	; 255
		num -= 10;
     e58:	8a 50       	subi	r24, 0x0A	; 10
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 10) {
     e5a:	8a 30       	cpi	r24, 0x0A	; 10
     e5c:	e0 f7       	brcc	.-8      	; 0xe56 <LCD_PutDec8+0x4a>
		digit++;
		num -= 10;
	}
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
     e5e:	21 e0       	ldi	r18, 0x01	; 1
     e60:	2f b9       	out	0x0f, r18	; 15
     e62:	77 9b       	sbis	0x0e, 7	; 14
     e64:	fe cf       	rjmp	.-4      	; 0xe62 <LCD_PutDec8+0x56>
     e66:	90 5d       	subi	r25, 0xD0	; 208
     e68:	9f b9       	out	0x0f, r25	; 15
     e6a:	77 9b       	sbis	0x0e, 7	; 14
     e6c:	fe cf       	rjmp	.-4      	; 0xe6a <LCD_PutDec8+0x5e>
     e6e:	90 91 62 00 	lds	r25, 0x0062
     e72:	98 60       	ori	r25, 0x08	; 8
     e74:	90 93 62 00 	sts	0x0062, r25
     e78:	90 91 62 00 	lds	r25, 0x0062
     e7c:	97 7f       	andi	r25, 0xF7	; 247
     e7e:	90 93 62 00 	sts	0x0062, r25
     e82:	ef e8       	ldi	r30, 0x8F	; 143
     e84:	f1 e0       	ldi	r31, 0x01	; 1
     e86:	31 97       	sbiw	r30, 0x01	; 1
     e88:	f1 f7       	brne	.-4      	; 0xe86 <LCD_PutDec8+0x7a>
     e8a:	00 c0       	rjmp	.+0      	; 0xe8c <LCD_PutDec8+0x80>
     e8c:	00 00       	nop
		flag = 1;
	}
	digit = 0;
	while (num >= 1) {
     e8e:	88 23       	and	r24, r24
     e90:	c9 f0       	breq	.+50     	; 0xec4 <LCD_PutDec8+0xb8>
     e92:	80 5d       	subi	r24, 0xD0	; 208
		digit++;
		num -= 1;
	}
	LCD_DATA(digit + 48);
     e94:	91 e0       	ldi	r25, 0x01	; 1
     e96:	9f b9       	out	0x0f, r25	; 15
     e98:	77 9b       	sbis	0x0e, 7	; 14
     e9a:	fe cf       	rjmp	.-4      	; 0xe98 <LCD_PutDec8+0x8c>
     e9c:	8f b9       	out	0x0f, r24	; 15
     e9e:	77 9b       	sbis	0x0e, 7	; 14
     ea0:	fe cf       	rjmp	.-4      	; 0xe9e <LCD_PutDec8+0x92>
     ea2:	80 91 62 00 	lds	r24, 0x0062
     ea6:	88 60       	ori	r24, 0x08	; 8
     ea8:	80 93 62 00 	sts	0x0062, r24
     eac:	80 91 62 00 	lds	r24, 0x0062
     eb0:	87 7f       	andi	r24, 0xF7	; 247
     eb2:	80 93 62 00 	sts	0x0062, r24
     eb6:	8f e8       	ldi	r24, 0x8F	; 143
     eb8:	91 e0       	ldi	r25, 0x01	; 1
     eba:	01 97       	sbiw	r24, 0x01	; 1
     ebc:	f1 f7       	brne	.-4      	; 0xeba <LCD_PutDec8+0xae>
     ebe:	00 c0       	rjmp	.+0      	; 0xec0 <LCD_PutDec8+0xb4>
     ec0:	00 00       	nop
     ec2:	08 95       	ret
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 1) {
     ec4:	80 e3       	ldi	r24, 0x30	; 48
     ec6:	e6 cf       	rjmp	.-52     	; 0xe94 <LCD_PutDec8+0x88>
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 10) {
     ec8:	8a 30       	cpi	r24, 0x0A	; 10
     eca:	20 f6       	brcc	.-120    	; 0xe54 <LCD_PutDec8+0x48>
     ecc:	e0 cf       	rjmp	.-64     	; 0xe8e <LCD_PutDec8+0x82>
	and display the result.
*/
void LCD_PutDec8(uint8_t num) {
	uint8_t digit = 0;
	uint8_t flag = 0;
	while (num >= 100) {
     ece:	89 2f       	mov	r24, r25
     ed0:	21 e3       	ldi	r18, 0x31	; 49
     ed2:	a6 cf       	rjmp	.-180    	; 0xe20 <LCD_PutDec8+0x14>
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 10) {
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	c3 cf       	rjmp	.-122    	; 0xe5e <LCD_PutDec8+0x52>

00000ed8 <LCD_PutDec16>:
	and display the result.
*/
void LCD_PutDec16(uint16_t num) {
	uint8_t digit = 0;
	uint8_t flag = 0;
	while (num >= 10000) {
     ed8:	80 31       	cpi	r24, 0x10	; 16
     eda:	27 e2       	ldi	r18, 0x27	; 39
     edc:	92 07       	cpc	r25, r18
     ede:	08 f4       	brcc	.+2      	; 0xee2 <LCD_PutDec16+0xa>
     ee0:	a5 c0       	rjmp	.+330    	; 0x102c <LCD_PutDec16+0x154>
     ee2:	20 e0       	ldi	r18, 0x00	; 0
		digit++;
     ee4:	2f 5f       	subi	r18, 0xFF	; 255
		num -= 10000;
     ee6:	80 51       	subi	r24, 0x10	; 16
     ee8:	97 42       	sbci	r25, 0x27	; 39
	and display the result.
*/
void LCD_PutDec16(uint16_t num) {
	uint8_t digit = 0;
	uint8_t flag = 0;
	while (num >= 10000) {
     eea:	80 31       	cpi	r24, 0x10	; 16
     eec:	37 e2       	ldi	r19, 0x27	; 39
     eee:	93 07       	cpc	r25, r19
     ef0:	c8 f7       	brcc	.-14     	; 0xee4 <LCD_PutDec16+0xc>
		digit++;
		num -= 10000;
	}
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
     ef2:	31 e0       	ldi	r19, 0x01	; 1
     ef4:	3f b9       	out	0x0f, r19	; 15
     ef6:	77 9b       	sbis	0x0e, 7	; 14
     ef8:	fe cf       	rjmp	.-4      	; 0xef6 <LCD_PutDec16+0x1e>
     efa:	20 5d       	subi	r18, 0xD0	; 208
     efc:	2f b9       	out	0x0f, r18	; 15
     efe:	77 9b       	sbis	0x0e, 7	; 14
     f00:	fe cf       	rjmp	.-4      	; 0xefe <LCD_PutDec16+0x26>
     f02:	20 91 62 00 	lds	r18, 0x0062
     f06:	28 60       	ori	r18, 0x08	; 8
     f08:	20 93 62 00 	sts	0x0062, r18
     f0c:	20 91 62 00 	lds	r18, 0x0062
     f10:	27 7f       	andi	r18, 0xF7	; 247
     f12:	20 93 62 00 	sts	0x0062, r18
     f16:	ef e8       	ldi	r30, 0x8F	; 143
     f18:	f1 e0       	ldi	r31, 0x01	; 1
     f1a:	31 97       	sbiw	r30, 0x01	; 1
     f1c:	f1 f7       	brne	.-4      	; 0xf1a <LCD_PutDec16+0x42>
     f1e:	00 c0       	rjmp	.+0      	; 0xf20 <LCD_PutDec16+0x48>
     f20:	00 00       	nop
		flag = 1;
	}
	digit = 0;
	while (num >= 1000) {
     f22:	88 3e       	cpi	r24, 0xE8	; 232
     f24:	f3 e0       	ldi	r31, 0x03	; 3
     f26:	9f 07       	cpc	r25, r31
     f28:	08 f4       	brcc	.+2      	; 0xf2c <LCD_PutDec16+0x54>
     f2a:	94 c0       	rjmp	.+296    	; 0x1054 <LCD_PutDec16+0x17c>
	and display the result.
*/
void LCD_PutDec16(uint16_t num) {
	uint8_t digit = 0;
	uint8_t flag = 0;
	while (num >= 10000) {
     f2c:	20 e0       	ldi	r18, 0x00	; 0
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 1000) {
		digit++;
     f2e:	2f 5f       	subi	r18, 0xFF	; 255
		num -= 1000;
     f30:	88 5e       	subi	r24, 0xE8	; 232
     f32:	93 40       	sbci	r25, 0x03	; 3
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 1000) {
     f34:	88 3e       	cpi	r24, 0xE8	; 232
     f36:	33 e0       	ldi	r19, 0x03	; 3
     f38:	93 07       	cpc	r25, r19
     f3a:	c8 f7       	brcc	.-14     	; 0xf2e <LCD_PutDec16+0x56>
		digit++;
		num -= 1000;
	}
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
     f3c:	31 e0       	ldi	r19, 0x01	; 1
     f3e:	3f b9       	out	0x0f, r19	; 15
     f40:	77 9b       	sbis	0x0e, 7	; 14
     f42:	fe cf       	rjmp	.-4      	; 0xf40 <LCD_PutDec16+0x68>
     f44:	20 5d       	subi	r18, 0xD0	; 208
     f46:	2f b9       	out	0x0f, r18	; 15
     f48:	77 9b       	sbis	0x0e, 7	; 14
     f4a:	fe cf       	rjmp	.-4      	; 0xf48 <LCD_PutDec16+0x70>
     f4c:	20 91 62 00 	lds	r18, 0x0062
     f50:	28 60       	ori	r18, 0x08	; 8
     f52:	20 93 62 00 	sts	0x0062, r18
     f56:	20 91 62 00 	lds	r18, 0x0062
     f5a:	27 7f       	andi	r18, 0xF7	; 247
     f5c:	20 93 62 00 	sts	0x0062, r18
     f60:	ef e8       	ldi	r30, 0x8F	; 143
     f62:	f1 e0       	ldi	r31, 0x01	; 1
     f64:	31 97       	sbiw	r30, 0x01	; 1
     f66:	f1 f7       	brne	.-4      	; 0xf64 <LCD_PutDec16+0x8c>
     f68:	00 c0       	rjmp	.+0      	; 0xf6a <LCD_PutDec16+0x92>
     f6a:	00 00       	nop
		flag = 1;
	}
	digit = 0;
	while (num >= 100) {
     f6c:	84 36       	cpi	r24, 0x64	; 100
     f6e:	91 05       	cpc	r25, r1
     f70:	08 f4       	brcc	.+2      	; 0xf74 <LCD_PutDec16+0x9c>
     f72:	6c c0       	rjmp	.+216    	; 0x104c <LCD_PutDec16+0x174>
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 1000) {
     f74:	20 e0       	ldi	r18, 0x00	; 0
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 100) {
		digit++;
     f76:	2f 5f       	subi	r18, 0xFF	; 255
		num -= 100;
     f78:	84 56       	subi	r24, 0x64	; 100
     f7a:	91 09       	sbc	r25, r1
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 100) {
     f7c:	84 36       	cpi	r24, 0x64	; 100
     f7e:	91 05       	cpc	r25, r1
     f80:	d0 f7       	brcc	.-12     	; 0xf76 <LCD_PutDec16+0x9e>
		digit++;
		num -= 100;
	}
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
     f82:	31 e0       	ldi	r19, 0x01	; 1
     f84:	3f b9       	out	0x0f, r19	; 15
     f86:	77 9b       	sbis	0x0e, 7	; 14
     f88:	fe cf       	rjmp	.-4      	; 0xf86 <LCD_PutDec16+0xae>
     f8a:	20 5d       	subi	r18, 0xD0	; 208
     f8c:	2f b9       	out	0x0f, r18	; 15
     f8e:	77 9b       	sbis	0x0e, 7	; 14
     f90:	fe cf       	rjmp	.-4      	; 0xf8e <LCD_PutDec16+0xb6>
     f92:	20 91 62 00 	lds	r18, 0x0062
     f96:	28 60       	ori	r18, 0x08	; 8
     f98:	20 93 62 00 	sts	0x0062, r18
     f9c:	20 91 62 00 	lds	r18, 0x0062
     fa0:	27 7f       	andi	r18, 0xF7	; 247
     fa2:	20 93 62 00 	sts	0x0062, r18
     fa6:	ef e8       	ldi	r30, 0x8F	; 143
     fa8:	f1 e0       	ldi	r31, 0x01	; 1
     faa:	31 97       	sbiw	r30, 0x01	; 1
     fac:	f1 f7       	brne	.-4      	; 0xfaa <LCD_PutDec16+0xd2>
     fae:	00 c0       	rjmp	.+0      	; 0xfb0 <LCD_PutDec16+0xd8>
     fb0:	00 00       	nop
		flag = 1;
	}
	digit = 0;
	while (num >= 10) {
     fb2:	8a 30       	cpi	r24, 0x0A	; 10
     fb4:	91 05       	cpc	r25, r1
     fb6:	08 f4       	brcc	.+2      	; 0xfba <LCD_PutDec16+0xe2>
     fb8:	47 c0       	rjmp	.+142    	; 0x1048 <LCD_PutDec16+0x170>
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 100) {
     fba:	20 e0       	ldi	r18, 0x00	; 0
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 10) {
		digit++;
     fbc:	2f 5f       	subi	r18, 0xFF	; 255
		num -= 10;
     fbe:	0a 97       	sbiw	r24, 0x0a	; 10
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 10) {
     fc0:	8a 30       	cpi	r24, 0x0A	; 10
     fc2:	91 05       	cpc	r25, r1
     fc4:	d8 f7       	brcc	.-10     	; 0xfbc <LCD_PutDec16+0xe4>
		digit++;
		num -= 10;
	}
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
     fc6:	31 e0       	ldi	r19, 0x01	; 1
     fc8:	3f b9       	out	0x0f, r19	; 15
     fca:	77 9b       	sbis	0x0e, 7	; 14
     fcc:	fe cf       	rjmp	.-4      	; 0xfca <LCD_PutDec16+0xf2>
     fce:	20 5d       	subi	r18, 0xD0	; 208
     fd0:	2f b9       	out	0x0f, r18	; 15
     fd2:	77 9b       	sbis	0x0e, 7	; 14
     fd4:	fe cf       	rjmp	.-4      	; 0xfd2 <LCD_PutDec16+0xfa>
     fd6:	20 91 62 00 	lds	r18, 0x0062
     fda:	28 60       	ori	r18, 0x08	; 8
     fdc:	20 93 62 00 	sts	0x0062, r18
     fe0:	20 91 62 00 	lds	r18, 0x0062
     fe4:	27 7f       	andi	r18, 0xF7	; 247
     fe6:	20 93 62 00 	sts	0x0062, r18
     fea:	ef e8       	ldi	r30, 0x8F	; 143
     fec:	f1 e0       	ldi	r31, 0x01	; 1
     fee:	31 97       	sbiw	r30, 0x01	; 1
     ff0:	f1 f7       	brne	.-4      	; 0xfee <LCD_PutDec16+0x116>
     ff2:	00 c0       	rjmp	.+0      	; 0xff4 <LCD_PutDec16+0x11c>
     ff4:	00 00       	nop
		flag = 1;
	}
	digit = 0;
	while (num >= 1) {
     ff6:	00 97       	sbiw	r24, 0x00	; 0
     ff8:	59 f1       	breq	.+86     	; 0x1050 <LCD_PutDec16+0x178>
     ffa:	80 5d       	subi	r24, 0xD0	; 208
		digit++;
		num -= 1;
	}
	LCD_DATA(digit + 48);
     ffc:	91 e0       	ldi	r25, 0x01	; 1
     ffe:	9f b9       	out	0x0f, r25	; 15
    1000:	77 9b       	sbis	0x0e, 7	; 14
    1002:	fe cf       	rjmp	.-4      	; 0x1000 <LCD_PutDec16+0x128>
    1004:	8f b9       	out	0x0f, r24	; 15
    1006:	77 9b       	sbis	0x0e, 7	; 14
    1008:	fe cf       	rjmp	.-4      	; 0x1006 <LCD_PutDec16+0x12e>
    100a:	80 91 62 00 	lds	r24, 0x0062
    100e:	88 60       	ori	r24, 0x08	; 8
    1010:	80 93 62 00 	sts	0x0062, r24
    1014:	80 91 62 00 	lds	r24, 0x0062
    1018:	87 7f       	andi	r24, 0xF7	; 247
    101a:	80 93 62 00 	sts	0x0062, r24
    101e:	8f e8       	ldi	r24, 0x8F	; 143
    1020:	91 e0       	ldi	r25, 0x01	; 1
    1022:	01 97       	sbiw	r24, 0x01	; 1
    1024:	f1 f7       	brne	.-4      	; 0x1022 <LCD_PutDec16+0x14a>
    1026:	00 c0       	rjmp	.+0      	; 0x1028 <LCD_PutDec16+0x150>
    1028:	00 00       	nop
    102a:	08 95       	ret
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 1000) {
    102c:	88 3e       	cpi	r24, 0xE8	; 232
    102e:	23 e0       	ldi	r18, 0x03	; 3
    1030:	92 07       	cpc	r25, r18
    1032:	08 f0       	brcs	.+2      	; 0x1036 <LCD_PutDec16+0x15e>
    1034:	7b cf       	rjmp	.-266    	; 0xf2c <LCD_PutDec16+0x54>
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 100) {
    1036:	84 36       	cpi	r24, 0x64	; 100
    1038:	91 05       	cpc	r25, r1
    103a:	08 f0       	brcs	.+2      	; 0x103e <LCD_PutDec16+0x166>
    103c:	9b cf       	rjmp	.-202    	; 0xf74 <LCD_PutDec16+0x9c>
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 10) {
    103e:	8a 30       	cpi	r24, 0x0A	; 10
    1040:	91 05       	cpc	r25, r1
    1042:	08 f0       	brcs	.+2      	; 0x1046 <LCD_PutDec16+0x16e>
    1044:	ba cf       	rjmp	.-140    	; 0xfba <LCD_PutDec16+0xe2>
    1046:	d7 cf       	rjmp	.-82     	; 0xff6 <LCD_PutDec16+0x11e>
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	bd cf       	rjmp	.-134    	; 0xfc6 <LCD_PutDec16+0xee>
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 100) {
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	99 cf       	rjmp	.-206    	; 0xf82 <LCD_PutDec16+0xaa>
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 1) {
    1050:	80 e3       	ldi	r24, 0x30	; 48
    1052:	d4 cf       	rjmp	.-88     	; 0xffc <LCD_PutDec16+0x124>
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 1000) {
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	72 cf       	rjmp	.-284    	; 0xf3c <LCD_PutDec16+0x64>

00001058 <LCD_PutChar>:
/*
	Send an ASCII character to the LCD
	usage: LCD_PutChar('H');
*/
void LCD_PutChar(char a_char) {
	LCD_DATA(a_char);
    1058:	91 e0       	ldi	r25, 0x01	; 1
    105a:	9f b9       	out	0x0f, r25	; 15
    105c:	77 9b       	sbis	0x0e, 7	; 14
    105e:	fe cf       	rjmp	.-4      	; 0x105c <LCD_PutChar+0x4>
    1060:	8f b9       	out	0x0f, r24	; 15
    1062:	77 9b       	sbis	0x0e, 7	; 14
    1064:	fe cf       	rjmp	.-4      	; 0x1062 <LCD_PutChar+0xa>
    1066:	80 91 62 00 	lds	r24, 0x0062
    106a:	88 60       	ori	r24, 0x08	; 8
    106c:	80 93 62 00 	sts	0x0062, r24
    1070:	80 91 62 00 	lds	r24, 0x0062
    1074:	87 7f       	andi	r24, 0xF7	; 247
    1076:	80 93 62 00 	sts	0x0062, r24
    107a:	8f e8       	ldi	r24, 0x8F	; 143
    107c:	91 e0       	ldi	r25, 0x01	; 1
    107e:	01 97       	sbiw	r24, 0x01	; 1
    1080:	f1 f7       	brne	.-4      	; 0x107e <LCD_PutChar+0x26>
    1082:	00 c0       	rjmp	.+0      	; 0x1084 <LCD_PutChar+0x2c>
    1084:	00 00       	nop
    1086:	08 95       	ret

00001088 <LCD_PutStr>:
}

/*
	Send an ASCII string to the LCD
*/
void LCD_PutStr(char *lcd_str) {
    1088:	fc 01       	movw	r30, r24
	uint8_t count;
	for (count=0; count<=(strlen(lcd_str)-1); count++){
    108a:	40 e0       	ldi	r20, 0x00	; 0
    108c:	50 e0       	ldi	r21, 0x00	; 0
    108e:	60 e0       	ldi	r22, 0x00	; 0
		LCD_DATA(lcd_str[count]);
    1090:	71 e0       	ldi	r23, 0x01	; 1
    1092:	7f b9       	out	0x0f, r23	; 15
    1094:	77 9b       	sbis	0x0e, 7	; 14
    1096:	fe cf       	rjmp	.-4      	; 0x1094 <LCD_PutStr+0xc>
    1098:	df 01       	movw	r26, r30
    109a:	a4 0f       	add	r26, r20
    109c:	b5 1f       	adc	r27, r21
    109e:	8c 91       	ld	r24, X
    10a0:	8f b9       	out	0x0f, r24	; 15
    10a2:	77 9b       	sbis	0x0e, 7	; 14
    10a4:	fe cf       	rjmp	.-4      	; 0x10a2 <LCD_PutStr+0x1a>
    10a6:	90 91 62 00 	lds	r25, 0x0062
    10aa:	98 60       	ori	r25, 0x08	; 8
    10ac:	90 93 62 00 	sts	0x0062, r25
    10b0:	90 91 62 00 	lds	r25, 0x0062
    10b4:	97 7f       	andi	r25, 0xF7	; 247
    10b6:	90 93 62 00 	sts	0x0062, r25
    10ba:	8f e8       	ldi	r24, 0x8F	; 143
    10bc:	91 e0       	ldi	r25, 0x01	; 1
    10be:	01 97       	sbiw	r24, 0x01	; 1
    10c0:	f1 f7       	brne	.-4      	; 0x10be <LCD_PutStr+0x36>
    10c2:	00 c0       	rjmp	.+0      	; 0x10c4 <LCD_PutStr+0x3c>
    10c4:	00 00       	nop
/*
	Send an ASCII string to the LCD
*/
void LCD_PutStr(char *lcd_str) {
	uint8_t count;
	for (count=0; count<=(strlen(lcd_str)-1); count++){
    10c6:	6f 5f       	subi	r22, 0xFF	; 255
    10c8:	46 2f       	mov	r20, r22
    10ca:	50 e0       	ldi	r21, 0x00	; 0
    10cc:	df 01       	movw	r26, r30
    10ce:	0d 90       	ld	r0, X+
    10d0:	00 20       	and	r0, r0
    10d2:	e9 f7       	brne	.-6      	; 0x10ce <LCD_PutStr+0x46>
    10d4:	9d 01       	movw	r18, r26
    10d6:	2e 1b       	sub	r18, r30
    10d8:	3f 0b       	sbc	r19, r31
    10da:	22 50       	subi	r18, 0x02	; 2
    10dc:	31 09       	sbc	r19, r1
    10de:	24 17       	cp	r18, r20
    10e0:	35 07       	cpc	r19, r21
    10e2:	b8 f6       	brcc	.-82     	; 0x1092 <LCD_PutStr+0xa>
		LCD_DATA(lcd_str[count]);
	}
}
    10e4:	08 95       	ret

000010e6 <LCD_SPIInit>:

void LCD_SPIInit(void) {
	DDRF |= 0x08;  //port F bit 3 is enable for LCD
    10e6:	e1 e6       	ldi	r30, 0x61	; 97
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	88 60       	ori	r24, 0x08	; 8
    10ee:	80 83       	st	Z, r24
	PORTB |= 0x00; //port B initialization for SPI
    10f0:	88 b3       	in	r24, 0x18	; 24
    10f2:	88 bb       	out	0x18, r24	; 24
	DDRB |= 0x07;  //Turn on SS, MOSI, SCLK
    10f4:	87 b3       	in	r24, 0x17	; 23
    10f6:	87 60       	ori	r24, 0x07	; 7
    10f8:	87 bb       	out	0x17, r24	; 23
	//Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first
	SPCR = 0x50;
    10fa:	80 e5       	ldi	r24, 0x50	; 80
    10fc:	8d b9       	out	0x0d, r24	; 13
	SPSR = 0x01;
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	8e b9       	out	0x0e, r24	; 14
    1102:	08 95       	ret

00001104 <LCD_Init>:
	*/
	
	// Set the SPI settings
	//LCD_SPIInit();

	DDRF |= 0x08;  // port F bit 3 is the enable strobe for the LCD
    1104:	80 91 61 00 	lds	r24, 0x0061
    1108:	88 60       	ori	r24, 0x08	; 8
    110a:	80 93 61 00 	sts	0x0061, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    110e:	8f e5       	ldi	r24, 0x5F	; 95
    1110:	9a ee       	ldi	r25, 0xEA	; 234
    1112:	01 97       	sbiw	r24, 0x01	; 1
    1114:	f1 f7       	brne	.-4      	; 0x1112 <LCD_Init+0xe>
    1116:	00 c0       	rjmp	.+0      	; 0x1118 <LCD_Init+0x14>
    1118:	00 00       	nop
	_delay_ms(15);

	// request 8 bit interface mode
	LCD_CMD(0x38);
    111a:	1f b8       	out	0x0f, r1	; 15
    111c:	77 9b       	sbis	0x0e, 7	; 14
    111e:	fe cf       	rjmp	.-4      	; 0x111c <LCD_Init+0x18>
    1120:	88 e3       	ldi	r24, 0x38	; 56
    1122:	8f b9       	out	0x0f, r24	; 15
    1124:	77 9b       	sbis	0x0e, 7	; 14
    1126:	fe cf       	rjmp	.-4      	; 0x1124 <LCD_Init+0x20>
    1128:	80 91 62 00 	lds	r24, 0x0062
    112c:	88 60       	ori	r24, 0x08	; 8
    112e:	80 93 62 00 	sts	0x0062, r24
    1132:	80 91 62 00 	lds	r24, 0x0062
    1136:	87 7f       	andi	r24, 0xF7	; 247
    1138:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    113c:	8f e8       	ldi	r24, 0x8F	; 143
    113e:	91 e0       	ldi	r25, 0x01	; 1
    1140:	01 97       	sbiw	r24, 0x01	; 1
    1142:	f1 f7       	brne	.-4      	; 0x1140 <LCD_Init+0x3c>
    1144:	00 c0       	rjmp	.+0      	; 0x1146 <LCD_Init+0x42>
    1146:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1148:	8f e1       	ldi	r24, 0x1F	; 31
    114a:	9e e4       	ldi	r25, 0x4E	; 78
    114c:	01 97       	sbiw	r24, 0x01	; 1
    114e:	f1 f7       	brne	.-4      	; 0x114c <LCD_Init+0x48>
    1150:	00 c0       	rjmp	.+0      	; 0x1152 <LCD_Init+0x4e>
    1152:	00 00       	nop
	_delay_ms(5);

	// display off
	LCD_CMD(0x08);
    1154:	1f b8       	out	0x0f, r1	; 15
    1156:	77 9b       	sbis	0x0e, 7	; 14
    1158:	fe cf       	rjmp	.-4      	; 0x1156 <LCD_Init+0x52>
    115a:	88 e0       	ldi	r24, 0x08	; 8
    115c:	8f b9       	out	0x0f, r24	; 15
    115e:	77 9b       	sbis	0x0e, 7	; 14
    1160:	fe cf       	rjmp	.-4      	; 0x115e <LCD_Init+0x5a>
    1162:	80 91 62 00 	lds	r24, 0x0062
    1166:	88 60       	ori	r24, 0x08	; 8
    1168:	80 93 62 00 	sts	0x0062, r24
    116c:	80 91 62 00 	lds	r24, 0x0062
    1170:	87 7f       	andi	r24, 0xF7	; 247
    1172:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1176:	8f e8       	ldi	r24, 0x8F	; 143
    1178:	91 e0       	ldi	r25, 0x01	; 1
    117a:	01 97       	sbiw	r24, 0x01	; 1
    117c:	f1 f7       	brne	.-4      	; 0x117a <LCD_Init+0x76>
    117e:	00 c0       	rjmp	.+0      	; 0x1180 <LCD_Init+0x7c>
    1180:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1182:	8f e3       	ldi	r24, 0x3F	; 63
    1184:	9f e1       	ldi	r25, 0x1F	; 31
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	f1 f7       	brne	.-4      	; 0x1186 <LCD_Init+0x82>
    118a:	00 c0       	rjmp	.+0      	; 0x118c <LCD_Init+0x88>
    118c:	00 00       	nop
	_delay_ms(2);

	// choose entry mode so that the cursor is incremented
	LCD_CMD(0x06);
    118e:	1f b8       	out	0x0f, r1	; 15
    1190:	77 9b       	sbis	0x0e, 7	; 14
    1192:	fe cf       	rjmp	.-4      	; 0x1190 <LCD_Init+0x8c>
    1194:	86 e0       	ldi	r24, 0x06	; 6
    1196:	8f b9       	out	0x0f, r24	; 15
    1198:	77 9b       	sbis	0x0e, 7	; 14
    119a:	fe cf       	rjmp	.-4      	; 0x1198 <LCD_Init+0x94>
    119c:	80 91 62 00 	lds	r24, 0x0062
    11a0:	88 60       	ori	r24, 0x08	; 8
    11a2:	80 93 62 00 	sts	0x0062, r24
    11a6:	80 91 62 00 	lds	r24, 0x0062
    11aa:	87 7f       	andi	r24, 0xF7	; 247
    11ac:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11b0:	8f e8       	ldi	r24, 0x8F	; 143
    11b2:	91 e0       	ldi	r25, 0x01	; 1
    11b4:	01 97       	sbiw	r24, 0x01	; 1
    11b6:	f1 f7       	brne	.-4      	; 0x11b4 <LCD_Init+0xb0>
    11b8:	00 c0       	rjmp	.+0      	; 0x11ba <LCD_Init+0xb6>
    11ba:	00 00       	nop
		Each digit on the display uses a 5x8 matrix
		In order to customize the icon, you specify 5 bits
		for each of the 8 rows.
	*/
	// Create a custom battery logo in slot 0
	LCD_CMD(0x40); // <-- address of custom slot 0
    11bc:	1f b8       	out	0x0f, r1	; 15
    11be:	77 9b       	sbis	0x0e, 7	; 14
    11c0:	fe cf       	rjmp	.-4      	; 0x11be <LCD_Init+0xba>
    11c2:	80 e4       	ldi	r24, 0x40	; 64
    11c4:	8f b9       	out	0x0f, r24	; 15
    11c6:	77 9b       	sbis	0x0e, 7	; 14
    11c8:	fe cf       	rjmp	.-4      	; 0x11c6 <LCD_Init+0xc2>
    11ca:	80 91 62 00 	lds	r24, 0x0062
    11ce:	88 60       	ori	r24, 0x08	; 8
    11d0:	80 93 62 00 	sts	0x0062, r24
    11d4:	80 91 62 00 	lds	r24, 0x0062
    11d8:	87 7f       	andi	r24, 0xF7	; 247
    11da:	80 93 62 00 	sts	0x0062, r24
    11de:	8f e8       	ldi	r24, 0x8F	; 143
    11e0:	91 e0       	ldi	r25, 0x01	; 1
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	f1 f7       	brne	.-4      	; 0x11e2 <LCD_Init+0xde>
    11e6:	00 c0       	rjmp	.+0      	; 0x11e8 <LCD_Init+0xe4>
    11e8:	00 00       	nop
	LCD_DATA(0x0E); // <-- top 5 pixels of icon
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	8f b9       	out	0x0f, r24	; 15
    11ee:	77 9b       	sbis	0x0e, 7	; 14
    11f0:	fe cf       	rjmp	.-4      	; 0x11ee <LCD_Init+0xea>
    11f2:	8e e0       	ldi	r24, 0x0E	; 14
    11f4:	8f b9       	out	0x0f, r24	; 15
    11f6:	77 9b       	sbis	0x0e, 7	; 14
    11f8:	fe cf       	rjmp	.-4      	; 0x11f6 <LCD_Init+0xf2>
    11fa:	80 91 62 00 	lds	r24, 0x0062
    11fe:	88 60       	ori	r24, 0x08	; 8
    1200:	80 93 62 00 	sts	0x0062, r24
    1204:	80 91 62 00 	lds	r24, 0x0062
    1208:	87 7f       	andi	r24, 0xF7	; 247
    120a:	80 93 62 00 	sts	0x0062, r24
    120e:	8f e8       	ldi	r24, 0x8F	; 143
    1210:	91 e0       	ldi	r25, 0x01	; 1
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	f1 f7       	brne	.-4      	; 0x1212 <LCD_Init+0x10e>
    1216:	00 c0       	rjmp	.+0      	; 0x1218 <LCD_Init+0x114>
    1218:	00 00       	nop
	LCD_DATA(0x1B); // <-- next 5 pixels of icon
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	8f b9       	out	0x0f, r24	; 15
    121e:	77 9b       	sbis	0x0e, 7	; 14
    1220:	fe cf       	rjmp	.-4      	; 0x121e <LCD_Init+0x11a>
    1222:	8b e1       	ldi	r24, 0x1B	; 27
    1224:	8f b9       	out	0x0f, r24	; 15
    1226:	77 9b       	sbis	0x0e, 7	; 14
    1228:	fe cf       	rjmp	.-4      	; 0x1226 <LCD_Init+0x122>
    122a:	80 91 62 00 	lds	r24, 0x0062
    122e:	88 60       	ori	r24, 0x08	; 8
    1230:	80 93 62 00 	sts	0x0062, r24
    1234:	80 91 62 00 	lds	r24, 0x0062
    1238:	87 7f       	andi	r24, 0xF7	; 247
    123a:	80 93 62 00 	sts	0x0062, r24
    123e:	8f e8       	ldi	r24, 0x8F	; 143
    1240:	91 e0       	ldi	r25, 0x01	; 1
    1242:	01 97       	sbiw	r24, 0x01	; 1
    1244:	f1 f7       	brne	.-4      	; 0x1242 <LCD_Init+0x13e>
    1246:	00 c0       	rjmp	.+0      	; 0x1248 <LCD_Init+0x144>
    1248:	00 00       	nop
	LCD_DATA(0x11);
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	8f b9       	out	0x0f, r24	; 15
    124e:	77 9b       	sbis	0x0e, 7	; 14
    1250:	fe cf       	rjmp	.-4      	; 0x124e <LCD_Init+0x14a>
    1252:	81 e1       	ldi	r24, 0x11	; 17
    1254:	8f b9       	out	0x0f, r24	; 15
    1256:	77 9b       	sbis	0x0e, 7	; 14
    1258:	fe cf       	rjmp	.-4      	; 0x1256 <LCD_Init+0x152>
    125a:	80 91 62 00 	lds	r24, 0x0062
    125e:	88 60       	ori	r24, 0x08	; 8
    1260:	80 93 62 00 	sts	0x0062, r24
    1264:	80 91 62 00 	lds	r24, 0x0062
    1268:	87 7f       	andi	r24, 0xF7	; 247
    126a:	80 93 62 00 	sts	0x0062, r24
    126e:	8f e8       	ldi	r24, 0x8F	; 143
    1270:	91 e0       	ldi	r25, 0x01	; 1
    1272:	01 97       	sbiw	r24, 0x01	; 1
    1274:	f1 f7       	brne	.-4      	; 0x1272 <LCD_Init+0x16e>
    1276:	00 c0       	rjmp	.+0      	; 0x1278 <LCD_Init+0x174>
    1278:	00 00       	nop
	LCD_DATA(0x11);
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	8f b9       	out	0x0f, r24	; 15
    127e:	77 9b       	sbis	0x0e, 7	; 14
    1280:	fe cf       	rjmp	.-4      	; 0x127e <LCD_Init+0x17a>
    1282:	81 e1       	ldi	r24, 0x11	; 17
    1284:	8f b9       	out	0x0f, r24	; 15
    1286:	77 9b       	sbis	0x0e, 7	; 14
    1288:	fe cf       	rjmp	.-4      	; 0x1286 <LCD_Init+0x182>
    128a:	80 91 62 00 	lds	r24, 0x0062
    128e:	88 60       	ori	r24, 0x08	; 8
    1290:	80 93 62 00 	sts	0x0062, r24
    1294:	80 91 62 00 	lds	r24, 0x0062
    1298:	87 7f       	andi	r24, 0xF7	; 247
    129a:	80 93 62 00 	sts	0x0062, r24
    129e:	8f e8       	ldi	r24, 0x8F	; 143
    12a0:	91 e0       	ldi	r25, 0x01	; 1
    12a2:	01 97       	sbiw	r24, 0x01	; 1
    12a4:	f1 f7       	brne	.-4      	; 0x12a2 <LCD_Init+0x19e>
    12a6:	00 c0       	rjmp	.+0      	; 0x12a8 <LCD_Init+0x1a4>
    12a8:	00 00       	nop
	LCD_DATA(0x11);
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	8f b9       	out	0x0f, r24	; 15
    12ae:	77 9b       	sbis	0x0e, 7	; 14
    12b0:	fe cf       	rjmp	.-4      	; 0x12ae <LCD_Init+0x1aa>
    12b2:	81 e1       	ldi	r24, 0x11	; 17
    12b4:	8f b9       	out	0x0f, r24	; 15
    12b6:	77 9b       	sbis	0x0e, 7	; 14
    12b8:	fe cf       	rjmp	.-4      	; 0x12b6 <LCD_Init+0x1b2>
    12ba:	80 91 62 00 	lds	r24, 0x0062
    12be:	88 60       	ori	r24, 0x08	; 8
    12c0:	80 93 62 00 	sts	0x0062, r24
    12c4:	80 91 62 00 	lds	r24, 0x0062
    12c8:	87 7f       	andi	r24, 0xF7	; 247
    12ca:	80 93 62 00 	sts	0x0062, r24
    12ce:	8f e8       	ldi	r24, 0x8F	; 143
    12d0:	91 e0       	ldi	r25, 0x01	; 1
    12d2:	01 97       	sbiw	r24, 0x01	; 1
    12d4:	f1 f7       	brne	.-4      	; 0x12d2 <LCD_Init+0x1ce>
    12d6:	00 c0       	rjmp	.+0      	; 0x12d8 <LCD_Init+0x1d4>
    12d8:	00 00       	nop
	LCD_DATA(0x11);
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	8f b9       	out	0x0f, r24	; 15
    12de:	77 9b       	sbis	0x0e, 7	; 14
    12e0:	fe cf       	rjmp	.-4      	; 0x12de <LCD_Init+0x1da>
    12e2:	81 e1       	ldi	r24, 0x11	; 17
    12e4:	8f b9       	out	0x0f, r24	; 15
    12e6:	77 9b       	sbis	0x0e, 7	; 14
    12e8:	fe cf       	rjmp	.-4      	; 0x12e6 <LCD_Init+0x1e2>
    12ea:	80 91 62 00 	lds	r24, 0x0062
    12ee:	88 60       	ori	r24, 0x08	; 8
    12f0:	80 93 62 00 	sts	0x0062, r24
    12f4:	80 91 62 00 	lds	r24, 0x0062
    12f8:	87 7f       	andi	r24, 0xF7	; 247
    12fa:	80 93 62 00 	sts	0x0062, r24
    12fe:	8f e8       	ldi	r24, 0x8F	; 143
    1300:	91 e0       	ldi	r25, 0x01	; 1
    1302:	01 97       	sbiw	r24, 0x01	; 1
    1304:	f1 f7       	brne	.-4      	; 0x1302 <LCD_Init+0x1fe>
    1306:	00 c0       	rjmp	.+0      	; 0x1308 <LCD_Init+0x204>
    1308:	00 00       	nop
	LCD_DATA(0x11);
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	8f b9       	out	0x0f, r24	; 15
    130e:	77 9b       	sbis	0x0e, 7	; 14
    1310:	fe cf       	rjmp	.-4      	; 0x130e <LCD_Init+0x20a>
    1312:	81 e1       	ldi	r24, 0x11	; 17
    1314:	8f b9       	out	0x0f, r24	; 15
    1316:	77 9b       	sbis	0x0e, 7	; 14
    1318:	fe cf       	rjmp	.-4      	; 0x1316 <LCD_Init+0x212>
    131a:	80 91 62 00 	lds	r24, 0x0062
    131e:	88 60       	ori	r24, 0x08	; 8
    1320:	80 93 62 00 	sts	0x0062, r24
    1324:	80 91 62 00 	lds	r24, 0x0062
    1328:	87 7f       	andi	r24, 0xF7	; 247
    132a:	80 93 62 00 	sts	0x0062, r24
    132e:	8f e8       	ldi	r24, 0x8F	; 143
    1330:	91 e0       	ldi	r25, 0x01	; 1
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	f1 f7       	brne	.-4      	; 0x1332 <LCD_Init+0x22e>
    1336:	00 c0       	rjmp	.+0      	; 0x1338 <LCD_Init+0x234>
    1338:	00 00       	nop
	LCD_DATA(0x1F); // <-- bottom 5 pixels of icon
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	8f b9       	out	0x0f, r24	; 15
    133e:	77 9b       	sbis	0x0e, 7	; 14
    1340:	fe cf       	rjmp	.-4      	; 0x133e <LCD_Init+0x23a>
    1342:	8f e1       	ldi	r24, 0x1F	; 31
    1344:	8f b9       	out	0x0f, r24	; 15
    1346:	77 9b       	sbis	0x0e, 7	; 14
    1348:	fe cf       	rjmp	.-4      	; 0x1346 <LCD_Init+0x242>
    134a:	80 91 62 00 	lds	r24, 0x0062
    134e:	88 60       	ori	r24, 0x08	; 8
    1350:	80 93 62 00 	sts	0x0062, r24
    1354:	80 91 62 00 	lds	r24, 0x0062
    1358:	87 7f       	andi	r24, 0xF7	; 247
    135a:	80 93 62 00 	sts	0x0062, r24
    135e:	8f e8       	ldi	r24, 0x8F	; 143
    1360:	91 e0       	ldi	r25, 0x01	; 1
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	f1 f7       	brne	.-4      	; 0x1362 <LCD_Init+0x25e>
    1366:	00 c0       	rjmp	.+0      	; 0x1368 <LCD_Init+0x264>
    1368:	00 00       	nop
	
	/*
		Clear the screen and enable the LCD
	*/	
	// clear display
	LCD_CMD(0x01);
    136a:	1f b8       	out	0x0f, r1	; 15
    136c:	77 9b       	sbis	0x0e, 7	; 14
    136e:	fe cf       	rjmp	.-4      	; 0x136c <LCD_Init+0x268>
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	8f b9       	out	0x0f, r24	; 15
    1374:	77 9b       	sbis	0x0e, 7	; 14
    1376:	fe cf       	rjmp	.-4      	; 0x1374 <LCD_Init+0x270>
    1378:	80 91 62 00 	lds	r24, 0x0062
    137c:	88 60       	ori	r24, 0x08	; 8
    137e:	80 93 62 00 	sts	0x0062, r24
    1382:	80 91 62 00 	lds	r24, 0x0062
    1386:	87 7f       	andi	r24, 0xF7	; 247
    1388:	80 93 62 00 	sts	0x0062, r24
    138c:	8f e8       	ldi	r24, 0x8F	; 143
    138e:	91 e0       	ldi	r25, 0x01	; 1
    1390:	01 97       	sbiw	r24, 0x01	; 1
    1392:	f1 f7       	brne	.-4      	; 0x1390 <LCD_Init+0x28c>
    1394:	00 c0       	rjmp	.+0      	; 0x1396 <LCD_Init+0x292>
    1396:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1398:	8f e1       	ldi	r24, 0x1F	; 31
    139a:	9e e4       	ldi	r25, 0x4E	; 78
    139c:	01 97       	sbiw	r24, 0x01	; 1
    139e:	f1 f7       	brne	.-4      	; 0x139c <LCD_Init+0x298>
    13a0:	00 c0       	rjmp	.+0      	; 0x13a2 <LCD_Init+0x29e>
    13a2:	00 00       	nop
	_delay_ms(5);
	
	// display on
	LCD_CMD(0x0C);
    13a4:	1f b8       	out	0x0f, r1	; 15
    13a6:	77 9b       	sbis	0x0e, 7	; 14
    13a8:	fe cf       	rjmp	.-4      	; 0x13a6 <LCD_Init+0x2a2>
    13aa:	8c e0       	ldi	r24, 0x0C	; 12
    13ac:	8f b9       	out	0x0f, r24	; 15
    13ae:	77 9b       	sbis	0x0e, 7	; 14
    13b0:	fe cf       	rjmp	.-4      	; 0x13ae <LCD_Init+0x2aa>
    13b2:	80 91 62 00 	lds	r24, 0x0062
    13b6:	88 60       	ori	r24, 0x08	; 8
    13b8:	80 93 62 00 	sts	0x0062, r24
    13bc:	80 91 62 00 	lds	r24, 0x0062
    13c0:	87 7f       	andi	r24, 0xF7	; 247
    13c2:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13c6:	8f e8       	ldi	r24, 0x8F	; 143
    13c8:	91 e0       	ldi	r25, 0x01	; 1
    13ca:	01 97       	sbiw	r24, 0x01	; 1
    13cc:	f1 f7       	brne	.-4      	; 0x13ca <LCD_Init+0x2c6>
    13ce:	00 c0       	rjmp	.+0      	; 0x13d0 <LCD_Init+0x2cc>
    13d0:	00 00       	nop
    13d2:	08 95       	ret

000013d4 <play_rest>:

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    13d4:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    13d6:	91 e0       	ldi	r25, 0x01	; 1
    13d8:	90 93 88 01 	sts	0x0188, r25
  beat=0;
    13dc:	10 92 9e 01 	sts	0x019E, r1
    13e0:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	90 93 9c 01 	sts	0x019C, r25
    13ea:	80 93 9b 01 	sts	0x019B, r24
    13ee:	08 95       	ret

000013f0 <play_note>:
}

void play_note(char note, uint8_t flat, uint8_t octave, uint8_t duration) {
    13f0:	58 2f       	mov	r21, r24
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
    13f2:	92 98       	cbi	0x12, 2	; 18
  rest_mute = UNMUTE;
    13f4:	10 92 88 01 	sts	0x0188, r1
  beat = 0;             //reset the beat counter
    13f8:	10 92 9e 01 	sts	0x019E, r1
    13fc:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;  //set the max beat
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	30 93 9c 01 	sts	0x019C, r19
    1406:	20 93 9b 01 	sts	0x019B, r18
  switch (octave) {
    140a:	84 2f       	mov	r24, r20
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	89 30       	cpi	r24, 0x09	; 9
    1410:	91 05       	cpc	r25, r1
    1412:	18 f0       	brcs	.+6      	; 0x141a <play_note+0x2a>
      case 'G': if(flat){OCR1A=Gb8;}
        else {OCR1A=G8;}
	break;
      } 
      break;
    default: OCR1A=0x0000;
    1414:	1b bc       	out	0x2b, r1	; 43
    1416:	1a bc       	out	0x2a, r1	; 42
    1418:	08 95       	ret
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
  rest_mute = UNMUTE;
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    141a:	8a 5b       	subi	r24, 0xBA	; 186
    141c:	9f 4f       	sbci	r25, 0xFF	; 255
    141e:	fc 01       	movw	r30, r24
      case 'G': if(flat){OCR1A=Gb7;}
        else {OCR1A=G7;}
	break;
      } 
      break;
    case 8: switch (note) {
    1420:	85 2f       	mov	r24, r21
    1422:	55 0f       	add	r21, r21
    1424:	99 0b       	sbc	r25, r25
    1426:	aa 0b       	sbc	r26, r26
    1428:	bb 0b       	sbc	r27, r27
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
  rest_mute = UNMUTE;
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    142a:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb6;}
        else {OCR1A=G6;}
	break;
      } 
      break;
    case 7: switch (note) {
    142e:	fc 01       	movw	r30, r24
    1430:	e1 54       	subi	r30, 0x41	; 65
    1432:	f1 09       	sbc	r31, r1
    1434:	e7 30       	cpi	r30, 0x07	; 7
    1436:	f1 05       	cpc	r31, r1
    1438:	78 f7       	brcc	.-34     	; 0x1418 <play_note+0x28>
    143a:	e1 5b       	subi	r30, 0xB1	; 177
    143c:	ff 4f       	sbci	r31, 0xFF	; 255
    143e:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb7;}
        else {OCR1A=G7;}
	break;
      } 
      break;
    case 8: switch (note) {
    1442:	fc 01       	movw	r30, r24
    1444:	e1 54       	subi	r30, 0x41	; 65
    1446:	f1 09       	sbc	r31, r1
    1448:	e7 30       	cpi	r30, 0x07	; 7
    144a:	f1 05       	cpc	r31, r1
    144c:	28 f7       	brcc	.-54     	; 0x1418 <play_note+0x28>
    144e:	ea 5a       	subi	r30, 0xAA	; 170
    1450:	ff 4f       	sbci	r31, 0xFF	; 255
    1452:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__tablejump2__>
  PORTD &= unmute;      //unmute (just in case)
  rest_mute = UNMUTE;
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    case 0: switch (note) {
    1456:	fc 01       	movw	r30, r24
    1458:	e1 54       	subi	r30, 0x41	; 65
    145a:	f1 09       	sbc	r31, r1
    145c:	e7 30       	cpi	r30, 0x07	; 7
    145e:	f1 05       	cpc	r31, r1
    1460:	d8 f6       	brcc	.-74     	; 0x1418 <play_note+0x28>
    1462:	e3 5a       	subi	r30, 0xA3	; 163
    1464:	ff 4f       	sbci	r31, 0xFF	; 255
    1466:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb0;}
        else {OCR1A=G0;}
	break;
      } 
      break;
    case 1: switch (note) {
    146a:	fc 01       	movw	r30, r24
    146c:	e1 54       	subi	r30, 0x41	; 65
    146e:	f1 09       	sbc	r31, r1
    1470:	e7 30       	cpi	r30, 0x07	; 7
    1472:	f1 05       	cpc	r31, r1
    1474:	88 f6       	brcc	.-94     	; 0x1418 <play_note+0x28>
    1476:	ec 59       	subi	r30, 0x9C	; 156
    1478:	ff 4f       	sbci	r31, 0xFF	; 255
    147a:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb1;}
        else {OCR1A=G1;}
	break;
      } 
      break;
    case 2: switch (note) {
    147e:	fc 01       	movw	r30, r24
    1480:	e1 54       	subi	r30, 0x41	; 65
    1482:	f1 09       	sbc	r31, r1
    1484:	e7 30       	cpi	r30, 0x07	; 7
    1486:	f1 05       	cpc	r31, r1
    1488:	38 f6       	brcc	.-114    	; 0x1418 <play_note+0x28>
    148a:	e5 59       	subi	r30, 0x95	; 149
    148c:	ff 4f       	sbci	r31, 0xFF	; 255
    148e:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb2;}
        else {OCR1A=G2;}
	break;
      } 
      break;
    case 3: switch (note) {
    1492:	fc 01       	movw	r30, r24
    1494:	e1 54       	subi	r30, 0x41	; 65
    1496:	f1 09       	sbc	r31, r1
    1498:	e7 30       	cpi	r30, 0x07	; 7
    149a:	f1 05       	cpc	r31, r1
    149c:	08 f0       	brcs	.+2      	; 0x14a0 <play_note+0xb0>
    149e:	bc cf       	rjmp	.-136    	; 0x1418 <play_note+0x28>
    14a0:	ee 58       	subi	r30, 0x8E	; 142
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb3;}
        else {OCR1A=G3;}
	break;
      } 
      break;
    case 4: switch (note) {
    14a8:	fc 01       	movw	r30, r24
    14aa:	e1 54       	subi	r30, 0x41	; 65
    14ac:	f1 09       	sbc	r31, r1
    14ae:	e7 30       	cpi	r30, 0x07	; 7
    14b0:	f1 05       	cpc	r31, r1
    14b2:	08 f0       	brcs	.+2      	; 0x14b6 <play_note+0xc6>
    14b4:	b1 cf       	rjmp	.-158    	; 0x1418 <play_note+0x28>
    14b6:	e7 58       	subi	r30, 0x87	; 135
    14b8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ba:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb4;}
        else {OCR1A=G4;}
	break;
      } 
      break;
    case 5: switch (note) {
    14be:	fc 01       	movw	r30, r24
    14c0:	e1 54       	subi	r30, 0x41	; 65
    14c2:	f1 09       	sbc	r31, r1
    14c4:	e7 30       	cpi	r30, 0x07	; 7
    14c6:	f1 05       	cpc	r31, r1
    14c8:	08 f0       	brcs	.+2      	; 0x14cc <play_note+0xdc>
    14ca:	a6 cf       	rjmp	.-180    	; 0x1418 <play_note+0x28>
    14cc:	e0 58       	subi	r30, 0x80	; 128
    14ce:	ff 4f       	sbci	r31, 0xFF	; 255
    14d0:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb5;}
        else {OCR1A=G5;}
	break;
      } 
      break;
    case 6: switch (note) {
    14d4:	fc 01       	movw	r30, r24
    14d6:	e1 54       	subi	r30, 0x41	; 65
    14d8:	f1 09       	sbc	r31, r1
    14da:	e7 30       	cpi	r30, 0x07	; 7
    14dc:	f1 05       	cpc	r31, r1
    14de:	08 f0       	brcs	.+2      	; 0x14e2 <play_note+0xf2>
    14e0:	9b cf       	rjmp	.-202    	; 0x1418 <play_note+0x28>
    14e2:	e9 57       	subi	r30, 0x79	; 121
    14e4:	ff 4f       	sbci	r31, 0xFF	; 255
    14e6:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__tablejump2__>
        else {OCR1A=D6;}
	break;
      case 'E': if(flat){OCR1A=Eb6;}
        else {OCR1A=E6;}
	break;
      case 'F': OCR1A=F6;
    14ea:	88 e5       	ldi	r24, 0x58	; 88
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	9b bd       	out	0x2b, r25	; 43
    14f0:	8a bd       	out	0x2a, r24	; 42
	break;
    14f2:	08 95       	ret
      case 'C': OCR1A=C6;
	break;
      case 'D': if(flat){OCR1A=Db6;}
        else {OCR1A=D6;}
	break;
      case 'E': if(flat){OCR1A=Eb6;}
    14f4:	66 23       	and	r22, r22
    14f6:	09 f4       	brne	.+2      	; 0x14fa <play_note+0x10a>
    14f8:	0f c2       	rjmp	.+1054   	; 0x1918 <play_note+0x528>
    14fa:	83 e6       	ldi	r24, 0x63	; 99
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	9b bd       	out	0x2b, r25	; 43
    1500:	8a bd       	out	0x2a, r24	; 42
    1502:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb6;}
        else {OCR1A=B6;}
	break;
      case 'C': OCR1A=C6;
	break;
      case 'D': if(flat){OCR1A=Db6;}
    1504:	66 23       	and	r22, r22
    1506:	09 f4       	brne	.+2      	; 0x150a <play_note+0x11a>
    1508:	11 c2       	rjmp	.+1058   	; 0x192c <play_note+0x53c>
    150a:	8f e6       	ldi	r24, 0x6F	; 111
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	9b bd       	out	0x2b, r25	; 43
    1510:	8a bd       	out	0x2a, r24	; 42
    1512:	08 95       	ret
        else {OCR1A=A6;}
	break;
      case 'B': if(flat){OCR1A=Bb6;}
        else {OCR1A=B6;}
	break;
      case 'C': OCR1A=C6;
    1514:	86 e7       	ldi	r24, 0x76	; 118
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	9b bd       	out	0x2b, r25	; 43
    151a:	8a bd       	out	0x2a, r24	; 42
	break;
    151c:	08 95       	ret
        else {OCR1A=G5;}
	break;
      } 
      break;
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
    151e:	66 23       	and	r22, r22
    1520:	09 f4       	brne	.+2      	; 0x1524 <play_note+0x134>
    1522:	ff c1       	rjmp	.+1022   	; 0x1922 <play_note+0x532>
    1524:	8a e4       	ldi	r24, 0x4A	; 74
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	9b bd       	out	0x2b, r25	; 43
    152a:	8a bd       	out	0x2a, r24	; 42
    152c:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb6;}
        else {OCR1A=E6;}
	break;
      case 'F': OCR1A=F6;
	break;
      case 'G': if(flat){OCR1A=Gb6;}
    152e:	66 23       	and	r22, r22
    1530:	09 f4       	brne	.+2      	; 0x1534 <play_note+0x144>
    1532:	01 c2       	rjmp	.+1026   	; 0x1936 <play_note+0x546>
    1534:	83 e5       	ldi	r24, 0x53	; 83
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	9b bd       	out	0x2b, r25	; 43
    153a:	8a bd       	out	0x2a, r24	; 42
    153c:	08 95       	ret
      break;
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
        else {OCR1A=A6;}
	break;
      case 'B': if(flat){OCR1A=Bb6;}
    153e:	66 23       	and	r22, r22
    1540:	09 f4       	brne	.+2      	; 0x1544 <play_note+0x154>
    1542:	b8 c1       	rjmp	.+880    	; 0x18b4 <play_note+0x4c4>
    1544:	82 e4       	ldi	r24, 0x42	; 66
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	9b bd       	out	0x2b, r25	; 43
    154a:	8a bd       	out	0x2a, r24	; 42
    154c:	08 95       	ret
        else {OCR1A=D5;}
	break;
      case 'E': if(flat){OCR1A=Eb5;}
        else {OCR1A=E5;}
	break;
      case 'F': OCR1A=F5;
    154e:	81 eb       	ldi	r24, 0xB1	; 177
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	9b bd       	out	0x2b, r25	; 43
    1554:	8a bd       	out	0x2a, r24	; 42
	break;
    1556:	08 95       	ret
      break;
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
    1558:	66 23       	and	r22, r22
    155a:	09 f4       	brne	.+2      	; 0x155e <play_note+0x16e>
    155c:	d3 c1       	rjmp	.+934    	; 0x1904 <play_note+0x514>
    155e:	85 e8       	ldi	r24, 0x85	; 133
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	9b bd       	out	0x2b, r25	; 43
    1564:	8a bd       	out	0x2a, r24	; 42
    1566:	08 95       	ret
        else {OCR1A=G4;}
	break;
      } 
      break;
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
    1568:	66 23       	and	r22, r22
    156a:	09 f4       	brne	.+2      	; 0x156e <play_note+0x17e>
    156c:	c1 c1       	rjmp	.+898    	; 0x18f0 <play_note+0x500>
    156e:	85 e9       	ldi	r24, 0x95	; 149
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	9b bd       	out	0x2b, r25	; 43
    1574:	8a bd       	out	0x2a, r24	; 42
    1576:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb5;}
        else {OCR1A=E5;}
	break;
      case 'F': OCR1A=F5;
	break;
      case 'G': if(flat){OCR1A=Gb5;}
    1578:	66 23       	and	r22, r22
    157a:	09 f4       	brne	.+2      	; 0x157e <play_note+0x18e>
    157c:	be c1       	rjmp	.+892    	; 0x18fa <play_note+0x50a>
    157e:	87 ea       	ldi	r24, 0xA7	; 167
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	9b bd       	out	0x2b, r25	; 43
    1584:	8a bd       	out	0x2a, r24	; 42
    1586:	08 95       	ret
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
    1588:	84 e6       	ldi	r24, 0x64	; 100
    158a:	91 e0       	ldi	r25, 0x01	; 1
    158c:	9b bd       	out	0x2b, r25	; 43
    158e:	8a bd       	out	0x2a, r24	; 42
	break;
    1590:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
	break;
      case 'C': OCR1A=C5;
	break;
      case 'D': if(flat){OCR1A=Db5;}
    1592:	66 23       	and	r22, r22
    1594:	09 f4       	brne	.+2      	; 0x1598 <play_note+0x1a8>
    1596:	bb c1       	rjmp	.+886    	; 0x190e <play_note+0x51e>
    1598:	80 ee       	ldi	r24, 0xE0	; 224
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	9b bd       	out	0x2b, r25	; 43
    159e:	8a bd       	out	0x2a, r24	; 42
    15a0:	08 95       	ret
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
	break;
      case 'C': OCR1A=C5;
    15a2:	8d ee       	ldi	r24, 0xED	; 237
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	9b bd       	out	0x2b, r25	; 43
    15a8:	8a bd       	out	0x2a, r24	; 42
	break;
    15aa:	08 95       	ret
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
	break;
      case 'E': if(flat){OCR1A=Eb5;}
    15ac:	66 23       	and	r22, r22
    15ae:	09 f4       	brne	.+2      	; 0x15b2 <play_note+0x1c2>
    15b0:	8b c1       	rjmp	.+790    	; 0x18c8 <play_note+0x4d8>
    15b2:	87 ec       	ldi	r24, 0xC7	; 199
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	9b bd       	out	0x2b, r25	; 43
    15b8:	8a bd       	out	0x2a, r24	; 42
    15ba:	08 95       	ret
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
    15bc:	66 23       	and	r22, r22
    15be:	09 f4       	brne	.+2      	; 0x15c2 <play_note+0x1d2>
    15c0:	74 c1       	rjmp	.+744    	; 0x18aa <play_note+0x4ba>
    15c2:	80 e9       	ldi	r24, 0x90	; 144
    15c4:	91 e0       	ldi	r25, 0x01	; 1
    15c6:	9b bd       	out	0x2b, r25	; 43
    15c8:	8a bd       	out	0x2a, r24	; 42
    15ca:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb3;}
        else {OCR1A=B3;}
	break;
      case 'C': OCR1A=C3;
	break;
      case 'D': if(flat){OCR1A=Db3;}
    15cc:	66 23       	and	r22, r22
    15ce:	09 f4       	brne	.+2      	; 0x15d2 <play_note+0x1e2>
    15d0:	cb c1       	rjmp	.+918    	; 0x1968 <play_note+0x578>
    15d2:	84 e8       	ldi	r24, 0x84	; 132
    15d4:	93 e0       	ldi	r25, 0x03	; 3
    15d6:	9b bd       	out	0x2b, r25	; 43
    15d8:	8a bd       	out	0x2a, r24	; 42
    15da:	08 95       	ret
        else {OCR1A=G3;}
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
    15dc:	66 23       	and	r22, r22
    15de:	09 f4       	brne	.+2      	; 0x15e2 <play_note+0x1f2>
    15e0:	af c1       	rjmp	.+862    	; 0x1940 <play_note+0x550>
    15e2:	8b e2       	ldi	r24, 0x2B	; 43
    15e4:	91 e0       	ldi	r25, 0x01	; 1
    15e6:	9b bd       	out	0x2b, r25	; 43
    15e8:	8a bd       	out	0x2a, r24	; 42
    15ea:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb3;}
        else {OCR1A=E3;}
	break;
      case 'F': OCR1A=F3;
	break;
      case 'G': if(flat){OCR1A=Gb3;}
    15ec:	66 23       	and	r22, r22
    15ee:	09 f4       	brne	.+2      	; 0x15f2 <play_note+0x202>
    15f0:	b1 c1       	rjmp	.+866    	; 0x1954 <play_note+0x564>
    15f2:	82 ea       	ldi	r24, 0xA2	; 162
    15f4:	92 e0       	ldi	r25, 0x02	; 2
    15f6:	9b bd       	out	0x2b, r25	; 43
    15f8:	8a bd       	out	0x2a, r24	; 42
    15fa:	08 95       	ret
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
    15fc:	8c ed       	ldi	r24, 0xDC	; 220
    15fe:	91 e0       	ldi	r25, 0x01	; 1
    1600:	9b bd       	out	0x2b, r25	; 43
    1602:	8a bd       	out	0x2a, r24	; 42
	break;
    1604:	08 95       	ret
      break;
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
        else {OCR1A=A3;}
	break;
      case 'B': if(flat){OCR1A=Bb3;}
    1606:	66 23       	and	r22, r22
    1608:	09 f4       	brne	.+2      	; 0x160c <play_note+0x21c>
    160a:	59 c1       	rjmp	.+690    	; 0x18be <play_note+0x4ce>
    160c:	87 e1       	ldi	r24, 0x17	; 23
    160e:	92 e0       	ldi	r25, 0x02	; 2
    1610:	9b bd       	out	0x2b, r25	; 43
    1612:	8a bd       	out	0x2a, r24	; 42
    1614:	08 95       	ret
        else {OCR1A=G2;}
	break;
      } 
      break;
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
    1616:	66 23       	and	r22, r22
    1618:	09 f4       	brne	.+2      	; 0x161c <play_note+0x22c>
    161a:	b0 c1       	rjmp	.+864    	; 0x197c <play_note+0x58c>
    161c:	88 e5       	ldi	r24, 0x58	; 88
    161e:	92 e0       	ldi	r25, 0x02	; 2
    1620:	9b bd       	out	0x2b, r25	; 43
    1622:	8a bd       	out	0x2a, r24	; 42
    1624:	08 95       	ret
        else {OCR1A=D3;}
	break;
      case 'E': if(flat){OCR1A=Eb3;}
        else {OCR1A=E3;}
	break;
      case 'F': OCR1A=F3;
    1626:	8a ec       	ldi	r24, 0xCA	; 202
    1628:	92 e0       	ldi	r25, 0x02	; 2
    162a:	9b bd       	out	0x2b, r25	; 43
    162c:	8a bd       	out	0x2a, r24	; 42
	break;
    162e:	08 95       	ret
      case 'C': OCR1A=C2;
	break;
      case 'D': if(flat){OCR1A=Db2;}
        else {OCR1A=D2;}
	break;
      case 'E': if(flat){OCR1A=Eb2;}
    1630:	66 23       	and	r22, r22
    1632:	09 f4       	brne	.+2      	; 0x1636 <play_note+0x246>
    1634:	35 c1       	rjmp	.+618    	; 0x18a0 <play_note+0x4b0>
    1636:	86 e4       	ldi	r24, 0x46	; 70
    1638:	96 e0       	ldi	r25, 0x06	; 6
    163a:	9b bd       	out	0x2b, r25	; 43
    163c:	8a bd       	out	0x2a, r24	; 42
    163e:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb2;}
        else {OCR1A=B2;}
	break;
      case 'C': OCR1A=C2;
	break;
      case 'D': if(flat){OCR1A=Db2;}
    1640:	66 23       	and	r22, r22
    1642:	09 f4       	brne	.+2      	; 0x1646 <play_note+0x256>
    1644:	82 c1       	rjmp	.+772    	; 0x194a <play_note+0x55a>
    1646:	8a e0       	ldi	r24, 0x0A	; 10
    1648:	97 e0       	ldi	r25, 0x07	; 7
    164a:	9b bd       	out	0x2b, r25	; 43
    164c:	8a bd       	out	0x2a, r24	; 42
    164e:	08 95       	ret
        else {OCR1A=D2;}
	break;
      case 'E': if(flat){OCR1A=Eb2;}
        else {OCR1A=E2;}
	break;
      case 'F': OCR1A=F2;
    1650:	86 e9       	ldi	r24, 0x96	; 150
    1652:	95 e0       	ldi	r25, 0x05	; 5
    1654:	9b bd       	out	0x2b, r25	; 43
    1656:	8a bd       	out	0x2a, r24	; 42
	break;
    1658:	08 95       	ret
        else {OCR1A=A3;}
	break;
      case 'B': if(flat){OCR1A=Bb3;}
        else {OCR1A=B3;}
	break;
      case 'C': OCR1A=C3;
    165a:	8a eb       	ldi	r24, 0xBA	; 186
    165c:	93 e0       	ldi	r25, 0x03	; 3
    165e:	9b bd       	out	0x2b, r25	; 43
    1660:	8a bd       	out	0x2a, r24	; 42
	break;
    1662:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
    1664:	66 23       	and	r22, r22
    1666:	09 f4       	brne	.+2      	; 0x166a <play_note+0x27a>
    1668:	7a c1       	rjmp	.+756    	; 0x195e <play_note+0x56e>
    166a:	81 ec       	ldi	r24, 0xC1	; 193
    166c:	91 e0       	ldi	r25, 0x01	; 1
    166e:	9b bd       	out	0x2b, r25	; 43
    1670:	8a bd       	out	0x2a, r24	; 42
    1672:	08 95       	ret
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
    1674:	66 23       	and	r22, r22
    1676:	09 f4       	brne	.+2      	; 0x167a <play_note+0x28a>
    1678:	7c c1       	rjmp	.+760    	; 0x1972 <play_note+0x582>
    167a:	8b e0       	ldi	r24, 0x0B	; 11
    167c:	91 e0       	ldi	r25, 0x01	; 1
    167e:	9b bd       	out	0x2b, r25	; 43
    1680:	8a bd       	out	0x2a, r24	; 42
    1682:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
    1684:	66 23       	and	r22, r22
    1686:	09 f4       	brne	.+2      	; 0x168a <play_note+0x29a>
    1688:	7e c1       	rjmp	.+764    	; 0x1986 <play_note+0x596>
    168a:	80 e5       	ldi	r24, 0x50	; 80
    168c:	91 e0       	ldi	r25, 0x01	; 1
    168e:	9b bd       	out	0x2b, r25	; 43
    1690:	8a bd       	out	0x2a, r24	; 42
    1692:	08 95       	ret
      case 'C': OCR1A=C3;
	break;
      case 'D': if(flat){OCR1A=Db3;}
        else {OCR1A=D3;}
	break;
      case 'E': if(flat){OCR1A=Eb3;}
    1694:	66 23       	and	r22, r22
    1696:	09 f4       	brne	.+2      	; 0x169a <play_note+0x2aa>
    1698:	ad c1       	rjmp	.+858    	; 0x19f4 <play_note+0x604>
    169a:	82 e2       	ldi	r24, 0x22	; 34
    169c:	93 e0       	ldi	r25, 0x03	; 3
    169e:	9b bd       	out	0x2b, r25	; 43
    16a0:	8a bd       	out	0x2a, r24	; 42
    16a2:	08 95       	ret
        else {OCR1A=A2;}
	break;
      case 'B': if(flat){OCR1A=Bb2;}
        else {OCR1A=B2;}
	break;
      case 'C': OCR1A=C2;
    16a4:	86 e7       	ldi	r24, 0x76	; 118
    16a6:	97 e0       	ldi	r25, 0x07	; 7
    16a8:	9b bd       	out	0x2b, r25	; 43
    16aa:	8a bd       	out	0x2a, r24	; 42
	break;
    16ac:	08 95       	ret
  rest_mute = UNMUTE;
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
    16ae:	66 23       	and	r22, r22
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <play_note+0x2c4>
    16b2:	0f c1       	rjmp	.+542    	; 0x18d2 <play_note+0x4e2>
    16b4:	8e ec       	ldi	r24, 0xCE	; 206
    16b6:	92 e1       	ldi	r25, 0x12	; 18
    16b8:	9b bd       	out	0x2b, r25	; 43
    16ba:	8a bd       	out	0x2a, r24	; 42
    16bc:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb0;}
        else {OCR1A=E0;}
	break;
      case 'F': OCR1A=F0;
	break;
      case 'G': if(flat){OCR1A=Gb0;}
    16be:	66 23       	and	r22, r22
    16c0:	09 f4       	brne	.+2      	; 0x16c4 <play_note+0x2d4>
    16c2:	7a c1       	rjmp	.+756    	; 0x19b8 <play_note+0x5c8>
    16c4:	8d e1       	ldi	r24, 0x1D	; 29
    16c6:	95 e1       	ldi	r25, 0x15	; 21
    16c8:	9b bd       	out	0x2b, r25	; 43
    16ca:	8a bd       	out	0x2a, r24	; 42
    16cc:	08 95       	ret
      break;
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
        else {OCR1A=A1;}
	break;
      case 'B': if(flat){OCR1A=Bb1;}
    16ce:	66 23       	and	r22, r22
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <play_note+0x2e4>
    16d2:	dc c0       	rjmp	.+440    	; 0x188c <play_note+0x49c>
    16d4:	80 e6       	ldi	r24, 0x60	; 96
    16d6:	98 e0       	ldi	r25, 0x08	; 8
    16d8:	9b bd       	out	0x2b, r25	; 43
    16da:	8a bd       	out	0x2a, r24	; 42
    16dc:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb8;}
        else {OCR1A=E8;}
	break;
      case 'F': OCR1A=F8;
	break;
      case 'G': if(flat){OCR1A=Gb8;}
    16de:	66 23       	and	r22, r22
    16e0:	09 f4       	brne	.+2      	; 0x16e4 <play_note+0x2f4>
    16e2:	92 c1       	rjmp	.+804    	; 0x1a08 <play_note+0x618>
    16e4:	80 e1       	ldi	r24, 0x10	; 16
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	9b bd       	out	0x2b, r25	; 43
    16ea:	8a bd       	out	0x2a, r24	; 42
    16ec:	08 95       	ret
        else {OCR1A=D1;}
	break;
      case 'E': if(flat){OCR1A=Eb1;}
        else {OCR1A=E1;}
	break;
      case 'F': OCR1A=F1;
    16ee:	8e e2       	ldi	r24, 0x2E	; 46
    16f0:	9b e0       	ldi	r25, 0x0B	; 11
    16f2:	9b bd       	out	0x2b, r25	; 43
    16f4:	8a bd       	out	0x2a, r24	; 42
	break;
    16f6:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb8;}
        else {OCR1A=B8;}
	break;
      case 'C': OCR1A=C8;
	break;
      case 'D': if(flat){OCR1A=Db8;}
    16f8:	66 23       	and	r22, r22
    16fa:	09 f4       	brne	.+2      	; 0x16fe <play_note+0x30e>
    16fc:	49 c1       	rjmp	.+658    	; 0x1990 <play_note+0x5a0>
    16fe:	8b e1       	ldi	r24, 0x1B	; 27
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	9b bd       	out	0x2b, r25	; 43
    1704:	8a bd       	out	0x2a, r24	; 42
    1706:	08 95       	ret
        else {OCR1A=A8;}
	break;
      case 'B': if(flat){OCR1A=Bb8;}
        else {OCR1A=B8;}
	break;
      case 'C': OCR1A=C8;
    1708:	8c e1       	ldi	r24, 0x1C	; 28
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	9b bd       	out	0x2b, r25	; 43
    170e:	8a bd       	out	0x2a, r24	; 42
	break;
    1710:	08 95       	ret
      break;
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
        else {OCR1A=A8;}
	break;
      case 'B': if(flat){OCR1A=Bb8;}
    1712:	66 23       	and	r22, r22
    1714:	09 f4       	brne	.+2      	; 0x1718 <play_note+0x328>
    1716:	41 c1       	rjmp	.+642    	; 0x199a <play_note+0x5aa>
    1718:	87 e0       	ldi	r24, 0x07	; 7
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	9b bd       	out	0x2b, r25	; 43
    171e:	8a bd       	out	0x2a, r24	; 42
    1720:	08 95       	ret
        else {OCR1A=G7;}
	break;
      } 
      break;
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
    1722:	66 23       	and	r22, r22
    1724:	09 f4       	brne	.+2      	; 0x1728 <play_note+0x338>
    1726:	da c0       	rjmp	.+436    	; 0x18dc <play_note+0x4ec>
    1728:	8b e0       	ldi	r24, 0x0B	; 11
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	9b bd       	out	0x2b, r25	; 43
    172e:	8a bd       	out	0x2a, r24	; 42
    1730:	08 95       	ret
        else {OCR1A=D8;}
	break;
      case 'E': if(flat){OCR1A=Eb8;}
        else {OCR1A=E8;}
	break;
      case 'F': OCR1A=F8;
    1732:	82 e1       	ldi	r24, 0x12	; 18
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	9b bd       	out	0x2b, r25	; 43
    1738:	8a bd       	out	0x2a, r24	; 42
	break;
    173a:	08 95       	ret
      case 'C': OCR1A=C0;
	break;
      case 'D': if(flat){OCR1A=Db0;}
        else {OCR1A=D0;}
	break;
      case 'E': if(flat){OCR1A=Eb0;}
    173c:	66 23       	and	r22, r22
    173e:	09 f4       	brne	.+2      	; 0x1742 <play_note+0x352>
    1740:	9b c0       	rjmp	.+310    	; 0x1878 <play_note+0x488>
    1742:	89 e1       	ldi	r24, 0x19	; 25
    1744:	99 e1       	ldi	r25, 0x19	; 25
    1746:	9b bd       	out	0x2b, r25	; 43
    1748:	8a bd       	out	0x2a, r24	; 42
    174a:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb0;}
        else {OCR1A=B0;}
	break;
      case 'C': OCR1A=C0;
	break;
      case 'D': if(flat){OCR1A=Db0;}
    174c:	66 23       	and	r22, r22
    174e:	09 f4       	brne	.+2      	; 0x1752 <play_note+0x362>
    1750:	29 c1       	rjmp	.+594    	; 0x19a4 <play_note+0x5b4>
    1752:	80 e3       	ldi	r24, 0x30	; 48
    1754:	9c e1       	ldi	r25, 0x1C	; 28
    1756:	9b bd       	out	0x2b, r25	; 43
    1758:	8a bd       	out	0x2a, r24	; 42
    175a:	08 95       	ret
        else {OCR1A=A0;}
	break;
      case 'B': if(flat){OCR1A=Bb0;}
        else {OCR1A=B0;}
	break;
      case 'C': OCR1A=C0;
    175c:	8c ed       	ldi	r24, 0xDC	; 220
    175e:	9d e1       	ldi	r25, 0x1D	; 29
    1760:	9b bd       	out	0x2b, r25	; 43
    1762:	8a bd       	out	0x2a, r24	; 42
	break;
    1764:	08 95       	ret
        else {OCR1A=A7;}
	break;
      case 'B': if(flat){OCR1A=Bb7;}
        else {OCR1A=B7;}
	break;
      case 'C': OCR1A=C7;
    1766:	8a e3       	ldi	r24, 0x3A	; 58
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	9b bd       	out	0x2b, r25	; 43
    176c:	8a bd       	out	0x2a, r24	; 42
	break;
    176e:	08 95       	ret
      break;
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
        else {OCR1A=A7;}
	break;
      case 'B': if(flat){OCR1A=Bb7;}
    1770:	66 23       	and	r22, r22
    1772:	09 f4       	brne	.+2      	; 0x1776 <play_note+0x386>
    1774:	35 c1       	rjmp	.+618    	; 0x19e0 <play_note+0x5f0>
    1776:	80 e2       	ldi	r24, 0x20	; 32
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	9b bd       	out	0x2b, r25	; 43
    177c:	8a bd       	out	0x2a, r24	; 42
    177e:	08 95       	ret
        else {OCR1A=G6;}
	break;
      } 
      break;
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
    1780:	66 23       	and	r22, r22
    1782:	09 f4       	brne	.+2      	; 0x1786 <play_note+0x396>
    1784:	32 c1       	rjmp	.+612    	; 0x19ea <play_note+0x5fa>
    1786:	84 e2       	ldi	r24, 0x24	; 36
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	9b bd       	out	0x2b, r25	; 43
    178c:	8a bd       	out	0x2a, r24	; 42
    178e:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb7;}
        else {OCR1A=E7;}
	break;
      case 'F': OCR1A=F7;
	break;
      case 'G': if(flat){OCR1A=Gb7;}
    1790:	66 23       	and	r22, r22
    1792:	09 f4       	brne	.+2      	; 0x1796 <play_note+0x3a6>
    1794:	76 c0       	rjmp	.+236    	; 0x1882 <play_note+0x492>
    1796:	89 e2       	ldi	r24, 0x29	; 41
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	9b bd       	out	0x2b, r25	; 43
    179c:	8a bd       	out	0x2a, r24	; 42
    179e:	08 95       	ret
      case 'C': OCR1A=C7;
	break;
      case 'D': if(flat){OCR1A=Db7;}
        else {OCR1A=D7;}
	break;
      case 'E': if(flat){OCR1A=Eb7;}
    17a0:	66 23       	and	r22, r22
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <play_note+0x3b6>
    17a4:	78 c0       	rjmp	.+240    	; 0x1896 <play_note+0x4a6>
    17a6:	81 e3       	ldi	r24, 0x31	; 49
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	9b bd       	out	0x2b, r25	; 43
    17ac:	8a bd       	out	0x2a, r24	; 42
    17ae:	08 95       	ret
        else {OCR1A=E7;}
	break;
      case 'F': OCR1A=F7;
    17b0:	8b e2       	ldi	r24, 0x2B	; 43
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	9b bd       	out	0x2b, r25	; 43
    17b6:	8a bd       	out	0x2a, r24	; 42
	break;
    17b8:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb7;}
        else {OCR1A=B7;}
	break;
      case 'C': OCR1A=C7;
	break;
      case 'D': if(flat){OCR1A=Db7;}
    17ba:	66 23       	and	r22, r22
    17bc:	09 f4       	brne	.+2      	; 0x17c0 <play_note+0x3d0>
    17be:	93 c0       	rjmp	.+294    	; 0x18e6 <play_note+0x4f6>
    17c0:	87 e3       	ldi	r24, 0x37	; 55
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	9b bd       	out	0x2b, r25	; 43
    17c6:	8a bd       	out	0x2a, r24	; 42
    17c8:	08 95       	ret
      case 'C': OCR1A=C8;
	break;
      case 'D': if(flat){OCR1A=Db8;}
        else {OCR1A=D8;}
	break;
      case 'E': if(flat){OCR1A=Eb8;}
    17ca:	66 23       	and	r22, r22
    17cc:	09 f4       	brne	.+2      	; 0x17d0 <play_note+0x3e0>
    17ce:	4f c0       	rjmp	.+158    	; 0x186e <play_note+0x47e>
    17d0:	88 e1       	ldi	r24, 0x18	; 24
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	9b bd       	out	0x2b, r25	; 43
    17d6:	8a bd       	out	0x2a, r24	; 42
    17d8:	08 95       	ret
        else {OCR1A=G1;}
	break;
      } 
      break;
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
    17da:	66 23       	and	r22, r22
    17dc:	09 f4       	brne	.+2      	; 0x17e0 <play_note+0x3f0>
    17de:	f6 c0       	rjmp	.+492    	; 0x19cc <play_note+0x5dc>
    17e0:	82 eb       	ldi	r24, 0xB2	; 178
    17e2:	94 e0       	ldi	r25, 0x04	; 4
    17e4:	9b bd       	out	0x2b, r25	; 43
    17e6:	8a bd       	out	0x2a, r24	; 42
    17e8:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb1;}
        else {OCR1A=E1;}
	break;
      case 'F': OCR1A=F1;
	break;
      case 'G': if(flat){OCR1A=Gb1;}
    17ea:	66 23       	and	r22, r22
    17ec:	09 f4       	brne	.+2      	; 0x17f0 <play_note+0x400>
    17ee:	16 c1       	rjmp	.+556    	; 0x1a1c <play_note+0x62c>
    17f0:	8d e8       	ldi	r24, 0x8D	; 141
    17f2:	9a e0       	ldi	r25, 0x0A	; 10
    17f4:	9b bd       	out	0x2b, r25	; 43
    17f6:	8a bd       	out	0x2a, r24	; 42
    17f8:	08 95       	ret
      case 'B': if(flat){OCR1A=Bb1;}
        else {OCR1A=B1;}
	break;
      case 'C': OCR1A=C1;
	break;
      case 'D': if(flat){OCR1A=Db1;}
    17fa:	66 23       	and	r22, r22
    17fc:	09 f4       	brne	.+2      	; 0x1800 <play_note+0x410>
    17fe:	d7 c0       	rjmp	.+430    	; 0x19ae <play_note+0x5be>
    1800:	86 e1       	ldi	r24, 0x16	; 22
    1802:	9e e0       	ldi	r25, 0x0E	; 14
    1804:	9b bd       	out	0x2b, r25	; 43
    1806:	8a bd       	out	0x2a, r24	; 42
    1808:	08 95       	ret
  switch (octave) {
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
        else {OCR1A=A0;}
	break;
      case 'B': if(flat){OCR1A=Bb0;}
    180a:	66 23       	and	r22, r22
    180c:	09 f4       	brne	.+2      	; 0x1810 <play_note+0x420>
    180e:	f7 c0       	rjmp	.+494    	; 0x19fe <play_note+0x60e>
    1810:	80 ec       	ldi	r24, 0xC0	; 192
    1812:	90 e1       	ldi	r25, 0x10	; 16
    1814:	9b bd       	out	0x2b, r25	; 43
    1816:	8a bd       	out	0x2a, r24	; 42
    1818:	08 95       	ret
      break;
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
        else {OCR1A=A2;}
	break;
      case 'B': if(flat){OCR1A=Bb2;}
    181a:	66 23       	and	r22, r22
    181c:	09 f4       	brne	.+2      	; 0x1820 <play_note+0x430>
    181e:	d1 c0       	rjmp	.+418    	; 0x19c2 <play_note+0x5d2>
    1820:	8f e2       	ldi	r24, 0x2F	; 47
    1822:	94 e0       	ldi	r25, 0x04	; 4
    1824:	9b bd       	out	0x2b, r25	; 43
    1826:	8a bd       	out	0x2a, r24	; 42
    1828:	08 95       	ret
        else {OCR1A=G0;}
	break;
      } 
      break;
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
    182a:	66 23       	and	r22, r22
    182c:	09 f4       	brne	.+2      	; 0x1830 <play_note+0x440>
    182e:	f1 c0       	rjmp	.+482    	; 0x1a12 <play_note+0x622>
    1830:	87 e6       	ldi	r24, 0x67	; 103
    1832:	99 e0       	ldi	r25, 0x09	; 9
    1834:	9b bd       	out	0x2b, r25	; 43
    1836:	8a bd       	out	0x2a, r24	; 42
    1838:	08 95       	ret
      case 'C': OCR1A=C1;
	break;
      case 'D': if(flat){OCR1A=Db1;}
        else {OCR1A=D1;}
	break;
      case 'E': if(flat){OCR1A=Eb1;}
    183a:	66 23       	and	r22, r22
    183c:	09 f4       	brne	.+2      	; 0x1840 <play_note+0x450>
    183e:	cb c0       	rjmp	.+406    	; 0x19d6 <play_note+0x5e6>
    1840:	8d e8       	ldi	r24, 0x8D	; 141
    1842:	9c e0       	ldi	r25, 0x0C	; 12
    1844:	9b bd       	out	0x2b, r25	; 43
    1846:	8a bd       	out	0x2a, r24	; 42
    1848:	08 95       	ret
        else {OCR1A=D0;}
	break;
      case 'E': if(flat){OCR1A=Eb0;}
        else {OCR1A=E0;}
	break;
      case 'F': OCR1A=F0;
    184a:	8d e5       	ldi	r24, 0x5D	; 93
    184c:	96 e1       	ldi	r25, 0x16	; 22
    184e:	9b bd       	out	0x2b, r25	; 43
    1850:	8a bd       	out	0x2a, r24	; 42
	break;
    1852:	08 95       	ret
      case 'E': if(flat){OCR1A=Eb2;}
        else {OCR1A=E2;}
	break;
      case 'F': OCR1A=F2;
	break;
      case 'G': if(flat){OCR1A=Gb2;}
    1854:	66 23       	and	r22, r22
    1856:	09 f4       	brne	.+2      	; 0x185a <play_note+0x46a>
    1858:	e6 c0       	rjmp	.+460    	; 0x1a26 <play_note+0x636>
    185a:	86 e4       	ldi	r24, 0x46	; 70
    185c:	95 e0       	ldi	r25, 0x05	; 5
    185e:	9b bd       	out	0x2b, r25	; 43
    1860:	8a bd       	out	0x2a, r24	; 42
    1862:	08 95       	ret
        else {OCR1A=A1;}
	break;
      case 'B': if(flat){OCR1A=Bb1;}
        else {OCR1A=B1;}
	break;
      case 'C': OCR1A=C1;
    1864:	8d ee       	ldi	r24, 0xED	; 237
    1866:	9e e0       	ldi	r25, 0x0E	; 14
    1868:	9b bd       	out	0x2b, r25	; 43
    186a:	8a bd       	out	0x2a, r24	; 42
	break;
    186c:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db8;}
        else {OCR1A=D8;}
	break;
      case 'E': if(flat){OCR1A=Eb8;}
        else {OCR1A=E8;}
    186e:	85 e1       	ldi	r24, 0x15	; 21
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	9b bd       	out	0x2b, r25	; 43
    1874:	8a bd       	out	0x2a, r24	; 42
    1876:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db0;}
        else {OCR1A=D0;}
	break;
      case 'E': if(flat){OCR1A=Eb0;}
        else {OCR1A=E0;}
    1878:	82 eb       	ldi	r24, 0xB2	; 178
    187a:	97 e1       	ldi	r25, 0x17	; 23
    187c:	9b bd       	out	0x2b, r25	; 43
    187e:	8a bd       	out	0x2a, r24	; 42
    1880:	08 95       	ret
        else {OCR1A=E7;}
	break;
      case 'F': OCR1A=F7;
	break;
      case 'G': if(flat){OCR1A=Gb7;}
        else {OCR1A=G7;}
    1882:	86 e2       	ldi	r24, 0x26	; 38
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	9b bd       	out	0x2b, r25	; 43
    1888:	8a bd       	out	0x2a, r24	; 42
    188a:	08 95       	ret
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
        else {OCR1A=A1;}
	break;
      case 'B': if(flat){OCR1A=Bb1;}
        else {OCR1A=B1;}
    188c:	87 ee       	ldi	r24, 0xE7	; 231
    188e:	97 e0       	ldi	r25, 0x07	; 7
    1890:	9b bd       	out	0x2b, r25	; 43
    1892:	8a bd       	out	0x2a, r24	; 42
    1894:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db7;}
        else {OCR1A=D7;}
	break;
      case 'E': if(flat){OCR1A=Eb7;}
        else {OCR1A=E7;}
    1896:	8e e2       	ldi	r24, 0x2E	; 46
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	9b bd       	out	0x2b, r25	; 43
    189c:	8a bd       	out	0x2a, r24	; 42
    189e:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db2;}
        else {OCR1A=D2;}
	break;
      case 'E': if(flat){OCR1A=Eb2;}
        else {OCR1A=E2;}
    18a0:	8b ee       	ldi	r24, 0xEB	; 235
    18a2:	95 e0       	ldi	r25, 0x05	; 5
    18a4:	9b bd       	out	0x2b, r25	; 43
    18a6:	8a bd       	out	0x2a, r24	; 42
    18a8:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
    18aa:	8a e7       	ldi	r24, 0x7A	; 122
    18ac:	91 e0       	ldi	r25, 0x01	; 1
    18ae:	9b bd       	out	0x2b, r25	; 43
    18b0:	8a bd       	out	0x2a, r24	; 42
    18b2:	08 95       	ret
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
        else {OCR1A=A6;}
	break;
      case 'B': if(flat){OCR1A=Bb6;}
        else {OCR1A=B6;}
    18b4:	8e e3       	ldi	r24, 0x3E	; 62
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	9b bd       	out	0x2b, r25	; 43
    18ba:	8a bd       	out	0x2a, r24	; 42
    18bc:	08 95       	ret
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
        else {OCR1A=A3;}
	break;
      case 'B': if(flat){OCR1A=Bb3;}
        else {OCR1A=B3;}
    18be:	89 ef       	ldi	r24, 0xF9	; 249
    18c0:	91 e0       	ldi	r25, 0x01	; 1
    18c2:	9b bd       	out	0x2b, r25	; 43
    18c4:	8a bd       	out	0x2a, r24	; 42
    18c6:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
	break;
      case 'E': if(flat){OCR1A=Eb5;}
        else {OCR1A=E5;}
    18c8:	8c eb       	ldi	r24, 0xBC	; 188
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	9b bd       	out	0x2b, r25	; 43
    18ce:	8a bd       	out	0x2a, r24	; 42
    18d0:	08 95       	ret
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
        else {OCR1A=A0;}
    18d2:	80 ec       	ldi	r24, 0xC0	; 192
    18d4:	91 e1       	ldi	r25, 0x11	; 17
    18d6:	9b bd       	out	0x2b, r25	; 43
    18d8:	8a bd       	out	0x2a, r24	; 42
    18da:	08 95       	ret
	break;
      } 
      break;
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
        else {OCR1A=A8;}
    18dc:	89 e0       	ldi	r24, 0x09	; 9
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	9b bd       	out	0x2b, r25	; 43
    18e2:	8a bd       	out	0x2a, r24	; 42
    18e4:	08 95       	ret
        else {OCR1A=B7;}
	break;
      case 'C': OCR1A=C7;
	break;
      case 'D': if(flat){OCR1A=Db7;}
        else {OCR1A=D7;}
    18e6:	84 e3       	ldi	r24, 0x34	; 52
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	9b bd       	out	0x2b, r25	; 43
    18ec:	8a bd       	out	0x2a, r24	; 42
    18ee:	08 95       	ret
	break;
      } 
      break;
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
        else {OCR1A=A5;}
    18f0:	8d e8       	ldi	r24, 0x8D	; 141
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	9b bd       	out	0x2b, r25	; 43
    18f6:	8a bd       	out	0x2a, r24	; 42
    18f8:	08 95       	ret
        else {OCR1A=E5;}
	break;
      case 'F': OCR1A=F5;
	break;
      case 'G': if(flat){OCR1A=Gb5;}
        else {OCR1A=G5;}
    18fa:	8e e9       	ldi	r24, 0x9E	; 158
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	9b bd       	out	0x2b, r25	; 43
    1900:	8a bd       	out	0x2a, r24	; 42
    1902:	08 95       	ret
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
    1904:	8d e7       	ldi	r24, 0x7D	; 125
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	9b bd       	out	0x2b, r25	; 43
    190a:	8a bd       	out	0x2a, r24	; 42
    190c:	08 95       	ret
	break;
      case 'C': OCR1A=C5;
	break;
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
    190e:	83 ed       	ldi	r24, 0xD3	; 211
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	9b bd       	out	0x2b, r25	; 43
    1914:	8a bd       	out	0x2a, r24	; 42
    1916:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db6;}
        else {OCR1A=D6;}
	break;
      case 'E': if(flat){OCR1A=Eb6;}
        else {OCR1A=E6;}
    1918:	8d e5       	ldi	r24, 0x5D	; 93
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	9b bd       	out	0x2b, r25	; 43
    191e:	8a bd       	out	0x2a, r24	; 42
    1920:	08 95       	ret
	break;
      } 
      break;
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
        else {OCR1A=A6;}
    1922:	86 e4       	ldi	r24, 0x46	; 70
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	9b bd       	out	0x2b, r25	; 43
    1928:	8a bd       	out	0x2a, r24	; 42
    192a:	08 95       	ret
        else {OCR1A=B6;}
	break;
      case 'C': OCR1A=C6;
	break;
      case 'D': if(flat){OCR1A=Db6;}
        else {OCR1A=D6;}
    192c:	89 e6       	ldi	r24, 0x69	; 105
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	9b bd       	out	0x2b, r25	; 43
    1932:	8a bd       	out	0x2a, r24	; 42
    1934:	08 95       	ret
        else {OCR1A=E6;}
	break;
      case 'F': OCR1A=F6;
	break;
      case 'G': if(flat){OCR1A=Gb6;}
        else {OCR1A=G6;}
    1936:	8e e4       	ldi	r24, 0x4E	; 78
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	9b bd       	out	0x2b, r25	; 43
    193c:	8a bd       	out	0x2a, r24	; 42
    193e:	08 95       	ret
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
    1940:	8b e1       	ldi	r24, 0x1B	; 27
    1942:	91 e0       	ldi	r25, 0x01	; 1
    1944:	9b bd       	out	0x2b, r25	; 43
    1946:	8a bd       	out	0x2a, r24	; 42
    1948:	08 95       	ret
        else {OCR1A=B2;}
	break;
      case 'C': OCR1A=C2;
	break;
      case 'D': if(flat){OCR1A=Db2;}
        else {OCR1A=D2;}
    194a:	85 ea       	ldi	r24, 0xA5	; 165
    194c:	96 e0       	ldi	r25, 0x06	; 6
    194e:	9b bd       	out	0x2b, r25	; 43
    1950:	8a bd       	out	0x2a, r24	; 42
    1952:	08 95       	ret
        else {OCR1A=E3;}
	break;
      case 'F': OCR1A=F3;
	break;
      case 'G': if(flat){OCR1A=Gb3;}
        else {OCR1A=G3;}
    1954:	8c e7       	ldi	r24, 0x7C	; 124
    1956:	92 e0       	ldi	r25, 0x02	; 2
    1958:	9b bd       	out	0x2b, r25	; 43
    195a:	8a bd       	out	0x2a, r24	; 42
    195c:	08 95       	ret
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
    195e:	88 ea       	ldi	r24, 0xA8	; 168
    1960:	91 e0       	ldi	r25, 0x01	; 1
    1962:	9b bd       	out	0x2b, r25	; 43
    1964:	8a bd       	out	0x2a, r24	; 42
    1966:	08 95       	ret
        else {OCR1A=B3;}
	break;
      case 'C': OCR1A=C3;
	break;
      case 'D': if(flat){OCR1A=Db3;}
        else {OCR1A=D3;}
    1968:	82 e5       	ldi	r24, 0x52	; 82
    196a:	93 e0       	ldi	r25, 0x03	; 3
    196c:	9b bd       	out	0x2b, r25	; 43
    196e:	8a bd       	out	0x2a, r24	; 42
    1970:	08 95       	ret
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
    1972:	8c ef       	ldi	r24, 0xFC	; 252
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	9b bd       	out	0x2b, r25	; 43
    1978:	8a bd       	out	0x2a, r24	; 42
    197a:	08 95       	ret
	break;
      } 
      break;
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
        else {OCR1A=A3;}
    197c:	87 e3       	ldi	r24, 0x37	; 55
    197e:	92 e0       	ldi	r25, 0x02	; 2
    1980:	9b bd       	out	0x2b, r25	; 43
    1982:	8a bd       	out	0x2a, r24	; 42
    1984:	08 95       	ret
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
        else {OCR1A=G4;}
    1986:	8d e3       	ldi	r24, 0x3D	; 61
    1988:	91 e0       	ldi	r25, 0x01	; 1
    198a:	9b bd       	out	0x2b, r25	; 43
    198c:	8a bd       	out	0x2a, r24	; 42
    198e:	08 95       	ret
        else {OCR1A=B8;}
	break;
      case 'C': OCR1A=C8;
	break;
      case 'D': if(flat){OCR1A=Db8;}
        else {OCR1A=D8;}
    1990:	89 e1       	ldi	r24, 0x19	; 25
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	9b bd       	out	0x2b, r25	; 43
    1996:	8a bd       	out	0x2a, r24	; 42
    1998:	08 95       	ret
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
        else {OCR1A=A8;}
	break;
      case 'B': if(flat){OCR1A=Bb8;}
        else {OCR1A=B8;}
    199a:	85 e0       	ldi	r24, 0x05	; 5
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	9b bd       	out	0x2b, r25	; 43
    19a0:	8a bd       	out	0x2a, r24	; 42
    19a2:	08 95       	ret
        else {OCR1A=B0;}
	break;
      case 'C': OCR1A=C0;
	break;
      case 'D': if(flat){OCR1A=Db0;}
        else {OCR1A=D0;}
    19a4:	8a e9       	ldi	r24, 0x9A	; 154
    19a6:	9a e1       	ldi	r25, 0x1A	; 26
    19a8:	9b bd       	out	0x2b, r25	; 43
    19aa:	8a bd       	out	0x2a, r24	; 42
    19ac:	08 95       	ret
        else {OCR1A=B1;}
	break;
      case 'C': OCR1A=C1;
	break;
      case 'D': if(flat){OCR1A=Db1;}
        else {OCR1A=D1;}
    19ae:	8c e4       	ldi	r24, 0x4C	; 76
    19b0:	9d e0       	ldi	r25, 0x0D	; 13
    19b2:	9b bd       	out	0x2b, r25	; 43
    19b4:	8a bd       	out	0x2a, r24	; 42
    19b6:	08 95       	ret
        else {OCR1A=E0;}
	break;
      case 'F': OCR1A=F0;
	break;
      case 'G': if(flat){OCR1A=Gb0;}
        else {OCR1A=G0;}
    19b8:	8d ee       	ldi	r24, 0xED	; 237
    19ba:	93 e1       	ldi	r25, 0x13	; 19
    19bc:	9b bd       	out	0x2b, r25	; 43
    19be:	8a bd       	out	0x2a, r24	; 42
    19c0:	08 95       	ret
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
        else {OCR1A=A2;}
	break;
      case 'B': if(flat){OCR1A=Bb2;}
        else {OCR1A=B2;}
    19c2:	83 ef       	ldi	r24, 0xF3	; 243
    19c4:	93 e0       	ldi	r25, 0x03	; 3
    19c6:	9b bd       	out	0x2b, r25	; 43
    19c8:	8a bd       	out	0x2a, r24	; 42
    19ca:	08 95       	ret
	break;
      } 
      break;
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
        else {OCR1A=A2;}
    19cc:	8f e6       	ldi	r24, 0x6F	; 111
    19ce:	94 e0       	ldi	r25, 0x04	; 4
    19d0:	9b bd       	out	0x2b, r25	; 43
    19d2:	8a bd       	out	0x2a, r24	; 42
    19d4:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db1;}
        else {OCR1A=D1;}
	break;
      case 'E': if(flat){OCR1A=Eb1;}
        else {OCR1A=E1;}
    19d6:	88 ed       	ldi	r24, 0xD8	; 216
    19d8:	9b e0       	ldi	r25, 0x0B	; 11
    19da:	9b bd       	out	0x2b, r25	; 43
    19dc:	8a bd       	out	0x2a, r24	; 42
    19de:	08 95       	ret
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
        else {OCR1A=A7;}
	break;
      case 'B': if(flat){OCR1A=Bb7;}
        else {OCR1A=B7;}
    19e0:	8e e1       	ldi	r24, 0x1E	; 30
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	9b bd       	out	0x2b, r25	; 43
    19e6:	8a bd       	out	0x2a, r24	; 42
    19e8:	08 95       	ret
	break;
      } 
      break;
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
        else {OCR1A=A7;}
    19ea:	82 e2       	ldi	r24, 0x22	; 34
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	9b bd       	out	0x2b, r25	; 43
    19f0:	8a bd       	out	0x2a, r24	; 42
    19f2:	08 95       	ret
	break;
      case 'D': if(flat){OCR1A=Db3;}
        else {OCR1A=D3;}
	break;
      case 'E': if(flat){OCR1A=Eb3;}
        else {OCR1A=E3;}
    19f4:	85 ef       	ldi	r24, 0xF5	; 245
    19f6:	92 e0       	ldi	r25, 0x02	; 2
    19f8:	9b bd       	out	0x2b, r25	; 43
    19fa:	8a bd       	out	0x2a, r24	; 42
    19fc:	08 95       	ret
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
        else {OCR1A=A0;}
	break;
      case 'B': if(flat){OCR1A=Bb0;}
        else {OCR1A=B0;}
    19fe:	80 ed       	ldi	r24, 0xD0	; 208
    1a00:	9f e0       	ldi	r25, 0x0F	; 15
    1a02:	9b bd       	out	0x2b, r25	; 43
    1a04:	8a bd       	out	0x2a, r24	; 42
    1a06:	08 95       	ret
        else {OCR1A=E8;}
	break;
      case 'F': OCR1A=F8;
	break;
      case 'G': if(flat){OCR1A=Gb8;}
        else {OCR1A=G8;}
    1a08:	8d e0       	ldi	r24, 0x0D	; 13
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	9b bd       	out	0x2b, r25	; 43
    1a0e:	8a bd       	out	0x2a, r24	; 42
    1a10:	08 95       	ret
	break;
      } 
      break;
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
        else {OCR1A=A1;}
    1a12:	8f ed       	ldi	r24, 0xDF	; 223
    1a14:	98 e0       	ldi	r25, 0x08	; 8
    1a16:	9b bd       	out	0x2b, r25	; 43
    1a18:	8a bd       	out	0x2a, r24	; 42
    1a1a:	08 95       	ret
        else {OCR1A=E1;}
	break;
      case 'F': OCR1A=F1;
	break;
      case 'G': if(flat){OCR1A=Gb1;}
        else {OCR1A=G1;}
    1a1c:	86 ef       	ldi	r24, 0xF6	; 246
    1a1e:	99 e0       	ldi	r25, 0x09	; 9
    1a20:	9b bd       	out	0x2b, r25	; 43
    1a22:	8a bd       	out	0x2a, r24	; 42
    1a24:	08 95       	ret
        else {OCR1A=E2;}
	break;
      case 'F': OCR1A=F2;
	break;
      case 'G': if(flat){OCR1A=Gb2;}
        else {OCR1A=G2;}
    1a26:	8a ef       	ldi	r24, 0xFA	; 250
    1a28:	94 e0       	ldi	r25, 0x04	; 4
    1a2a:	9b bd       	out	0x2b, r25	; 43
    1a2c:	8a bd       	out	0x2a, r24	; 42
    1a2e:	08 95       	ret

00001a30 <song0>:
volatile uint16_t beat;
volatile uint16_t max_beat;
volatile uint8_t  notes;

void song0(uint16_t note) { //beaver fight song (Max and Kellen)
  switch (note) {
    1a30:	86 34       	cpi	r24, 0x46	; 70
    1a32:	91 05       	cpc	r25, r1
    1a34:	20 f0       	brcs	.+8      	; 0x1a3e <song0+0xe>
       break;
    case 68: play_note('F', 0, 4, 24);
       break;
    case 69: play_rest(8);
       break;
    default: notes=-1;
    1a36:	8f ef       	ldi	r24, 0xFF	; 255
    1a38:	80 93 99 01 	sts	0x0199, r24
    1a3c:	08 95       	ret
volatile uint16_t beat;
volatile uint16_t max_beat;
volatile uint8_t  notes;

void song0(uint16_t note) { //beaver fight song (Max and Kellen)
  switch (note) {
    1a3e:	fc 01       	movw	r30, r24
    1a40:	e2 57       	subi	r30, 0x72	; 114
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__tablejump2__>
       break;
    case 55: play_note('A', 0, 4, 2);
       break;
    case 56: play_note('B', 1, 4, 6);
       break;
    case 57: play_note('A', 0, 4, 2);
    1a48:	22 e0       	ldi	r18, 0x02	; 2
    1a4a:	44 e0       	ldi	r20, 0x04	; 4
    1a4c:	60 e0       	ldi	r22, 0x00	; 0
    1a4e:	81 e4       	ldi	r24, 0x41	; 65
    1a50:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 45: play_note('A', 0, 4, 6);
       break;
    case 46: play_note('A', 1, 4, 2);
       break;
    case 47: play_note('A', 0, 4, 6);
    1a54:	26 e0       	ldi	r18, 0x06	; 6
    1a56:	44 e0       	ldi	r20, 0x04	; 4
    1a58:	60 e0       	ldi	r22, 0x00	; 0
    1a5a:	81 e4       	ldi	r24, 0x41	; 65
    1a5c:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 48: play_note('A', 1, 4, 2);
    1a60:	22 e0       	ldi	r18, 0x02	; 2
    1a62:	44 e0       	ldi	r20, 0x04	; 4
    1a64:	61 e0       	ldi	r22, 0x01	; 1
    1a66:	81 e4       	ldi	r24, 0x41	; 65
    1a68:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 51: play_note('G', 1, 4, 8);
       break;
    case 52: play_note('G', 0, 4, 8);
       break;
    case 53: play_note('D', 0, 4, 8);
    1a6c:	28 e0       	ldi	r18, 0x08	; 8
    1a6e:	44 e0       	ldi	r20, 0x04	; 4
    1a70:	60 e0       	ldi	r22, 0x00	; 0
    1a72:	84 e4       	ldi	r24, 0x44	; 68
    1a74:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 48: play_note('A', 1, 4, 2);
       break;
    case 49: play_note('A', 0, 4, 16);
       break;
    case 50: play_note('F', 0, 4, 8);
    1a78:	28 e0       	ldi	r18, 0x08	; 8
    1a7a:	44 e0       	ldi	r20, 0x04	; 4
    1a7c:	60 e0       	ldi	r22, 0x00	; 0
    1a7e:	86 e4       	ldi	r24, 0x46	; 70
    1a80:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 54: play_note('B', 1, 4, 6);
       break;
    case 55: play_note('A', 0, 4, 2);
       break;
    case 56: play_note('B', 1, 4, 6);
    1a84:	26 e0       	ldi	r18, 0x06	; 6
    1a86:	44 e0       	ldi	r20, 0x04	; 4
    1a88:	61 e0       	ldi	r22, 0x01	; 1
    1a8a:	82 e4       	ldi	r24, 0x42	; 66
    1a8c:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 42: play_note('E', 0, 4, 8);
       break;
    case 43: play_note('D', 0, 4, 8);
       break;
    case 44: play_note('C', 0, 4, 8);
    1a90:	28 e0       	ldi	r18, 0x08	; 8
    1a92:	44 e0       	ldi	r20, 0x04	; 4
    1a94:	60 e0       	ldi	r22, 0x00	; 0
    1a96:	83 e4       	ldi	r24, 0x43	; 67
    1a98:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 64: play_note('C', 0, 5, 4);
       break;
    case 65: play_note('D', 0, 5, 4);
       break;
    case 66: play_note('A', 0, 4, 8);
    1a9c:	28 e0       	ldi	r18, 0x08	; 8
    1a9e:	44 e0       	ldi	r20, 0x04	; 4
    1aa0:	60 e0       	ldi	r22, 0x00	; 0
    1aa2:	81 e4       	ldi	r24, 0x41	; 65
    1aa4:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 67: play_note('G', 0, 4, 8);
    1aa8:	28 e0       	ldi	r18, 0x08	; 8
    1aaa:	44 e0       	ldi	r20, 0x04	; 4
    1aac:	60 e0       	ldi	r22, 0x00	; 0
    1aae:	87 e4       	ldi	r24, 0x47	; 71
    1ab0:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 40: play_rest(8);
       break;
    case 41: play_note('F', 0, 4, 8);
       break;
    case 42: play_note('E', 0, 4, 8);
    1ab4:	28 e0       	ldi	r18, 0x08	; 8
    1ab6:	44 e0       	ldi	r20, 0x04	; 4
    1ab8:	60 e0       	ldi	r22, 0x00	; 0
    1aba:	85 e4       	ldi	r24, 0x45	; 69
    1abc:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
      break;//phrase
    case 59: play_note('D', 0, 4, 16);
       break;
    case 60: play_note('D', 0, 5, 16);
       break;
    case 61: play_note('A', 0, 4, 16);
    1ac0:	20 e1       	ldi	r18, 0x10	; 16
    1ac2:	44 e0       	ldi	r20, 0x04	; 4
    1ac4:	60 e0       	ldi	r22, 0x00	; 0
    1ac6:	81 e4       	ldi	r24, 0x41	; 65
    1ac8:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 62: play_note('C', 0, 5, 16);
       break;
    case 63: play_note('B', 1, 4, 8);
       break;
    case 64: play_note('C', 0, 5, 4);
    1acc:	24 e0       	ldi	r18, 0x04	; 4
    1ace:	45 e0       	ldi	r20, 0x05	; 5
    1ad0:	60 e0       	ldi	r22, 0x00	; 0
    1ad2:	83 e4       	ldi	r24, 0x43	; 67
    1ad4:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 65: play_note('D', 0, 5, 4);
    1ad8:	24 e0       	ldi	r18, 0x04	; 4
    1ada:	45 e0       	ldi	r20, 0x05	; 5
    1adc:	60 e0       	ldi	r22, 0x00	; 0
    1ade:	84 e4       	ldi	r24, 0x44	; 68
    1ae0:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1ae4:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    1aec:	10 92 9e 01 	sts	0x019E, r1
    1af0:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    1af4:	88 e0       	ldi	r24, 0x08	; 8
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	90 93 9c 01 	sts	0x019C, r25
    1afc:	80 93 9b 01 	sts	0x019B, r24
    1b00:	08 95       	ret

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1b02:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    1b0a:	10 92 9e 01 	sts	0x019E, r1
    1b0e:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	90 93 9c 01 	sts	0x019C, r25
    1b1a:	80 93 9b 01 	sts	0x019B, r24
    1b1e:	08 95       	ret
       break;
    case 56: play_note('B', 1, 4, 6);
       break;
    case 57: play_note('A', 0, 4, 2);
       break;
    case 58: play_note('B', 1, 4, 16);
    1b20:	20 e1       	ldi	r18, 0x10	; 16
    1b22:	44 e0       	ldi	r20, 0x04	; 4
    1b24:	61 e0       	ldi	r22, 0x01	; 1
    1b26:	82 e4       	ldi	r24, 0x42	; 66
    1b28:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 61: play_note('A', 0, 4, 16);
       break;
    case 62: play_note('C', 0, 5, 16);
       break;
    case 63: play_note('B', 1, 4, 8);
    1b2c:	28 e0       	ldi	r18, 0x08	; 8
    1b2e:	44 e0       	ldi	r20, 0x04	; 4
    1b30:	61 e0       	ldi	r22, 0x01	; 1
    1b32:	82 e4       	ldi	r24, 0x42	; 66
    1b34:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 37: play_note('G', 0, 4, 8);
       break;
    case 38: play_note('A', 0, 4, 8);
       break;
    case 39: play_note('G', 0, 4, 24);
    1b38:	28 e1       	ldi	r18, 0x18	; 24
    1b3a:	44 e0       	ldi	r20, 0x04	; 4
    1b3c:	60 e0       	ldi	r22, 0x00	; 0
    1b3e:	87 e4       	ldi	r24, 0x47	; 71
    1b40:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 58: play_note('B', 1, 4, 16);
      break;//phrase
    case 59: play_note('D', 0, 4, 16);
       break;
    case 60: play_note('D', 0, 5, 16);
    1b44:	20 e1       	ldi	r18, 0x10	; 16
    1b46:	45 e0       	ldi	r20, 0x05	; 5
    1b48:	60 e0       	ldi	r22, 0x00	; 0
    1b4a:	84 e4       	ldi	r24, 0x44	; 68
    1b4c:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1b50:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    1b58:	10 92 9e 01 	sts	0x019E, r1
    1b5c:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    1b60:	82 e0       	ldi	r24, 0x02	; 2
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	90 93 9c 01 	sts	0x019C, r25
    1b68:	80 93 9b 01 	sts	0x019B, r24
    1b6c:	08 95       	ret
       break;
    case 34: play_note('D', 0, 5, 4);
       break;
    case 35: play_note('B', 0, 4, 8);
       break;
    case 36: play_note('A', 0, 4, 4);
    1b6e:	24 e0       	ldi	r18, 0x04	; 4
    1b70:	44 e0       	ldi	r20, 0x04	; 4
    1b72:	60 e0       	ldi	r22, 0x00	; 0
    1b74:	81 e4       	ldi	r24, 0x41	; 65
    1b76:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 21: play_rest(1); //rest
       break;
    case 22: play_note('G', 1, 4, 4);
       break;
    case 23: play_note('G', 0, 4, 6);
    1b7a:	26 e0       	ldi	r18, 0x06	; 6
    1b7c:	44 e0       	ldi	r20, 0x04	; 4
    1b7e:	60 e0       	ldi	r22, 0x00	; 0
    1b80:	87 e4       	ldi	r24, 0x47	; 71
    1b82:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 20: play_note('G', 0, 4, 7);
       break;
    case 21: play_rest(1); //rest
       break;
    case 22: play_note('G', 1, 4, 4);
    1b86:	24 e0       	ldi	r18, 0x04	; 4
    1b88:	44 e0       	ldi	r20, 0x04	; 4
    1b8a:	61 e0       	ldi	r22, 0x01	; 1
    1b8c:	87 e4       	ldi	r24, 0x47	; 71
    1b8e:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 49: play_note('A', 0, 4, 16);
       break;
    case 50: play_note('F', 0, 4, 8);
       break;
    case 51: play_note('G', 1, 4, 8);
    1b92:	28 e0       	ldi	r18, 0x08	; 8
    1b94:	44 e0       	ldi	r20, 0x04	; 4
    1b96:	61 e0       	ldi	r22, 0x01	; 1
    1b98:	87 e4       	ldi	r24, 0x47	; 71
    1b9a:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 16: play_note('A', 0, 4, 2);
       break;
    case 17: play_note('B', 1, 4, 16);
       break;
    case 18: play_note('G', 0, 4, 3);
    1b9e:	23 e0       	ldi	r18, 0x03	; 3
    1ba0:	44 e0       	ldi	r20, 0x04	; 4
    1ba2:	60 e0       	ldi	r22, 0x00	; 0
    1ba4:	87 e4       	ldi	r24, 0x47	; 71
    1ba6:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 57: play_note('A', 0, 4, 2);
       break;
    case 58: play_note('B', 1, 4, 16);
      break;//phrase
    case 59: play_note('D', 0, 4, 16);
    1baa:	20 e1       	ldi	r18, 0x10	; 16
    1bac:	44 e0       	ldi	r20, 0x04	; 4
    1bae:	60 e0       	ldi	r22, 0x00	; 0
    1bb0:	84 e4       	ldi	r24, 0x44	; 68
    1bb2:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 60: play_note('D', 0, 5, 16);
       break;
    case 61: play_note('A', 0, 4, 16);
       break;
    case 62: play_note('C', 0, 5, 16);
    1bb6:	20 e1       	ldi	r18, 0x10	; 16
    1bb8:	45 e0       	ldi	r20, 0x05	; 5
    1bba:	60 e0       	ldi	r22, 0x00	; 0
    1bbc:	83 e4       	ldi	r24, 0x43	; 67
    1bbe:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 29: play_note('A', 1, 4, 4);
       break;
    case 30: play_note('A', 0, 4, 6);
       break;
    case 31: play_note('B', 1, 4, 2);
    1bc2:	22 e0       	ldi	r18, 0x02	; 2
    1bc4:	44 e0       	ldi	r20, 0x04	; 4
    1bc6:	61 e0       	ldi	r22, 0x01	; 1
    1bc8:	82 e4       	ldi	r24, 0x42	; 66
    1bca:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 32: play_note('C', 0, 5, 4);
       break;
    case 33: play_note('D', 1, 5, 4);
    1bce:	24 e0       	ldi	r18, 0x04	; 4
    1bd0:	45 e0       	ldi	r20, 0x05	; 5
    1bd2:	61 e0       	ldi	r22, 0x01	; 1
    1bd4:	84 e4       	ldi	r24, 0x44	; 68
    1bd6:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 27: play_rest(2); 
       break;
    case 28: play_note('A', 0, 4, 8);
       break;
    case 29: play_note('A', 1, 4, 4);
    1bda:	24 e0       	ldi	r18, 0x04	; 4
    1bdc:	44 e0       	ldi	r20, 0x04	; 4
    1bde:	61 e0       	ldi	r22, 0x01	; 1
    1be0:	81 e4       	ldi	r24, 0x41	; 65
    1be2:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 33: play_note('D', 1, 5, 4);
       break;
    case 34: play_note('D', 0, 5, 4);
       break;
    case 35: play_note('B', 0, 4, 8);
    1be6:	28 e0       	ldi	r18, 0x08	; 8
    1be8:	44 e0       	ldi	r20, 0x04	; 4
    1bea:	60 e0       	ldi	r22, 0x00	; 0
    1bec:	82 e4       	ldi	r24, 0x42	; 66
    1bee:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 66: play_note('A', 0, 4, 8);
       break;
    case 67: play_note('G', 0, 4, 8);
       break;
    case 68: play_note('F', 0, 4, 24);
    1bf2:	28 e1       	ldi	r18, 0x18	; 24
    1bf4:	44 e0       	ldi	r20, 0x04	; 4
    1bf6:	60 e0       	ldi	r22, 0x00	; 0
    1bf8:	86 e4       	ldi	r24, 0x46	; 70
    1bfa:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 18: play_note('G', 0, 4, 3);
       break;
    case 19: play_rest(1); //rest
       break;
    case 20: play_note('G', 0, 4, 7);
    1bfe:	27 e0       	ldi	r18, 0x07	; 7
    1c00:	44 e0       	ldi	r20, 0x04	; 4
    1c02:	60 e0       	ldi	r22, 0x00	; 0
    1c04:	87 e4       	ldi	r24, 0x47	; 71
    1c06:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

00001c0a <song1>:
    default: notes=-1;
  }
}//song0

void song1(uint16_t note) { //tetris theme (Kellen)
switch (note) {
    1c0a:	8f 33       	cpi	r24, 0x3F	; 63
    1c0c:	91 05       	cpc	r25, r1
    1c0e:	20 f0       	brcs	.+8      	; 0x1c18 <song1+0xe>
       break;//bar
    case 61: play_note('A', 1, 3, 16);
       break;
    case 62: play_rest(16);
      break;//bar phrase
    default: notes=-1;
    1c10:	8f ef       	ldi	r24, 0xFF	; 255
    1c12:	80 93 99 01 	sts	0x0199, r24
    1c16:	08 95       	ret
    default: notes=-1;
  }
}//song0

void song1(uint16_t note) { //tetris theme (Kellen)
switch (note) {
    1c18:	fc 01       	movw	r30, r24
    1c1a:	ec 52       	subi	r30, 0x2C	; 44
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__tablejump2__>
       break;
    case 35: play_rest(1);
        break;
    case 36: play_note('B', 0, 3, 4);
       break;
    case 37: play_note('C', 0, 4, 4);
    1c22:	24 e0       	ldi	r18, 0x04	; 4
    1c24:	44 e0       	ldi	r20, 0x04	; 4
    1c26:	60 e0       	ldi	r22, 0x00	; 0
    1c28:	83 e4       	ldi	r24, 0x43	; 67
    1c2a:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 38: play_note('D', 0, 4, 8);
       break;
    case 39: play_note('E', 0, 4, 8);
    1c2e:	28 e0       	ldi	r18, 0x08	; 8
    1c30:	44 e0       	ldi	r20, 0x04	; 4
    1c32:	60 e0       	ldi	r22, 0x00	; 0
    1c34:	85 e4       	ldi	r24, 0x45	; 69
    1c36:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1c3a:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    1c42:	10 92 9e 01 	sts	0x019E, r1
    1c46:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	90 93 9c 01 	sts	0x019C, r25
    1c52:	80 93 9b 01 	sts	0x019B, r24
    1c56:	08 95       	ret
        break;
    case 36: play_note('B', 0, 3, 4);
       break;
    case 37: play_note('C', 0, 4, 4);
       break;
    case 38: play_note('D', 0, 4, 8);
    1c58:	28 e0       	ldi	r18, 0x08	; 8
    1c5a:	44 e0       	ldi	r20, 0x04	; 4
    1c5c:	60 e0       	ldi	r22, 0x00	; 0
    1c5e:	84 e4       	ldi	r24, 0x44	; 68
    1c60:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 53: play_rest(8);
       break;//bar phrase
    case 54: play_note('E', 0, 3, 16);
       break;
    case 55: play_note('C', 0, 3, 16);
    1c64:	20 e1       	ldi	r18, 0x10	; 16
    1c66:	43 e0       	ldi	r20, 0x03	; 3
    1c68:	60 e0       	ldi	r22, 0x00	; 0
    1c6a:	83 e4       	ldi	r24, 0x43	; 67
    1c6c:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
        break;
    case 30: play_note('C', 0, 4, 4);
       break;
    case 31: play_note('E', 0, 4, 8);
        break;
    case 32: play_note('D', 0, 4, 4);
    1c70:	24 e0       	ldi	r18, 0x04	; 4
    1c72:	44 e0       	ldi	r20, 0x04	; 4
    1c74:	60 e0       	ldi	r22, 0x00	; 0
    1c76:	84 e4       	ldi	r24, 0x44	; 68
    1c78:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;//bar
    case 34: play_note('B', 0, 3, 7);
       break;
    case 35: play_rest(1);
        break;
    case 36: play_note('B', 0, 3, 4);
    1c7c:	24 e0       	ldi	r18, 0x04	; 4
    1c7e:	43 e0       	ldi	r20, 0x03	; 3
    1c80:	60 e0       	ldi	r22, 0x00	; 0
    1c82:	82 e4       	ldi	r24, 0x42	; 66
    1c84:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 39: play_note('E', 0, 4, 8);
       break;
    case 40: play_note('C', 0, 4, 8);
       break;
    case 41: play_note('A', 0, 3, 7);
    1c88:	27 e0       	ldi	r18, 0x07	; 7
    1c8a:	43 e0       	ldi	r20, 0x03	; 3
    1c8c:	60 e0       	ldi	r22, 0x00	; 0
    1c8e:	81 e4       	ldi	r24, 0x41	; 65
    1c90:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 26: play_note('A', 0, 4, 8);
       break;
    case 27: play_note('G', 0, 4, 4);
       break;
    case 28: play_note('F', 0, 4, 4);
    1c94:	24 e0       	ldi	r18, 0x04	; 4
    1c96:	44 e0       	ldi	r20, 0x04	; 4
    1c98:	60 e0       	ldi	r22, 0x00	; 0
    1c9a:	86 e4       	ldi	r24, 0x46	; 70
    1c9c:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 55: play_note('C', 0, 3, 16);
       break;//bar
    case 56: play_note('D', 0, 3, 16);
       break;
    case 57: play_note('B', 0, 2, 16);
    1ca0:	20 e1       	ldi	r18, 0x10	; 16
    1ca2:	42 e0       	ldi	r20, 0x02	; 2
    1ca4:	60 e0       	ldi	r22, 0x00	; 0
    1ca6:	82 e4       	ldi	r24, 0x42	; 66
    1ca8:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;//bar
    case 58: play_note('C', 0, 3, 8);
       break;
    case 59: play_note('E', 0, 3, 8);
       break;
    case 60: play_note('A', 0, 3, 16);
    1cac:	20 e1       	ldi	r18, 0x10	; 16
    1cae:	43 e0       	ldi	r20, 0x03	; 3
    1cb0:	60 e0       	ldi	r22, 0x00	; 0
    1cb2:	81 e4       	ldi	r24, 0x41	; 65
    1cb4:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 38: play_note('D', 0, 4, 8);
       break;
    case 39: play_note('E', 0, 4, 8);
       break;
    case 40: play_note('C', 0, 4, 8);
    1cb8:	28 e0       	ldi	r18, 0x08	; 8
    1cba:	44 e0       	ldi	r20, 0x04	; 4
    1cbc:	60 e0       	ldi	r22, 0x00	; 0
    1cbe:	83 e4       	ldi	r24, 0x43	; 67
    1cc0:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;//bar phrase
    case 54: play_note('E', 0, 3, 16);
       break;
    case 55: play_note('C', 0, 3, 16);
       break;//bar
    case 56: play_note('D', 0, 3, 16);
    1cc4:	20 e1       	ldi	r18, 0x10	; 16
    1cc6:	43 e0       	ldi	r20, 0x03	; 3
    1cc8:	60 e0       	ldi	r22, 0x00	; 0
    1cca:	84 e4       	ldi	r24, 0x44	; 68
    1ccc:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 52: play_note('B', 0, 2, 8);
       break;
    case 53: play_rest(8);
       break;//bar phrase
    case 54: play_note('E', 0, 3, 16);
    1cd0:	20 e1       	ldi	r18, 0x10	; 16
    1cd2:	43 e0       	ldi	r20, 0x03	; 3
    1cd4:	60 e0       	ldi	r22, 0x00	; 0
    1cd6:	85 e4       	ldi	r24, 0x45	; 69
    1cd8:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1cdc:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    1ce4:	10 92 9e 01 	sts	0x019E, r1
    1ce8:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    1cec:	88 e0       	ldi	r24, 0x08	; 8
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	90 93 9c 01 	sts	0x019C, r25
    1cf4:	80 93 9b 01 	sts	0x019B, r24
    1cf8:	08 95       	ret
        break;
    case 32: play_note('D', 0, 4, 4);
       break;
    case 33: play_note('C', 0, 4, 4);
       break;//bar
    case 34: play_note('B', 0, 3, 7);
    1cfa:	27 e0       	ldi	r18, 0x07	; 7
    1cfc:	43 e0       	ldi	r20, 0x03	; 3
    1cfe:	60 e0       	ldi	r22, 0x00	; 0
    1d00:	82 e4       	ldi	r24, 0x42	; 66
    1d02:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 13: play_note('D', 0, 4, 4);
       break;
    case 14: play_note('C', 0, 4, 4);
       break;//bar
    case 15: play_note('B', 0, 3, 12);
    1d06:	2c e0       	ldi	r18, 0x0C	; 12
    1d08:	43 e0       	ldi	r20, 0x03	; 3
    1d0a:	60 e0       	ldi	r22, 0x00	; 0
    1d0c:	82 e4       	ldi	r24, 0x42	; 66
    1d0e:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 59: play_note('E', 0, 3, 8);
       break;
    case 60: play_note('A', 0, 3, 16);
       break;//bar
    case 61: play_note('A', 1, 3, 16);
    1d12:	20 e1       	ldi	r18, 0x10	; 16
    1d14:	43 e0       	ldi	r20, 0x03	; 3
    1d16:	61 e0       	ldi	r22, 0x01	; 1
    1d18:	81 e4       	ldi	r24, 0x41	; 65
    1d1a:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1d1e:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    1d26:	10 92 9e 01 	sts	0x019E, r1
    1d2a:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    1d2e:	80 e1       	ldi	r24, 0x10	; 16
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	90 93 9c 01 	sts	0x019C, r25
    1d36:	80 93 9b 01 	sts	0x019B, r24
    1d3a:	08 95       	ret
        break;
    case 25: play_note('F', 0, 4, 4);
       break;
    case 26: play_note('A', 0, 4, 8);
       break;
    case 27: play_note('G', 0, 4, 4);
    1d3c:	24 e0       	ldi	r18, 0x04	; 4
    1d3e:	44 e0       	ldi	r20, 0x04	; 4
    1d40:	60 e0       	ldi	r22, 0x00	; 0
    1d42:	87 e4       	ldi	r24, 0x47	; 71
    1d44:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 50: play_note('A', 0, 2, 16);
       break;//bar
    case 51: play_note('A', 1, 2, 16);
       break;
    case 52: play_note('B', 0, 2, 8);
    1d48:	28 e0       	ldi	r18, 0x08	; 8
    1d4a:	42 e0       	ldi	r20, 0x02	; 2
    1d4c:	60 e0       	ldi	r22, 0x00	; 0
    1d4e:	82 e4       	ldi	r24, 0x42	; 66
    1d50:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 48: play_note('B', 0, 2, 16);
       break;//bar
    case 49: play_note('C', 0, 3, 16);
       break;
    case 50: play_note('A', 0, 2, 16);
    1d54:	20 e1       	ldi	r18, 0x10	; 16
    1d56:	42 e0       	ldi	r20, 0x02	; 2
    1d58:	60 e0       	ldi	r22, 0x00	; 0
    1d5a:	81 e4       	ldi	r24, 0x41	; 65
    1d5c:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;//bar
    case 51: play_note('A', 1, 2, 16);
    1d60:	20 e1       	ldi	r18, 0x10	; 16
    1d62:	42 e0       	ldi	r20, 0x02	; 2
    1d64:	61 e0       	ldi	r22, 0x01	; 1
    1d66:	81 e4       	ldi	r24, 0x41	; 65
    1d68:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 27: play_note('G', 0, 4, 4);
       break;
    case 28: play_note('F', 0, 4, 4);
       break;//bar
    case 29: play_note('E', 0, 4, 12);
    1d6c:	2c e0       	ldi	r18, 0x0C	; 12
    1d6e:	44 e0       	ldi	r20, 0x04	; 4
    1d70:	60 e0       	ldi	r22, 0x00	; 0
    1d72:	85 e4       	ldi	r24, 0x45	; 69
    1d74:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 3: play_note('D', 0, 4, 4);
       break;
    case 4: play_note('E', 0, 4, 2);
       break;
    case 5: play_note('D', 0, 4, 2);
    1d78:	22 e0       	ldi	r18, 0x02	; 2
    1d7a:	44 e0       	ldi	r20, 0x04	; 4
    1d7c:	60 e0       	ldi	r22, 0x00	; 0
    1d7e:	84 e4       	ldi	r24, 0x44	; 68
    1d80:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 2: play_note('C', 0, 4, 4);
       break;
    case 3: play_note('D', 0, 4, 4);
       break;
    case 4: play_note('E', 0, 4, 2);
    1d84:	22 e0       	ldi	r18, 0x02	; 2
    1d86:	44 e0       	ldi	r20, 0x04	; 4
    1d88:	60 e0       	ldi	r22, 0x00	; 0
    1d8a:	85 e4       	ldi	r24, 0x45	; 69
    1d8c:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;//bar
    case 56: play_note('D', 0, 3, 16);
       break;
    case 57: play_note('B', 0, 2, 16);
       break;//bar
    case 58: play_note('C', 0, 3, 8);
    1d90:	28 e0       	ldi	r18, 0x08	; 8
    1d92:	43 e0       	ldi	r20, 0x03	; 3
    1d94:	60 e0       	ldi	r22, 0x00	; 0
    1d96:	83 e4       	ldi	r24, 0x43	; 67
    1d98:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;//bar
    case 8: play_note('A', 0, 3, 7);
       break;
    case 9: play_rest(1);
       break;
    case 10: play_note('A', 0, 3, 4);
    1d9c:	24 e0       	ldi	r18, 0x04	; 4
    1d9e:	43 e0       	ldi	r20, 0x03	; 3
    1da0:	60 e0       	ldi	r22, 0x00	; 0
    1da2:	81 e4       	ldi	r24, 0x41	; 65
    1da4:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 57: play_note('B', 0, 2, 16);
       break;//bar
    case 58: play_note('C', 0, 3, 8);
       break;
    case 59: play_note('E', 0, 3, 8);
    1da8:	28 e0       	ldi	r18, 0x08	; 8
    1daa:	43 e0       	ldi	r20, 0x03	; 3
    1dac:	60 e0       	ldi	r22, 0x00	; 0
    1dae:	85 e4       	ldi	r24, 0x45	; 69
    1db0:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 41: play_note('A', 0, 3, 7);
       break;
    case 42: play_rest(1);
       break;
    case 43: play_note('A', 0, 3, 8);
    1db4:	28 e0       	ldi	r18, 0x08	; 8
    1db6:	43 e0       	ldi	r20, 0x03	; 3
    1db8:	60 e0       	ldi	r22, 0x00	; 0
    1dba:	81 e4       	ldi	r24, 0x41	; 65
    1dbc:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1dc0:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    1dc8:	10 92 9e 01 	sts	0x019E, r1
    1dcc:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    1dd0:	84 e0       	ldi	r24, 0x04	; 4
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	90 93 9c 01 	sts	0x019C, r25
    1dd8:	80 93 9b 01 	sts	0x019B, r24
    1ddc:	08 95       	ret
       break;
    case 24: play_note('D', 0, 4, 8);
        break;
    case 25: play_note('F', 0, 4, 4);
       break;
    case 26: play_note('A', 0, 4, 8);
    1dde:	28 e0       	ldi	r18, 0x08	; 8
    1de0:	44 e0       	ldi	r20, 0x04	; 4
    1de2:	60 e0       	ldi	r22, 0x00	; 0
    1de4:	81 e4       	ldi	r24, 0x41	; 65
    1de6:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

00001dea <song2>:

 }
}//song1

void song2(uint16_t note) { //Super Mario Bros Theme (Brian)
switch (note) {
    1dea:	85 39       	cpi	r24, 0x95	; 149
    1dec:	91 05       	cpc	r25, r1
    1dee:	20 f0       	brcs	.+8      	; 0x1df8 <song2+0xe>
        break;
    case 147: play_note('G', 0, 3, 4);
	break;
    case 148: play_rest(8);
        break;
    default: notes=-1;
    1df0:	8f ef       	ldi	r24, 0xFF	; 255
    1df2:	80 93 99 01 	sts	0x0199, r24
    1df6:	08 95       	ret

 }
}//song1

void song2(uint16_t note) { //Super Mario Bros Theme (Brian)
switch (note) {
    1df8:	fc 01       	movw	r30, r24
    1dfa:	ed 5e       	subi	r30, 0xED	; 237
    1dfc:	fe 4f       	sbci	r31, 0xFE	; 254
    1dfe:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__tablejump2__>
        break;
    case 145: play_rest(2);
        break;
    case 146: play_note('A', 0, 3, 2);
        break;
    case 147: play_note('G', 0, 3, 4);
    1e02:	24 e0       	ldi	r18, 0x04	; 4
    1e04:	43 e0       	ldi	r20, 0x03	; 3
    1e06:	60 e0       	ldi	r22, 0x00	; 0
    1e08:	87 e4       	ldi	r24, 0x47	; 71
    1e0a:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
        break;
    case 144: play_note('C', 0, 4, 2);
        break;
    case 145: play_rest(2);
        break;
    case 146: play_note('A', 0, 3, 2);
    1e0e:	22 e0       	ldi	r18, 0x02	; 2
    1e10:	43 e0       	ldi	r20, 0x03	; 3
    1e12:	60 e0       	ldi	r22, 0x00	; 0
    1e14:	81 e4       	ldi	r24, 0x41	; 65
    1e16:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1e1a:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    1e22:	10 92 9e 01 	sts	0x019E, r1
    1e26:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    1e2a:	82 e0       	ldi	r24, 0x02	; 2
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	90 93 9c 01 	sts	0x019C, r25
    1e32:	80 93 9b 01 	sts	0x019B, r24
    1e36:	08 95       	ret
        break;
    case 142: play_note('D', 0, 4, 4);
        break;
    case 143: play_note('E', 0, 4, 2);
        break;
    case 144: play_note('C', 0, 4, 2);
    1e38:	22 e0       	ldi	r18, 0x02	; 2
    1e3a:	44 e0       	ldi	r20, 0x04	; 4
    1e3c:	60 e0       	ldi	r22, 0x00	; 0
    1e3e:	83 e4       	ldi	r24, 0x43	; 67
    1e40:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
        break;
    case 141: play_note('C', 0, 4, 2);
        break;
    case 142: play_note('D', 0, 4, 4);
        break;
    case 143: play_note('E', 0, 4, 2);
    1e44:	22 e0       	ldi	r18, 0x02	; 2
    1e46:	44 e0       	ldi	r20, 0x04	; 4
    1e48:	60 e0       	ldi	r22, 0x00	; 0
    1e4a:	85 e4       	ldi	r24, 0x45	; 69
    1e4c:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
        break;
    case 140: play_rest(2);
        break;
    case 141: play_note('C', 0, 4, 2);
        break;
    case 142: play_note('D', 0, 4, 4);
    1e50:	24 e0       	ldi	r18, 0x04	; 4
    1e52:	44 e0       	ldi	r20, 0x04	; 4
    1e54:	60 e0       	ldi	r22, 0x00	; 0
    1e56:	84 e4       	ldi	r24, 0x44	; 68
    1e58:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
        break;
    case 139: play_note('C', 0, 4, 2);
        break;
    case 140: play_rest(2);
        break;
    case 141: play_note('C', 0, 4, 2);
    1e5c:	22 e0       	ldi	r18, 0x02	; 2
    1e5e:	44 e0       	ldi	r20, 0x04	; 4
    1e60:	60 e0       	ldi	r22, 0x00	; 0
    1e62:	83 e4       	ldi	r24, 0x43	; 67
    1e64:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1e68:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    1e70:	10 92 9e 01 	sts	0x019E, r1
    1e74:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    1e78:	82 e0       	ldi	r24, 0x02	; 2
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	90 93 9c 01 	sts	0x019C, r25
    1e80:	80 93 9b 01 	sts	0x019B, r24
    1e84:	08 95       	ret
        break;
    case 137: play_note('C', 0, 4, 2);
        break;
    case 138: play_rest(2);
        break;
    case 139: play_note('C', 0, 4, 2);
    1e86:	22 e0       	ldi	r18, 0x02	; 2
    1e88:	44 e0       	ldi	r20, 0x04	; 4
    1e8a:	60 e0       	ldi	r22, 0x00	; 0
    1e8c:	83 e4       	ldi	r24, 0x43	; 67
    1e8e:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1e92:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    1e9a:	10 92 9e 01 	sts	0x019E, r1
    1e9e:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    1ea2:	82 e0       	ldi	r24, 0x02	; 2
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	90 93 9c 01 	sts	0x019C, r25
    1eaa:	80 93 9b 01 	sts	0x019B, r24
    1eae:	08 95       	ret
        break;
    case 135: play_note('C', 0, 4, 2);
        break;
    case 136: play_rest(1);
        break;
    case 137: play_note('C', 0, 4, 2);
    1eb0:	22 e0       	ldi	r18, 0x02	; 2
    1eb2:	44 e0       	ldi	r20, 0x04	; 4
    1eb4:	60 e0       	ldi	r22, 0x00	; 0
    1eb6:	83 e4       	ldi	r24, 0x43	; 67
    1eb8:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1ebc:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    1ec4:	10 92 9e 01 	sts	0x019E, r1
    1ec8:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	90 93 9c 01 	sts	0x019C, r25
    1ed4:	80 93 9b 01 	sts	0x019B, r24
    1ed8:	08 95       	ret
        break;
    case 133: play_note('E', 0, 4, 2);
        break;
    case 134: play_rest(16);
        break;
    case 135: play_note('C', 0, 4, 2);
    1eda:	22 e0       	ldi	r18, 0x02	; 2
    1edc:	44 e0       	ldi	r20, 0x04	; 4
    1ede:	60 e0       	ldi	r22, 0x00	; 0
    1ee0:	83 e4       	ldi	r24, 0x43	; 67
    1ee2:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1ee6:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    1eee:	10 92 9e 01 	sts	0x019E, r1
    1ef2:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    1ef6:	80 e1       	ldi	r24, 0x10	; 16
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	90 93 9c 01 	sts	0x019C, r25
    1efe:	80 93 9b 01 	sts	0x019B, r24
    1f02:	08 95       	ret
        break;
    case 131: play_note('C', 0, 4, 2);
        break;
    case 132: play_note('D', 0, 4, 2);
        break;
    case 133: play_note('E', 0, 4, 2);
    1f04:	22 e0       	ldi	r18, 0x02	; 2
    1f06:	44 e0       	ldi	r20, 0x04	; 4
    1f08:	60 e0       	ldi	r22, 0x00	; 0
    1f0a:	85 e4       	ldi	r24, 0x45	; 69
    1f0c:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
        break;
    case 130: play_rest(2);
        break;
    case 131: play_note('C', 0, 4, 2);
        break;
    case 132: play_note('D', 0, 4, 2);
    1f10:	22 e0       	ldi	r18, 0x02	; 2
    1f12:	44 e0       	ldi	r20, 0x04	; 4
    1f14:	60 e0       	ldi	r22, 0x00	; 0
    1f16:	84 e4       	ldi	r24, 0x44	; 68
    1f18:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
        break;
    case 129: play_note('C', 0, 4, 2);
        break;
    case 130: play_rest(2);
        break;
    case 131: play_note('C', 0, 4, 2);
    1f1c:	22 e0       	ldi	r18, 0x02	; 2
    1f1e:	44 e0       	ldi	r20, 0x04	; 4
    1f20:	60 e0       	ldi	r22, 0x00	; 0
    1f22:	83 e4       	ldi	r24, 0x43	; 67
    1f24:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1f28:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    1f30:	10 92 9e 01 	sts	0x019E, r1
    1f34:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    1f38:	82 e0       	ldi	r24, 0x02	; 2
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	90 93 9c 01 	sts	0x019C, r25
    1f40:	80 93 9b 01 	sts	0x019B, r24
    1f44:	08 95       	ret
       break;
    case 127: play_note('C', 0, 4, 2);
        break;
    case 128: play_rest(2);
        break;
    case 129: play_note('C', 0, 4, 2);
    1f46:	22 e0       	ldi	r18, 0x02	; 2
    1f48:	44 e0       	ldi	r20, 0x04	; 4
    1f4a:	60 e0       	ldi	r22, 0x00	; 0
    1f4c:	83 e4       	ldi	r24, 0x43	; 67
    1f4e:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1f52:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    1f5a:	10 92 9e 01 	sts	0x019E, r1
    1f5e:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    1f62:	82 e0       	ldi	r24, 0x02	; 2
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	90 93 9c 01 	sts	0x019C, r25
    1f6a:	80 93 9b 01 	sts	0x019B, r24
    1f6e:	08 95       	ret
       break;
    case 125: play_note('C', 0, 4, 2);
       break;
    case 126: play_rest(1);
       break;
    case 127: play_note('C', 0, 4, 2);
    1f70:	22 e0       	ldi	r18, 0x02	; 2
    1f72:	44 e0       	ldi	r20, 0x04	; 4
    1f74:	60 e0       	ldi	r22, 0x00	; 0
    1f76:	83 e4       	ldi	r24, 0x43	; 67
    1f78:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1f7c:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    1f84:	10 92 9e 01 	sts	0x019E, r1
    1f88:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	90 93 9c 01 	sts	0x019C, r25
    1f94:	80 93 9b 01 	sts	0x019B, r24
    1f98:	08 95       	ret
        break;
    case 123: play_note('G', 0, 3, 4);
        break;
    case 124: play_rest(4);
       break;
    case 125: play_note('C', 0, 4, 2);
    1f9a:	22 e0       	ldi	r18, 0x02	; 2
    1f9c:	44 e0       	ldi	r20, 0x04	; 4
    1f9e:	60 e0       	ldi	r22, 0x00	; 0
    1fa0:	83 e4       	ldi	r24, 0x43	; 67
    1fa2:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1fa6:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    1fae:	10 92 9e 01 	sts	0x019E, r1
    1fb2:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    1fb6:	84 e0       	ldi	r24, 0x04	; 4
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	90 93 9c 01 	sts	0x019C, r25
    1fbe:	80 93 9b 01 	sts	0x019B, r24
    1fc2:	08 95       	ret
        break;
    case 121: play_rest(2);
        break;
    case 122: play_note('A', 0, 3, 2);
        break;
    case 123: play_note('G', 0, 3, 4);
    1fc4:	24 e0       	ldi	r18, 0x04	; 4
    1fc6:	43 e0       	ldi	r20, 0x03	; 3
    1fc8:	60 e0       	ldi	r22, 0x00	; 0
    1fca:	87 e4       	ldi	r24, 0x47	; 71
    1fcc:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
        break;
    case 120: play_note('C', 0, 4, 2);
        break;
    case 121: play_rest(2);
        break;
    case 122: play_note('A', 0, 3, 2);
    1fd0:	22 e0       	ldi	r18, 0x02	; 2
    1fd2:	43 e0       	ldi	r20, 0x03	; 3
    1fd4:	60 e0       	ldi	r22, 0x00	; 0
    1fd6:	81 e4       	ldi	r24, 0x41	; 65
    1fd8:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1fdc:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    1fe4:	10 92 9e 01 	sts	0x019E, r1
    1fe8:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    1fec:	82 e0       	ldi	r24, 0x02	; 2
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	90 93 9c 01 	sts	0x019C, r25
    1ff4:	80 93 9b 01 	sts	0x019B, r24
    1ff8:	08 95       	ret
        break;
    case 118: play_note('D', 0, 4, 4);
        break;
    case 119: play_note('E', 0, 4, 2);
        break;
    case 120: play_note('C', 0, 4, 2);
    1ffa:	22 e0       	ldi	r18, 0x02	; 2
    1ffc:	44 e0       	ldi	r20, 0x04	; 4
    1ffe:	60 e0       	ldi	r22, 0x00	; 0
    2000:	83 e4       	ldi	r24, 0x43	; 67
    2002:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
        break;
    case 117: play_note('C', 0, 4, 2);
        break;
    case 118: play_note('D', 0, 4, 4);
        break;
    case 119: play_note('E', 0, 4, 2);
    2006:	22 e0       	ldi	r18, 0x02	; 2
    2008:	44 e0       	ldi	r20, 0x04	; 4
    200a:	60 e0       	ldi	r22, 0x00	; 0
    200c:	85 e4       	ldi	r24, 0x45	; 69
    200e:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
        break;
    case 116: play_rest(2);
        break;
    case 117: play_note('C', 0, 4, 2);
        break;
    case 118: play_note('D', 0, 4, 4);
    2012:	24 e0       	ldi	r18, 0x04	; 4
    2014:	44 e0       	ldi	r20, 0x04	; 4
    2016:	60 e0       	ldi	r22, 0x00	; 0
    2018:	84 e4       	ldi	r24, 0x44	; 68
    201a:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
        break;
    case 115: play_note('C', 0, 4, 2);
        break;
    case 116: play_rest(2);
        break;
    case 117: play_note('C', 0, 4, 2);
    201e:	22 e0       	ldi	r18, 0x02	; 2
    2020:	44 e0       	ldi	r20, 0x04	; 4
    2022:	60 e0       	ldi	r22, 0x00	; 0
    2024:	83 e4       	ldi	r24, 0x43	; 67
    2026:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    202a:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    2032:	10 92 9e 01 	sts	0x019E, r1
    2036:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    203a:	82 e0       	ldi	r24, 0x02	; 2
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	90 93 9c 01 	sts	0x019C, r25
    2042:	80 93 9b 01 	sts	0x019B, r24
    2046:	08 95       	ret
       break;
    case 113: play_note('C', 0, 4, 2);
        break;
    case 114: play_rest(2);
        break;
    case 115: play_note('C', 0, 4, 2);
    2048:	22 e0       	ldi	r18, 0x02	; 2
    204a:	44 e0       	ldi	r20, 0x04	; 4
    204c:	60 e0       	ldi	r22, 0x00	; 0
    204e:	83 e4       	ldi	r24, 0x43	; 67
    2050:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2054:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    205c:	10 92 9e 01 	sts	0x019E, r1
    2060:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    2064:	82 e0       	ldi	r24, 0x02	; 2
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	90 93 9c 01 	sts	0x019C, r25
    206c:	80 93 9b 01 	sts	0x019B, r24
    2070:	08 95       	ret
       break;
    case 111: play_note('C', 0, 4, 2);
       break;
    case 112: play_rest(1);
       break;
    case 113: play_note('C', 0, 4, 2);
    2072:	22 e0       	ldi	r18, 0x02	; 2
    2074:	44 e0       	ldi	r20, 0x04	; 4
    2076:	60 e0       	ldi	r22, 0x00	; 0
    2078:	83 e4       	ldi	r24, 0x43	; 67
    207a:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    207e:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    2086:	10 92 9e 01 	sts	0x019E, r1
    208a:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	90 93 9c 01 	sts	0x019C, r25
    2096:	80 93 9b 01 	sts	0x019B, r24
    209a:	08 95       	ret
        break;
    case 109: play_note('C', 0, 4, 4);
       break;
    case 110: play_rest(10);
       break;
    case 111: play_note('C', 0, 4, 2);
    209c:	22 e0       	ldi	r18, 0x02	; 2
    209e:	44 e0       	ldi	r20, 0x04	; 4
    20a0:	60 e0       	ldi	r22, 0x00	; 0
    20a2:	83 e4       	ldi	r24, 0x43	; 67
    20a4:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    20a8:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    20b0:	10 92 9e 01 	sts	0x019E, r1
    20b4:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    20b8:	8a e0       	ldi	r24, 0x0A	; 10
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	90 93 9c 01 	sts	0x019C, r25
    20c0:	80 93 9b 01 	sts	0x019B, r24
    20c4:	08 95       	ret
       break;
    case 107: play_note('D', 0, 4, 2);
       break;
    case 108: play_rest(4);
        break;
    case 109: play_note('C', 0, 4, 4);
    20c6:	24 e0       	ldi	r18, 0x04	; 4
    20c8:	44 e0       	ldi	r20, 0x04	; 4
    20ca:	60 e0       	ldi	r22, 0x00	; 0
    20cc:	83 e4       	ldi	r24, 0x43	; 67
    20ce:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    20d2:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    20da:	10 92 9e 01 	sts	0x019E, r1
    20de:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    20e2:	84 e0       	ldi	r24, 0x04	; 4
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	90 93 9c 01 	sts	0x019C, r25
    20ea:	80 93 9b 01 	sts	0x019B, r24
    20ee:	08 95       	ret
       break;
    case 105: play_note('E', 1, 4, 4);
       break;
    case 106: play_rest(2);
       break;
    case 107: play_note('D', 0, 4, 2);
    20f0:	22 e0       	ldi	r18, 0x02	; 2
    20f2:	44 e0       	ldi	r20, 0x04	; 4
    20f4:	60 e0       	ldi	r22, 0x00	; 0
    20f6:	84 e4       	ldi	r24, 0x44	; 68
    20f8:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    20fc:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    2104:	10 92 9e 01 	sts	0x019E, r1
    2108:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    210c:	82 e0       	ldi	r24, 0x02	; 2
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	90 93 9c 01 	sts	0x019C, r25
    2114:	80 93 9b 01 	sts	0x019B, r24
    2118:	08 95       	ret
       break;
    case 103: play_note('D', 0, 4, 2);
       break;
    case 104: play_rest(4);
       break;
    case 105: play_note('E', 1, 4, 4);
    211a:	24 e0       	ldi	r18, 0x04	; 4
    211c:	44 e0       	ldi	r20, 0x04	; 4
    211e:	61 e0       	ldi	r22, 0x01	; 1
    2120:	85 e4       	ldi	r24, 0x45	; 69
    2122:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2126:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    212e:	10 92 9e 01 	sts	0x019E, r1
    2132:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    2136:	84 e0       	ldi	r24, 0x04	; 4
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	90 93 9c 01 	sts	0x019C, r25
    213e:	80 93 9b 01 	sts	0x019B, r24
    2142:	08 95       	ret
       break;
    case 101: play_note('A', 0, 3, 2);
       break;
    case 102: play_note('C', 0, 4, 2);
       break;
    case 103: play_note('D', 0, 4, 2);
    2144:	22 e0       	ldi	r18, 0x02	; 2
    2146:	44 e0       	ldi	r20, 0x04	; 4
    2148:	60 e0       	ldi	r22, 0x00	; 0
    214a:	84 e4       	ldi	r24, 0x44	; 68
    214c:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 100: play_rest(2);
       break;
    case 101: play_note('A', 0, 3, 2);
       break;
    case 102: play_note('C', 0, 4, 2);
    2150:	22 e0       	ldi	r18, 0x02	; 2
    2152:	44 e0       	ldi	r20, 0x04	; 4
    2154:	60 e0       	ldi	r22, 0x00	; 0
    2156:	83 e4       	ldi	r24, 0x43	; 67
    2158:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 99: play_note('C', 0, 4, 2);
       break;
    case 100: play_rest(2);
       break;
    case 101: play_note('A', 0, 3, 2);
    215c:	22 e0       	ldi	r18, 0x02	; 2
    215e:	43 e0       	ldi	r20, 0x03	; 3
    2160:	60 e0       	ldi	r22, 0x00	; 0
    2162:	81 e4       	ldi	r24, 0x41	; 65
    2164:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2168:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    2170:	10 92 9e 01 	sts	0x019E, r1
    2174:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    2178:	82 e0       	ldi	r24, 0x02	; 2
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	90 93 9c 01 	sts	0x019C, r25
    2180:	80 93 9b 01 	sts	0x019B, r24
    2184:	08 95       	ret
       break;
    case 97: play_note('A', 1, 3, 2);
       break;
    case 98: play_note('A', 0, 3, 2);
       break;
    case 99: play_note('C', 0, 4, 2);
    2186:	22 e0       	ldi	r18, 0x02	; 2
    2188:	44 e0       	ldi	r20, 0x04	; 4
    218a:	60 e0       	ldi	r22, 0x00	; 0
    218c:	83 e4       	ldi	r24, 0x43	; 67
    218e:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 96: play_rest(2);
       break;
    case 97: play_note('A', 1, 3, 2);
       break;
    case 98: play_note('A', 0, 3, 2);
    2192:	22 e0       	ldi	r18, 0x02	; 2
    2194:	43 e0       	ldi	r20, 0x03	; 3
    2196:	60 e0       	ldi	r22, 0x00	; 0
    2198:	81 e4       	ldi	r24, 0x41	; 65
    219a:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 95: play_note('E', 0, 4, 2);
       break;
    case 96: play_rest(2);
       break;
    case 97: play_note('A', 1, 3, 2);
    219e:	22 e0       	ldi	r18, 0x02	; 2
    21a0:	43 e0       	ldi	r20, 0x03	; 3
    21a2:	61 e0       	ldi	r22, 0x01	; 1
    21a4:	81 e4       	ldi	r24, 0x41	; 65
    21a6:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    21aa:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    21b2:	10 92 9e 01 	sts	0x019E, r1
    21b6:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    21ba:	82 e0       	ldi	r24, 0x02	; 2
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	90 93 9c 01 	sts	0x019C, r25
    21c2:	80 93 9b 01 	sts	0x019B, r24
    21c6:	08 95       	ret
       break;
    case 93: play_note('E', 1, 4, 2);
       break;
    case 94: play_rest(2);
       break;
    case 95: play_note('E', 0, 4, 2);
    21c8:	22 e0       	ldi	r18, 0x02	; 2
    21ca:	44 e0       	ldi	r20, 0x04	; 4
    21cc:	60 e0       	ldi	r22, 0x00	; 0
    21ce:	85 e4       	ldi	r24, 0x45	; 69
    21d0:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    21d4:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    21dc:	10 92 9e 01 	sts	0x019E, r1
    21e0:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    21e4:	82 e0       	ldi	r24, 0x02	; 2
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	90 93 9c 01 	sts	0x019C, r25
    21ec:	80 93 9b 01 	sts	0x019B, r24
    21f0:	08 95       	ret
       break;
    case 91: play_note('G', 1, 4, 2);
       break;
    case 92: play_note('F', 0, 4, 2);
       break;
    case 93: play_note('E', 1, 4, 2);
    21f2:	22 e0       	ldi	r18, 0x02	; 2
    21f4:	44 e0       	ldi	r20, 0x04	; 4
    21f6:	61 e0       	ldi	r22, 0x01	; 1
    21f8:	85 e4       	ldi	r24, 0x45	; 69
    21fa:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 90: play_note('G', 0, 4, 2);
       break;
    case 91: play_note('G', 1, 4, 2);
       break;
    case 92: play_note('F', 0, 4, 2);
    21fe:	22 e0       	ldi	r18, 0x02	; 2
    2200:	44 e0       	ldi	r20, 0x04	; 4
    2202:	60 e0       	ldi	r22, 0x00	; 0
    2204:	86 e4       	ldi	r24, 0x46	; 70
    2206:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 89: play_rest(8);
       break;
    case 90: play_note('G', 0, 4, 2);
       break;
    case 91: play_note('G', 1, 4, 2);
    220a:	22 e0       	ldi	r18, 0x02	; 2
    220c:	44 e0       	ldi	r20, 0x04	; 4
    220e:	61 e0       	ldi	r22, 0x01	; 1
    2210:	87 e4       	ldi	r24, 0x47	; 71
    2212:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 88: play_note('G', 0, 4, 4);
       break;
    case 89: play_rest(8);
       break;
    case 90: play_note('G', 0, 4, 2);
    2216:	22 e0       	ldi	r18, 0x02	; 2
    2218:	44 e0       	ldi	r20, 0x04	; 4
    221a:	60 e0       	ldi	r22, 0x00	; 0
    221c:	87 e4       	ldi	r24, 0x47	; 71
    221e:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2222:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    222a:	10 92 9e 01 	sts	0x019E, r1
    222e:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    2232:	88 e0       	ldi	r24, 0x08	; 8
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	90 93 9c 01 	sts	0x019C, r25
    223a:	80 93 9b 01 	sts	0x019B, r24
    223e:	08 95       	ret
       break;
    case 86: play_note('G', 0, 4, 1);
       break;
    case 87: play_rest(1);
       break;
    case 88: play_note('G', 0, 4, 4);
    2240:	24 e0       	ldi	r18, 0x04	; 4
    2242:	44 e0       	ldi	r20, 0x04	; 4
    2244:	60 e0       	ldi	r22, 0x00	; 0
    2246:	87 e4       	ldi	r24, 0x47	; 71
    2248:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    224c:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    2254:	10 92 9e 01 	sts	0x019E, r1
    2258:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	90 93 9c 01 	sts	0x019C, r25
    2264:	80 93 9b 01 	sts	0x019B, r24
    2268:	08 95       	ret
       break;
    case 84: play_note('G', 0, 4, 2);
       break;
    case 85: play_rest(2);
       break;
    case 86: play_note('G', 0, 4, 1);
    226a:	21 e0       	ldi	r18, 0x01	; 1
    226c:	44 e0       	ldi	r20, 0x04	; 4
    226e:	60 e0       	ldi	r22, 0x00	; 0
    2270:	87 e4       	ldi	r24, 0x47	; 71
    2272:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2276:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    227e:	10 92 9e 01 	sts	0x019E, r1
    2282:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    2286:	82 e0       	ldi	r24, 0x02	; 2
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	90 93 9c 01 	sts	0x019C, r25
    228e:	80 93 9b 01 	sts	0x019B, r24
    2292:	08 95       	ret
       break;
    case 82: play_note('E', 0, 3, 2);
       break;
    case 83: play_rest(2);
       break;
    case 84: play_note('G', 0, 4, 2);
    2294:	22 e0       	ldi	r18, 0x02	; 2
    2296:	44 e0       	ldi	r20, 0x04	; 4
    2298:	60 e0       	ldi	r22, 0x00	; 0
    229a:	87 e4       	ldi	r24, 0x47	; 71
    229c:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    22a0:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    22a8:	10 92 9e 01 	sts	0x019E, r1
    22ac:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    22b0:	82 e0       	ldi	r24, 0x02	; 2
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	90 93 9c 01 	sts	0x019C, r25
    22b8:	80 93 9b 01 	sts	0x019B, r24
    22bc:	08 95       	ret
       break;
    case 80: play_note('E', 1, 3, 2);
       break;
    case 81: play_rest(2);
       break;
    case 82: play_note('E', 0, 3, 2);
    22be:	22 e0       	ldi	r18, 0x02	; 2
    22c0:	43 e0       	ldi	r20, 0x03	; 3
    22c2:	60 e0       	ldi	r22, 0x00	; 0
    22c4:	85 e4       	ldi	r24, 0x45	; 69
    22c6:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    22ca:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    22d2:	10 92 9e 01 	sts	0x019E, r1
    22d6:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    22da:	82 e0       	ldi	r24, 0x02	; 2
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	90 93 9c 01 	sts	0x019C, r25
    22e2:	80 93 9b 01 	sts	0x019B, r24
    22e6:	08 95       	ret
       break;
    case 78: play_note('G', 1, 3, 2);
       break;
    case 79: play_note('F', 0, 3, 2);
       break;
    case 80: play_note('E', 1, 3, 2);
    22e8:	22 e0       	ldi	r18, 0x02	; 2
    22ea:	43 e0       	ldi	r20, 0x03	; 3
    22ec:	61 e0       	ldi	r22, 0x01	; 1
    22ee:	85 e4       	ldi	r24, 0x45	; 69
    22f0:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 77: play_note('G', 0, 3, 2);
       break;
    case 78: play_note('G', 1, 3, 2);
       break;
    case 79: play_note('F', 0, 3, 2);
    22f4:	22 e0       	ldi	r18, 0x02	; 2
    22f6:	43 e0       	ldi	r20, 0x03	; 3
    22f8:	60 e0       	ldi	r22, 0x00	; 0
    22fa:	86 e4       	ldi	r24, 0x46	; 70
    22fc:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 76: play_rest(4);
       break;
    case 77: play_note('G', 0, 3, 2);
       break;
    case 78: play_note('G', 1, 3, 2);
    2300:	22 e0       	ldi	r18, 0x02	; 2
    2302:	43 e0       	ldi	r20, 0x03	; 3
    2304:	61 e0       	ldi	r22, 0x01	; 1
    2306:	87 e4       	ldi	r24, 0x47	; 71
    2308:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 75: play_note('D', 0, 4, 2);
       break;
    case 76: play_rest(4);
       break;
    case 77: play_note('G', 0, 3, 2);
    230c:	22 e0       	ldi	r18, 0x02	; 2
    230e:	43 e0       	ldi	r20, 0x03	; 3
    2310:	60 e0       	ldi	r22, 0x00	; 0
    2312:	87 e4       	ldi	r24, 0x47	; 71
    2314:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2318:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    2320:	10 92 9e 01 	sts	0x019E, r1
    2324:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    2328:	84 e0       	ldi	r24, 0x04	; 4
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	90 93 9c 01 	sts	0x019C, r25
    2330:	80 93 9b 01 	sts	0x019B, r24
    2334:	08 95       	ret
       break;
    case 73: play_note('A', 0, 3, 2);
       break;
    case 74: play_note('C', 0, 4, 2);
       break;
    case 75: play_note('D', 0, 4, 2);
    2336:	22 e0       	ldi	r18, 0x02	; 2
    2338:	44 e0       	ldi	r20, 0x04	; 4
    233a:	60 e0       	ldi	r22, 0x00	; 0
    233c:	84 e4       	ldi	r24, 0x44	; 68
    233e:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 72: play_rest(2);
       break;
    case 73: play_note('A', 0, 3, 2);
       break;
    case 74: play_note('C', 0, 4, 2);
    2342:	22 e0       	ldi	r18, 0x02	; 2
    2344:	44 e0       	ldi	r20, 0x04	; 4
    2346:	60 e0       	ldi	r22, 0x00	; 0
    2348:	83 e4       	ldi	r24, 0x43	; 67
    234a:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 71: play_note('C', 0, 4, 2);
       break;
    case 72: play_rest(2);
       break;
    case 73: play_note('A', 0, 3, 2);
    234e:	22 e0       	ldi	r18, 0x02	; 2
    2350:	43 e0       	ldi	r20, 0x03	; 3
    2352:	60 e0       	ldi	r22, 0x00	; 0
    2354:	81 e4       	ldi	r24, 0x41	; 65
    2356:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    235a:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    2362:	10 92 9e 01 	sts	0x019E, r1
    2366:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    236a:	82 e0       	ldi	r24, 0x02	; 2
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	90 93 9c 01 	sts	0x019C, r25
    2372:	80 93 9b 01 	sts	0x019B, r24
    2376:	08 95       	ret
       break;
    case 69: play_note('A', 1, 3, 2);
       break;
    case 70: play_note('A', 0, 3, 2);
       break;
    case 71: play_note('C', 0, 4, 2);
    2378:	22 e0       	ldi	r18, 0x02	; 2
    237a:	44 e0       	ldi	r20, 0x04	; 4
    237c:	60 e0       	ldi	r22, 0x00	; 0
    237e:	83 e4       	ldi	r24, 0x43	; 67
    2380:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 68: play_rest(2);
       break;
    case 69: play_note('A', 1, 3, 2);
       break;
    case 70: play_note('A', 0, 3, 2);
    2384:	22 e0       	ldi	r18, 0x02	; 2
    2386:	43 e0       	ldi	r20, 0x03	; 3
    2388:	60 e0       	ldi	r22, 0x00	; 0
    238a:	81 e4       	ldi	r24, 0x41	; 65
    238c:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 67: play_note('E', 0, 4, 2);
       break;
    case 68: play_rest(2);
       break;
    case 69: play_note('A', 1, 3, 2);
    2390:	22 e0       	ldi	r18, 0x02	; 2
    2392:	43 e0       	ldi	r20, 0x03	; 3
    2394:	61 e0       	ldi	r22, 0x01	; 1
    2396:	81 e4       	ldi	r24, 0x41	; 65
    2398:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    239c:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    23a4:	10 92 9e 01 	sts	0x019E, r1
    23a8:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    23ac:	82 e0       	ldi	r24, 0x02	; 2
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	90 93 9c 01 	sts	0x019C, r25
    23b4:	80 93 9b 01 	sts	0x019B, r24
    23b8:	08 95       	ret
       break;
    case 65: play_note('E', 1, 4, 2);
       break;
    case 66: play_rest(2);
       break;
    case 67: play_note('E', 0, 4, 2);
    23ba:	22 e0       	ldi	r18, 0x02	; 2
    23bc:	44 e0       	ldi	r20, 0x04	; 4
    23be:	60 e0       	ldi	r22, 0x00	; 0
    23c0:	85 e4       	ldi	r24, 0x45	; 69
    23c2:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    23c6:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    23ce:	10 92 9e 01 	sts	0x019E, r1
    23d2:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    23d6:	82 e0       	ldi	r24, 0x02	; 2
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	90 93 9c 01 	sts	0x019C, r25
    23de:	80 93 9b 01 	sts	0x019B, r24
    23e2:	08 95       	ret
       break;
    case 63: play_note('G', 1, 4, 2);
       break;
    case 64: play_note('F', 0, 4, 2);
       break;
    case 65: play_note('E', 1, 4, 2);
    23e4:	22 e0       	ldi	r18, 0x02	; 2
    23e6:	44 e0       	ldi	r20, 0x04	; 4
    23e8:	61 e0       	ldi	r22, 0x01	; 1
    23ea:	85 e4       	ldi	r24, 0x45	; 69
    23ec:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 62: play_note('G', 0, 4, 2);
       break;
    case 63: play_note('G', 1, 4, 2);
       break;
    case 64: play_note('F', 0, 4, 2);
    23f0:	22 e0       	ldi	r18, 0x02	; 2
    23f2:	44 e0       	ldi	r20, 0x04	; 4
    23f4:	60 e0       	ldi	r22, 0x00	; 0
    23f6:	86 e4       	ldi	r24, 0x46	; 70
    23f8:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 61: play_rest(8);
       break;
    case 62: play_note('G', 0, 4, 2);
       break;
    case 63: play_note('G', 1, 4, 2);
    23fc:	22 e0       	ldi	r18, 0x02	; 2
    23fe:	44 e0       	ldi	r20, 0x04	; 4
    2400:	61 e0       	ldi	r22, 0x01	; 1
    2402:	87 e4       	ldi	r24, 0x47	; 71
    2404:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 60: play_note('B', 0, 3, 2);
       break;
    case 61: play_rest(8);
       break;
    case 62: play_note('G', 0, 4, 2);
    2408:	22 e0       	ldi	r18, 0x02	; 2
    240a:	44 e0       	ldi	r20, 0x04	; 4
    240c:	60 e0       	ldi	r22, 0x00	; 0
    240e:	87 e4       	ldi	r24, 0x47	; 71
    2410:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2414:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    241c:	10 92 9e 01 	sts	0x019E, r1
    2420:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    2424:	88 e0       	ldi	r24, 0x08	; 8
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	90 93 9c 01 	sts	0x019C, r25
    242c:	80 93 9b 01 	sts	0x019B, r24
    2430:	08 95       	ret
        break;
    case 58: play_note('C', 0, 4, 2);
       break;
    case 59: play_note('D', 0, 4, 2);
       break;
    case 60: play_note('B', 0, 3, 2);
    2432:	22 e0       	ldi	r18, 0x02	; 2
    2434:	43 e0       	ldi	r20, 0x03	; 3
    2436:	60 e0       	ldi	r22, 0x00	; 0
    2438:	82 e4       	ldi	r24, 0x42	; 66
    243a:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 57: play_rest(2);
        break;
    case 58: play_note('C', 0, 4, 2);
       break;
    case 59: play_note('D', 0, 4, 2);
    243e:	22 e0       	ldi	r18, 0x02	; 2
    2440:	44 e0       	ldi	r20, 0x04	; 4
    2442:	60 e0       	ldi	r22, 0x00	; 0
    2444:	84 e4       	ldi	r24, 0x44	; 68
    2446:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
        break;
    case 56: play_note('E', 0, 4, 2);
       break;
    case 57: play_rest(2);
        break;
    case 58: play_note('C', 0, 4, 2);
    244a:	22 e0       	ldi	r18, 0x02	; 2
    244c:	44 e0       	ldi	r20, 0x04	; 4
    244e:	60 e0       	ldi	r22, 0x00	; 0
    2450:	83 e4       	ldi	r24, 0x43	; 67
    2452:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2456:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    245e:	10 92 9e 01 	sts	0x019E, r1
    2462:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    2466:	82 e0       	ldi	r24, 0x02	; 2
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	90 93 9c 01 	sts	0x019C, r25
    246e:	80 93 9b 01 	sts	0x019B, r24
    2472:	08 95       	ret
       break;
    case 54: play_note('G', 0, 4, 2);
       break;
    case 55: play_rest(2);
        break;
    case 56: play_note('E', 0, 4, 2);
    2474:	22 e0       	ldi	r18, 0x02	; 2
    2476:	44 e0       	ldi	r20, 0x04	; 4
    2478:	60 e0       	ldi	r22, 0x00	; 0
    247a:	85 e4       	ldi	r24, 0x45	; 69
    247c:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2480:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    2488:	10 92 9e 01 	sts	0x019E, r1
    248c:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    2490:	82 e0       	ldi	r24, 0x02	; 2
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	90 93 9c 01 	sts	0x019C, r25
    2498:	80 93 9b 01 	sts	0x019B, r24
    249c:	08 95       	ret
       break;
    case 52: play_note('A', 0, 4, 4);
       break;
    case 53: play_note('F', 0, 4, 2);
       break;
    case 54: play_note('G', 0, 4, 2);
    249e:	22 e0       	ldi	r18, 0x02	; 2
    24a0:	44 e0       	ldi	r20, 0x04	; 4
    24a2:	60 e0       	ldi	r22, 0x00	; 0
    24a4:	87 e4       	ldi	r24, 0x47	; 71
    24a6:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
        break;
    case 51: play_note('G', 0, 4, 2);
       break;
    case 52: play_note('A', 0, 4, 4);
       break;
    case 53: play_note('F', 0, 4, 2);
    24aa:	22 e0       	ldi	r18, 0x02	; 2
    24ac:	44 e0       	ldi	r20, 0x04	; 4
    24ae:	60 e0       	ldi	r22, 0x00	; 0
    24b0:	86 e4       	ldi	r24, 0x46	; 70
    24b2:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 50: play_rest(1);
        break;
    case 51: play_note('G', 0, 4, 2);
       break;
    case 52: play_note('A', 0, 4, 4);
    24b6:	24 e0       	ldi	r18, 0x04	; 4
    24b8:	44 e0       	ldi	r20, 0x04	; 4
    24ba:	60 e0       	ldi	r22, 0x00	; 0
    24bc:	81 e4       	ldi	r24, 0x41	; 65
    24be:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 49: play_note('E', 0, 4, 2);
       break;
    case 50: play_rest(1);
        break;
    case 51: play_note('G', 0, 4, 2);
    24c2:	22 e0       	ldi	r18, 0x02	; 2
    24c4:	44 e0       	ldi	r20, 0x04	; 4
    24c6:	60 e0       	ldi	r22, 0x00	; 0
    24c8:	87 e4       	ldi	r24, 0x47	; 71
    24ca:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    24ce:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    24d6:	10 92 9e 01 	sts	0x019E, r1
    24da:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	90 93 9c 01 	sts	0x019C, r25
    24e6:	80 93 9b 01 	sts	0x019B, r24
    24ea:	08 95       	ret
       break;
    case 47: play_note('A', 0, 3, 4); //phrase
       break;
    case 48: play_note('G' , 0, 3, 3);
       break;
    case 49: play_note('E', 0, 4, 2);
    24ec:	22 e0       	ldi	r18, 0x02	; 2
    24ee:	44 e0       	ldi	r20, 0x04	; 4
    24f0:	60 e0       	ldi	r22, 0x00	; 0
    24f2:	85 e4       	ldi	r24, 0x45	; 69
    24f4:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 46: play_note('B', 1, 3, 2);
       break;
    case 47: play_note('A', 0, 3, 4); //phrase
       break;
    case 48: play_note('G' , 0, 3, 3);
    24f8:	23 e0       	ldi	r18, 0x03	; 3
    24fa:	43 e0       	ldi	r20, 0x03	; 3
    24fc:	60 e0       	ldi	r22, 0x00	; 0
    24fe:	87 e4       	ldi	r24, 0x47	; 71
    2500:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 45: play_rest(2);
       break;
    case 46: play_note('B', 1, 3, 2);
       break;
    case 47: play_note('A', 0, 3, 4); //phrase
    2504:	24 e0       	ldi	r18, 0x04	; 4
    2506:	43 e0       	ldi	r20, 0x03	; 3
    2508:	60 e0       	ldi	r22, 0x00	; 0
    250a:	81 e4       	ldi	r24, 0x41	; 65
    250c:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
         break;
    case 44: play_note('B', 0, 3, 2);
       break;
    case 45: play_rest(2);
       break;
    case 46: play_note('B', 1, 3, 2);
    2510:	22 e0       	ldi	r18, 0x02	; 2
    2512:	43 e0       	ldi	r20, 0x03	; 3
    2514:	61 e0       	ldi	r22, 0x01	; 1
    2516:	82 e4       	ldi	r24, 0x42	; 66
    2518:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    251c:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    2524:	10 92 9e 01 	sts	0x019E, r1
    2528:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    252c:	82 e0       	ldi	r24, 0x02	; 2
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	90 93 9c 01 	sts	0x019C, r25
    2534:	80 93 9b 01 	sts	0x019B, r24
    2538:	08 95       	ret
       break;
    case 42: play_note('A', 0, 3, 2);
       break;
    case 43: play_rest(2);
         break;
    case 44: play_note('B', 0, 3, 2);
    253a:	22 e0       	ldi	r18, 0x02	; 2
    253c:	43 e0       	ldi	r20, 0x03	; 3
    253e:	60 e0       	ldi	r22, 0x00	; 0
    2540:	82 e4       	ldi	r24, 0x42	; 66
    2542:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2546:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    254e:	10 92 9e 01 	sts	0x019E, r1
    2552:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    2556:	82 e0       	ldi	r24, 0x02	; 2
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	90 93 9c 01 	sts	0x019C, r25
    255e:	80 93 9b 01 	sts	0x019B, r24
    2562:	08 95       	ret
       break;
    case 40: play_note('E', 0, 3, 4);
       break;
    case 41: play_rest(2);
       break;
    case 42: play_note('A', 0, 3, 2);
    2564:	22 e0       	ldi	r18, 0x02	; 2
    2566:	43 e0       	ldi	r20, 0x03	; 3
    2568:	60 e0       	ldi	r22, 0x00	; 0
    256a:	81 e4       	ldi	r24, 0x41	; 65
    256c:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2570:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    2578:	10 92 9e 01 	sts	0x019E, r1
    257c:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    2580:	82 e0       	ldi	r24, 0x02	; 2
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	90 93 9c 01 	sts	0x019C, r25
    2588:	80 93 9b 01 	sts	0x019B, r24
    258c:	08 95       	ret
       break;
    case 38: play_note('G', 0, 3, 2);
       break;
    case 39: play_rest(3);
       break;
    case 40: play_note('E', 0, 3, 4);
    258e:	24 e0       	ldi	r18, 0x04	; 4
    2590:	43 e0       	ldi	r20, 0x03	; 3
    2592:	60 e0       	ldi	r22, 0x00	; 0
    2594:	85 e4       	ldi	r24, 0x45	; 69
    2596:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    259a:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    25a2:	10 92 9e 01 	sts	0x019E, r1
    25a6:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    25aa:	83 e0       	ldi	r24, 0x03	; 3
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	90 93 9c 01 	sts	0x019C, r25
    25b2:	80 93 9b 01 	sts	0x019B, r24
    25b6:	08 95       	ret
        break;
    case 36: play_note('C', 0, 4, 5);
       break;
    case 37: play_rest(2);
       break;
    case 38: play_note('G', 0, 3, 2);
    25b8:	22 e0       	ldi	r18, 0x02	; 2
    25ba:	43 e0       	ldi	r20, 0x03	; 3
    25bc:	60 e0       	ldi	r22, 0x00	; 0
    25be:	87 e4       	ldi	r24, 0x47	; 71
    25c0:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    25c4:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    25cc:	10 92 9e 01 	sts	0x019E, r1
    25d0:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    25d4:	82 e0       	ldi	r24, 0x02	; 2
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	90 93 9c 01 	sts	0x019C, r25
    25dc:	80 93 9b 01 	sts	0x019B, r24
    25e0:	08 95       	ret
       break;
    case 34: play_note('B', 0, 3, 2);
       break;
    case 35: play_rest(4);
        break;
    case 36: play_note('C', 0, 4, 5);
    25e2:	25 e0       	ldi	r18, 0x05	; 5
    25e4:	44 e0       	ldi	r20, 0x04	; 4
    25e6:	60 e0       	ldi	r22, 0x00	; 0
    25e8:	83 e4       	ldi	r24, 0x43	; 67
    25ea:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    25ee:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    25f6:	10 92 9e 01 	sts	0x019E, r1
    25fa:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    25fe:	84 e0       	ldi	r24, 0x04	; 4
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	90 93 9c 01 	sts	0x019C, r25
    2606:	80 93 9b 01 	sts	0x019B, r24
    260a:	08 95       	ret
        break;
    case 32: play_note('C', 0, 4, 2);
       break;
    case 33: play_note('D', 0, 4, 2);
       break;
    case 34: play_note('B', 0, 3, 2);
    260c:	22 e0       	ldi	r18, 0x02	; 2
    260e:	43 e0       	ldi	r20, 0x03	; 3
    2610:	60 e0       	ldi	r22, 0x00	; 0
    2612:	82 e4       	ldi	r24, 0x42	; 66
    2614:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 31: play_rest(2);
        break;
    case 32: play_note('C', 0, 4, 2);
       break;
    case 33: play_note('D', 0, 4, 2);
    2618:	22 e0       	ldi	r18, 0x02	; 2
    261a:	44 e0       	ldi	r20, 0x04	; 4
    261c:	60 e0       	ldi	r22, 0x00	; 0
    261e:	84 e4       	ldi	r24, 0x44	; 68
    2620:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
        break;
    case 30: play_note('E', 0, 4, 2);
       break;
    case 31: play_rest(2);
        break;
    case 32: play_note('C', 0, 4, 2);
    2624:	22 e0       	ldi	r18, 0x02	; 2
    2626:	44 e0       	ldi	r20, 0x04	; 4
    2628:	60 e0       	ldi	r22, 0x00	; 0
    262a:	83 e4       	ldi	r24, 0x43	; 67
    262c:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2630:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    2638:	10 92 9e 01 	sts	0x019E, r1
    263c:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    2640:	82 e0       	ldi	r24, 0x02	; 2
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	90 93 9c 01 	sts	0x019C, r25
    2648:	80 93 9b 01 	sts	0x019B, r24
    264c:	08 95       	ret
       break;
    case 28: play_note('G', 0, 4, 2);
       break;
    case 29: play_rest(2);
        break;
    case 30: play_note('E', 0, 4, 2);
    264e:	22 e0       	ldi	r18, 0x02	; 2
    2650:	44 e0       	ldi	r20, 0x04	; 4
    2652:	60 e0       	ldi	r22, 0x00	; 0
    2654:	85 e4       	ldi	r24, 0x45	; 69
    2656:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    265a:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    2662:	10 92 9e 01 	sts	0x019E, r1
    2666:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    266a:	82 e0       	ldi	r24, 0x02	; 2
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	90 93 9c 01 	sts	0x019C, r25
    2672:	80 93 9b 01 	sts	0x019B, r24
    2676:	08 95       	ret
       break;
    case 26: play_note('A', 0, 4, 4);
       break;
    case 27: play_note('F', 0, 4, 2);
       break;
    case 28: play_note('G', 0, 4, 2);
    2678:	22 e0       	ldi	r18, 0x02	; 2
    267a:	44 e0       	ldi	r20, 0x04	; 4
    267c:	60 e0       	ldi	r22, 0x00	; 0
    267e:	87 e4       	ldi	r24, 0x47	; 71
    2680:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
        break;
    case 25: play_note('G', 0, 4, 2);
       break;
    case 26: play_note('A', 0, 4, 4);
       break;
    case 27: play_note('F', 0, 4, 2);
    2684:	22 e0       	ldi	r18, 0x02	; 2
    2686:	44 e0       	ldi	r20, 0x04	; 4
    2688:	60 e0       	ldi	r22, 0x00	; 0
    268a:	86 e4       	ldi	r24, 0x46	; 70
    268c:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 24: play_rest(1);
        break;
    case 25: play_note('G', 0, 4, 2);
       break;
    case 26: play_note('A', 0, 4, 4);
    2690:	24 e0       	ldi	r18, 0x04	; 4
    2692:	44 e0       	ldi	r20, 0x04	; 4
    2694:	60 e0       	ldi	r22, 0x00	; 0
    2696:	81 e4       	ldi	r24, 0x41	; 65
    2698:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 23: play_note('E', 0, 4, 2);
       break;
    case 24: play_rest(1);
        break;
    case 25: play_note('G', 0, 4, 2);
    269c:	22 e0       	ldi	r18, 0x02	; 2
    269e:	44 e0       	ldi	r20, 0x04	; 4
    26a0:	60 e0       	ldi	r22, 0x00	; 0
    26a2:	87 e4       	ldi	r24, 0x47	; 71
    26a4:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    26a8:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    26b0:	10 92 9e 01 	sts	0x019E, r1
    26b4:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	90 93 9c 01 	sts	0x019C, r25
    26c0:	80 93 9b 01 	sts	0x019B, r24
    26c4:	08 95       	ret
       break;
    case 21: play_note('A', 0, 3, 4);
       break;
    case 22: play_note('G' , 0, 3, 3);
       break;
    case 23: play_note('E', 0, 4, 2);
    26c6:	22 e0       	ldi	r18, 0x02	; 2
    26c8:	44 e0       	ldi	r20, 0x04	; 4
    26ca:	60 e0       	ldi	r22, 0x00	; 0
    26cc:	85 e4       	ldi	r24, 0x45	; 69
    26ce:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 20: play_note('B', 1, 3, 2);
       break;
    case 21: play_note('A', 0, 3, 4);
       break;
    case 22: play_note('G' , 0, 3, 3);
    26d2:	23 e0       	ldi	r18, 0x03	; 3
    26d4:	43 e0       	ldi	r20, 0x03	; 3
    26d6:	60 e0       	ldi	r22, 0x00	; 0
    26d8:	87 e4       	ldi	r24, 0x47	; 71
    26da:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 19: play_rest(2);
       break;
    case 20: play_note('B', 1, 3, 2);
       break;
    case 21: play_note('A', 0, 3, 4);
    26de:	24 e0       	ldi	r18, 0x04	; 4
    26e0:	43 e0       	ldi	r20, 0x03	; 3
    26e2:	60 e0       	ldi	r22, 0x00	; 0
    26e4:	81 e4       	ldi	r24, 0x41	; 65
    26e6:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
         break;
    case 18: play_note('B', 0, 3, 2);
       break;
    case 19: play_rest(2);
       break;
    case 20: play_note('B', 1, 3, 2);
    26ea:	22 e0       	ldi	r18, 0x02	; 2
    26ec:	43 e0       	ldi	r20, 0x03	; 3
    26ee:	61 e0       	ldi	r22, 0x01	; 1
    26f0:	82 e4       	ldi	r24, 0x42	; 66
    26f2:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    26f6:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    26fe:	10 92 9e 01 	sts	0x019E, r1
    2702:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    2706:	82 e0       	ldi	r24, 0x02	; 2
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	90 93 9c 01 	sts	0x019C, r25
    270e:	80 93 9b 01 	sts	0x019B, r24
    2712:	08 95       	ret
       break;
    case 16: play_note('A', 0, 3, 2);
       break;
    case 17: play_rest(2);
         break;
    case 18: play_note('B', 0, 3, 2);
    2714:	22 e0       	ldi	r18, 0x02	; 2
    2716:	43 e0       	ldi	r20, 0x03	; 3
    2718:	60 e0       	ldi	r22, 0x00	; 0
    271a:	82 e4       	ldi	r24, 0x42	; 66
    271c:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2720:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    2728:	10 92 9e 01 	sts	0x019E, r1
    272c:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    2730:	82 e0       	ldi	r24, 0x02	; 2
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	90 93 9c 01 	sts	0x019C, r25
    2738:	80 93 9b 01 	sts	0x019B, r24
    273c:	08 95       	ret
       break;
    case 14: play_note('E', 0, 3, 4);
       break;
    case 15: play_rest(2);
       break;
    case 16: play_note('A', 0, 3, 2);
    273e:	22 e0       	ldi	r18, 0x02	; 2
    2740:	43 e0       	ldi	r20, 0x03	; 3
    2742:	60 e0       	ldi	r22, 0x00	; 0
    2744:	81 e4       	ldi	r24, 0x41	; 65
    2746:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    274a:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    2752:	10 92 9e 01 	sts	0x019E, r1
    2756:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    275a:	82 e0       	ldi	r24, 0x02	; 2
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	90 93 9c 01 	sts	0x019C, r25
    2762:	80 93 9b 01 	sts	0x019B, r24
    2766:	08 95       	ret
       break;
    case 12: play_note('G', 0, 3, 2);
       break;
    case 13: play_rest(4);
       break;
    case 14: play_note('E', 0, 3, 4);
    2768:	24 e0       	ldi	r18, 0x04	; 4
    276a:	43 e0       	ldi	r20, 0x03	; 3
    276c:	60 e0       	ldi	r22, 0x00	; 0
    276e:	85 e4       	ldi	r24, 0x45	; 69
    2770:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2774:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    277c:	10 92 9e 01 	sts	0x019E, r1
    2780:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    2784:	84 e0       	ldi	r24, 0x04	; 4
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	90 93 9c 01 	sts	0x019C, r25
    278c:	80 93 9b 01 	sts	0x019B, r24
    2790:	08 95       	ret
       break;
    case 10: play_rest(8);
       break;
    case 11: play_note('C', 0, 4, 5);
       break;
    case 12: play_note('G', 0, 3, 2);
    2792:	22 e0       	ldi	r18, 0x02	; 2
    2794:	43 e0       	ldi	r20, 0x03	; 3
    2796:	60 e0       	ldi	r22, 0x00	; 0
    2798:	87 e4       	ldi	r24, 0x47	; 71
    279a:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 9: play_note('G', 0, 2, 8);
       break;
    case 10: play_rest(8);
       break;
    case 11: play_note('C', 0, 4, 5);
    279e:	25 e0       	ldi	r18, 0x05	; 5
    27a0:	44 e0       	ldi	r20, 0x04	; 4
    27a2:	60 e0       	ldi	r22, 0x00	; 0
    27a4:	83 e4       	ldi	r24, 0x43	; 67
    27a6:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    27aa:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    27b2:	10 92 9e 01 	sts	0x019E, r1
    27b6:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    27ba:	88 e0       	ldi	r24, 0x08	; 8
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	90 93 9c 01 	sts	0x019C, r25
    27c2:	80 93 9b 01 	sts	0x019B, r24
    27c6:	08 95       	ret
       break;
    case 7: play_note('E', 0, 4, 4);
       break;
    case 8: play_note('G', 0, 4, 8);
       break;
    case 9: play_note('G', 0, 2, 8);
    27c8:	28 e0       	ldi	r18, 0x08	; 8
    27ca:	42 e0       	ldi	r20, 0x02	; 2
    27cc:	60 e0       	ldi	r22, 0x00	; 0
    27ce:	87 e4       	ldi	r24, 0x47	; 71
    27d0:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 6: play_note('C', 0, 4, 2);
       break;
    case 7: play_note('E', 0, 4, 4);
       break;
    case 8: play_note('G', 0, 4, 8);
    27d4:	28 e0       	ldi	r18, 0x08	; 8
    27d6:	44 e0       	ldi	r20, 0x04	; 4
    27d8:	60 e0       	ldi	r22, 0x00	; 0
    27da:	87 e4       	ldi	r24, 0x47	; 71
    27dc:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 5: play_rest(2);
       break;
    case 6: play_note('C', 0, 4, 2);
       break;
    case 7: play_note('E', 0, 4, 4);
    27e0:	24 e0       	ldi	r18, 0x04	; 4
    27e2:	44 e0       	ldi	r20, 0x04	; 4
    27e4:	60 e0       	ldi	r22, 0x00	; 0
    27e6:	85 e4       	ldi	r24, 0x45	; 69
    27e8:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 4: play_note('E', 0, 4, 2);
       break;
    case 5: play_rest(2);
       break;
    case 6: play_note('C', 0, 4, 2);
    27ec:	22 e0       	ldi	r18, 0x02	; 2
    27ee:	44 e0       	ldi	r20, 0x04	; 4
    27f0:	60 e0       	ldi	r22, 0x00	; 0
    27f2:	83 e4       	ldi	r24, 0x43	; 67
    27f4:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    27f8:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    2800:	10 92 9e 01 	sts	0x019E, r1
    2804:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    2808:	82 e0       	ldi	r24, 0x02	; 2
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	90 93 9c 01 	sts	0x019C, r25
    2810:	80 93 9b 01 	sts	0x019B, r24
    2814:	08 95       	ret
       break;
    case 2: play_note('E', 0, 4, 3);
       break;
    case 3: play_rest(1);
       break;
    case 4: play_note('E', 0, 4, 2);
    2816:	22 e0       	ldi	r18, 0x02	; 2
    2818:	44 e0       	ldi	r20, 0x04	; 4
    281a:	60 e0       	ldi	r22, 0x00	; 0
    281c:	85 e4       	ldi	r24, 0x45	; 69
    281e:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2822:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    282a:	10 92 9e 01 	sts	0x019E, r1
    282e:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	90 93 9c 01 	sts	0x019C, r25
    283a:	80 93 9b 01 	sts	0x019B, r24
    283e:	08 95       	ret
switch (note) {
    case 0: play_note('E', 0, 4, 1);
       break;
    case 1: play_rest(1);
       break;
    case 2: play_note('E', 0, 4, 3);
    2840:	23 e0       	ldi	r18, 0x03	; 3
    2842:	44 e0       	ldi	r20, 0x04	; 4
    2844:	60 e0       	ldi	r22, 0x00	; 0
    2846:	85 e4       	ldi	r24, 0x45	; 69
    2848:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    284c:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    2854:	10 92 9e 01 	sts	0x019E, r1
    2858:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	90 93 9c 01 	sts	0x019C, r25
    2864:	80 93 9b 01 	sts	0x019B, r24
    2868:	08 95       	ret
 }
}//song1

void song2(uint16_t note) { //Super Mario Bros Theme (Brian)
switch (note) {
    case 0: play_note('E', 0, 4, 1);
    286a:	21 e0       	ldi	r18, 0x01	; 1
    286c:	44 e0       	ldi	r20, 0x04	; 4
    286e:	60 e0       	ldi	r22, 0x00	; 0
    2870:	85 e4       	ldi	r24, 0x45	; 69
    2872:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2876:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    287e:	10 92 9e 01 	sts	0x019E, r1
    2882:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    2886:	88 e0       	ldi	r24, 0x08	; 8
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	90 93 9c 01 	sts	0x019C, r25
    288e:	80 93 9b 01 	sts	0x019B, r24
    2892:	08 95       	ret

00002894 <song3>:

 }
}//song2

void song3(uint16_t note) { //(Max and Kellen)
  switch (note) {
    2894:	8f 31       	cpi	r24, 0x1F	; 31
    2896:	91 05       	cpc	r25, r1
    2898:	20 f0       	brcs	.+8      	; 0x28a2 <song3+0xe>
       break;
    case 29: play_note('G', 1, 5, 8);
       break;
    case 30: play_note('E', 0, 5, 8);
       break;
    default: notes=-1;
    289a:	8f ef       	ldi	r24, 0xFF	; 255
    289c:	80 93 99 01 	sts	0x0199, r24
    28a0:	08 95       	ret

 }
}//song2

void song3(uint16_t note) { //(Max and Kellen)
  switch (note) {
    28a2:	fc 01       	movw	r30, r24
    28a4:	e8 55       	subi	r30, 0x58	; 88
    28a6:	fe 4f       	sbci	r31, 0xFE	; 254
    28a8:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__tablejump2__>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    28ac:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    28b4:	10 92 9e 01 	sts	0x019E, r1
    28b8:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	90 93 9c 01 	sts	0x019C, r25
    28c4:	80 93 9b 01 	sts	0x019B, r24
    28c8:	08 95       	ret
       break;
    case 26: play_note('E', 0, 5, 3);
       break;
    case 27: play_rest(1); //rest 1
       break;
    case 28: play_note('E', 0, 5, 4);
    28ca:	24 e0       	ldi	r18, 0x04	; 4
    28cc:	45 e0       	ldi	r20, 0x05	; 5
    28ce:	60 e0       	ldi	r22, 0x00	; 0
    28d0:	85 e4       	ldi	r24, 0x45	; 69
    28d2:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 2: play_note('E', 0, 4, 7);
       break;
    case 3: play_rest(1);
       break;
    case 4: play_note('E', 0, 4, 7);
    28d6:	27 e0       	ldi	r18, 0x07	; 7
    28d8:	44 e0       	ldi	r20, 0x04	; 4
    28da:	60 e0       	ldi	r22, 0x00	; 0
    28dc:	85 e4       	ldi	r24, 0x45	; 69
    28de:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 17: play_note('E', 1, 4, 7);
       break;
    case 18: play_rest(1);
       break;
    case 19: play_note('E', 1, 4, 7);
    28e2:	27 e0       	ldi	r18, 0x07	; 7
    28e4:	44 e0       	ldi	r20, 0x04	; 4
    28e6:	61 e0       	ldi	r22, 0x01	; 1
    28e8:	85 e4       	ldi	r24, 0x45	; 69
    28ea:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    28ee:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    28f6:	10 92 9e 01 	sts	0x019E, r1
    28fa:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    28fe:	85 e0       	ldi	r24, 0x05	; 5
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	90 93 9c 01 	sts	0x019C, r25
    2906:	80 93 9b 01 	sts	0x019B, r24
    290a:	08 95       	ret
       break;
    case 28: play_note('E', 0, 5, 4);
       break;
    case 29: play_note('G', 1, 5, 8);
       break;
    case 30: play_note('E', 0, 5, 8);
    290c:	28 e0       	ldi	r18, 0x08	; 8
    290e:	45 e0       	ldi	r20, 0x05	; 5
    2910:	60 e0       	ldi	r22, 0x00	; 0
    2912:	85 e4       	ldi	r24, 0x45	; 69
    2914:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 21: play_note('E', 1, 4, 3);
       break;
    case 22: play_rest(1);
       break;
    case 23: play_note('E', 1, 4, 3);
    2918:	23 e0       	ldi	r18, 0x03	; 3
    291a:	44 e0       	ldi	r20, 0x04	; 4
    291c:	61 e0       	ldi	r22, 0x01	; 1
    291e:	85 e4       	ldi	r24, 0x45	; 69
    2920:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 6: play_note('E', 0, 4, 3);
       break;
    case 7: play_rest(1);
       break;
    case 8: play_note('E', 0, 4, 3);
    2924:	23 e0       	ldi	r18, 0x03	; 3
    2926:	44 e0       	ldi	r20, 0x04	; 4
    2928:	60 e0       	ldi	r22, 0x00	; 0
    292a:	85 e4       	ldi	r24, 0x45	; 69
    292c:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 11: play_note('G', 1, 5, 4);
       break;
    case 12: play_note('E', 0, 5, 4);
       break;
    case 13: play_note('G', 0, 5, 8);
    2930:	28 e0       	ldi	r18, 0x08	; 8
    2932:	45 e0       	ldi	r20, 0x05	; 5
    2934:	60 e0       	ldi	r22, 0x00	; 0
    2936:	87 e4       	ldi	r24, 0x47	; 71
    2938:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 23: play_note('E', 1, 4, 3);
       break;
    case 24: play_rest(5);
       break;
    case 25: play_note('E', 1, 5, 4);
    293c:	24 e0       	ldi	r18, 0x04	; 4
    293e:	45 e0       	ldi	r20, 0x05	; 5
    2940:	61 e0       	ldi	r22, 0x01	; 1
    2942:	85 e4       	ldi	r24, 0x45	; 69
    2944:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 26: play_note('E', 0, 5, 3);
    2948:	23 e0       	ldi	r18, 0x03	; 3
    294a:	45 e0       	ldi	r20, 0x05	; 5
    294c:	60 e0       	ldi	r22, 0x00	; 0
    294e:	85 e4       	ldi	r24, 0x45	; 69
    2950:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 9: play_rest(5);
       break;
    case 10: play_note('E', 0, 5, 4);
       break;
    case 11: play_note('G', 1, 5, 4);
    2954:	24 e0       	ldi	r18, 0x04	; 4
    2956:	45 e0       	ldi	r20, 0x05	; 5
    2958:	61 e0       	ldi	r22, 0x01	; 1
    295a:	87 e4       	ldi	r24, 0x47	; 71
    295c:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 27: play_rest(1); //rest 1
       break;
    case 28: play_note('E', 0, 5, 4);
       break;
    case 29: play_note('G', 1, 5, 8);
    2960:	28 e0       	ldi	r18, 0x08	; 8
    2962:	45 e0       	ldi	r20, 0x05	; 5
    2964:	61 e0       	ldi	r22, 0x01	; 1
    2966:	87 e4       	ldi	r24, 0x47	; 71
    2968:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

0000296c <song4>:

void song4(uint16_t note) { //beethoven's 5th symphony

    // each measure is 32
    // each note    is 16
  switch (note) {
    296c:	84 35       	cpi	r24, 0x54	; 84
    296e:	91 05       	cpc	r25, r1
    2970:	20 f0       	brcs	.+8      	; 0x297a <song4+0xe>
       break;
//21
    case 83: play_note('E', 0, 5, 16); // e,natural,3,1/4
       break;

    default: notes=-1;
    2972:	8f ef       	ldi	r24, 0xFF	; 255
    2974:	80 93 99 01 	sts	0x0199, r24
    2978:	08 95       	ret

void song4(uint16_t note) { //beethoven's 5th symphony

    // each measure is 32
    // each note    is 16
  switch (note) {
    297a:	fc 01       	movw	r30, r24
    297c:	e9 53       	subi	r30, 0x39	; 57
    297e:	fe 4f       	sbci	r31, 0xFE	; 254
    2980:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__tablejump2__>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2984:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    298c:	10 92 9e 01 	sts	0x019E, r1
    2990:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	90 93 9c 01 	sts	0x019C, r25
    299c:	80 93 9b 01 	sts	0x019B, r24
    29a0:	08 95       	ret
       break;
    case 41: play_note('E', 0, 4, 3); // e,natural,3,1/4
       break;
    case 42: play_rest(1);
       break;
    case 43: play_note('E', 0, 4, 3); // e,natural,3,1/4
    29a2:	23 e0       	ldi	r18, 0x03	; 3
    29a4:	44 e0       	ldi	r20, 0x04	; 4
    29a6:	60 e0       	ldi	r22, 0x00	; 0
    29a8:	85 e4       	ldi	r24, 0x45	; 69
    29aa:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 74: play_note('E', 0, 5, 3); // e,natural,3,1/4
       break;
    case 75: play_rest(1);
       break;
    case 76: play_note('E', 0, 5, 3); // e,natural,3,1/4
    29ae:	23 e0       	ldi	r18, 0x03	; 3
    29b0:	45 e0       	ldi	r20, 0x05	; 5
    29b2:	60 e0       	ldi	r22, 0x00	; 0
    29b4:	85 e4       	ldi	r24, 0x45	; 69
    29b6:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 48: play_note('F', 0, 4, 3); // e,natural,3,1/4
       break;
    case 49: play_rest(1);
       break;
    case 50: play_note('F', 0, 4, 3); // e,natural,3,1/4
    29ba:	23 e0       	ldi	r18, 0x03	; 3
    29bc:	44 e0       	ldi	r20, 0x04	; 4
    29be:	60 e0       	ldi	r22, 0x00	; 0
    29c0:	86 e4       	ldi	r24, 0x46	; 70
    29c2:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    29c6:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    29ce:	10 92 9e 01 	sts	0x019E, r1
    29d2:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    29d6:	84 e0       	ldi	r24, 0x04	; 4
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	90 93 9c 01 	sts	0x019C, r25
    29de:	80 93 9b 01 	sts	0x019B, r24
    29e2:	08 95       	ret
       break;
    case 76: play_note('E', 0, 5, 3); // e,natural,3,1/4
       break;
    case 77: play_rest(1);
       break;
    case 78: play_note('D', 0, 5, 4); // e,natural,3,1/4
    29e4:	24 e0       	ldi	r18, 0x04	; 4
    29e6:	45 e0       	ldi	r20, 0x05	; 5
    29e8:	60 e0       	ldi	r22, 0x00	; 0
    29ea:	84 e4       	ldi	r24, 0x44	; 68
    29ec:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 33: play_note('C', 0, 5, 3); // e,natural,3,1/4
       break;
    case 34: play_rest(1);
       break;
    case 35: play_note('C', 0, 5, 3); // e,natural,3,1/4
    29f0:	23 e0       	ldi	r18, 0x03	; 3
    29f2:	45 e0       	ldi	r20, 0x05	; 5
    29f4:	60 e0       	ldi	r22, 0x00	; 0
    29f6:	83 e4       	ldi	r24, 0x43	; 67
    29f8:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 54: play_note('D', 0, 5, 3); // e,natural,3,1/4
       break;
    case 55: play_rest(1);
       break;
    case 56: play_note('D', 0, 5, 3); // e,natural,3,1/4
    29fc:	23 e0       	ldi	r18, 0x03	; 3
    29fe:	45 e0       	ldi	r20, 0x05	; 5
    2a00:	60 e0       	ldi	r22, 0x00	; 0
    2a02:	84 e4       	ldi	r24, 0x44	; 68
    2a04:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 11: play_note('D', 0, 4, 3); // e,natural,3,1/4
       break;
    case 12: play_rest(1);
       break;
    case 13: play_note('D', 0, 4, 3); // e,natural,3,1/4
    2a08:	23 e0       	ldi	r18, 0x03	; 3
    2a0a:	44 e0       	ldi	r20, 0x04	; 4
    2a0c:	60 e0       	ldi	r22, 0x00	; 0
    2a0e:	84 e4       	ldi	r24, 0x44	; 68
    2a10:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
    case 70: play_rest(1);
       break;
    case 71: play_note('D', 0, 5, 4); // e,natural,3,1/4
       break;
//17             
    case 72: play_note('C', 0, 5, 16); // e,natural,3,1/4
    2a14:	20 e1       	ldi	r18, 0x10	; 16
    2a16:	45 e0       	ldi	r20, 0x05	; 5
    2a18:	60 e0       	ldi	r22, 0x00	; 0
    2a1a:	83 e4       	ldi	r24, 0x43	; 67
    2a1c:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
    case 49: play_rest(1);
       break;
    case 50: play_note('F', 0, 4, 3); // e,natural,3,1/4
       break;
//12
    case 51: play_note('E', 0, 4, 4); // e,natural,3,1/4
    2a20:	24 e0       	ldi	r18, 0x04	; 4
    2a22:	44 e0       	ldi	r20, 0x04	; 4
    2a24:	60 e0       	ldi	r22, 0x00	; 0
    2a26:	85 e4       	ldi	r24, 0x45	; 69
    2a28:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

uint8_t rest_mute = 0;
void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    2a2c:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	80 93 88 01 	sts	0x0188, r24
  beat=0;
    2a34:	10 92 9e 01 	sts	0x019E, r1
    2a38:	10 92 9d 01 	sts	0x019D, r1
  max_beat = duration;
    2a3c:	88 e0       	ldi	r24, 0x08	; 8
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	90 93 9c 01 	sts	0x019C, r25
    2a44:	80 93 9b 01 	sts	0x019B, r24
    2a48:	08 95       	ret
       break;
//17             
    case 72: play_note('C', 0, 5, 16); // e,natural,3,1/4
       break;
//18
    case 73: play_note('B', 0, 4, 4); // e,natural,3,1/4
    2a4a:	24 e0       	ldi	r18, 0x04	; 4
    2a4c:	44 e0       	ldi	r20, 0x04	; 4
    2a4e:	60 e0       	ldi	r22, 0x00	; 0
    2a50:	82 e4       	ldi	r24, 0x42	; 66
    2a52:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
//15             
    case 65: play_note('C', 0, 5, 16); // e,natural,3,1/4
       break;
//16
    case 66: play_note('C', 0, 5, 4); // e,natural,3,1/4
    2a56:	24 e0       	ldi	r18, 0x04	; 4
    2a58:	45 e0       	ldi	r20, 0x05	; 5
    2a5a:	60 e0       	ldi	r22, 0x00	; 0
    2a5c:	83 e4       	ldi	r24, 0x43	; 67
    2a5e:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
    case 35: play_note('C', 0, 5, 3); // e,natural,3,1/4
       break;
    case 36: play_rest(1);
       break;
//9
    case 37: play_note('A', 0, 4, 16); // e,natural,3,1/4
    2a62:	20 e1       	ldi	r18, 0x10	; 16
    2a64:	44 e0       	ldi	r20, 0x04	; 4
    2a66:	60 e0       	ldi	r22, 0x00	; 0
    2a68:	81 e4       	ldi	r24, 0x41	; 65
    2a6a:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
    case 79: play_note('C', 0, 5, 8); // e,natural,3,1/4
       break;
    case 80: play_rest(8); // e,natural,3,1/4
       break;
//20
    case 81: play_note('A', 0, 4, 8); // e,natural,3,1/4
    2a6e:	28 e0       	ldi	r18, 0x08	; 8
    2a70:	44 e0       	ldi	r20, 0x04	; 4
    2a72:	60 e0       	ldi	r22, 0x00	; 0
    2a74:	81 e4       	ldi	r24, 0x41	; 65
    2a76:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
       break;
    case 82: play_rest(8); // e,natural,3,1/4
       break;
//21
    case 83: play_note('E', 0, 5, 16); // e,natural,3,1/4
    2a7a:	20 e1       	ldi	r18, 0x10	; 16
    2a7c:	45 e0       	ldi	r20, 0x05	; 5
    2a7e:	60 e0       	ldi	r22, 0x00	; 0
    2a80:	85 e4       	ldi	r24, 0x45	; 69
    2a82:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
    case 21: play_note('E', 0, 4, 3); // e,natural,3,1/4
       break;
    case 22: play_rest(1);
       break;
//7
    case 23: play_note('C', 0, 4, 4); // e,natural,3,1/4
    2a86:	24 e0       	ldi	r18, 0x04	; 4
    2a88:	44 e0       	ldi	r20, 0x04	; 4
    2a8a:	60 e0       	ldi	r22, 0x00	; 0
    2a8c:	83 e4       	ldi	r24, 0x43	; 67
    2a8e:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
    case 77: play_rest(1);
       break;
    case 78: play_note('D', 0, 5, 4); // e,natural,3,1/4
       break;
//19
    case 79: play_note('C', 0, 5, 8); // e,natural,3,1/4
    2a92:	28 e0       	ldi	r18, 0x08	; 8
    2a94:	45 e0       	ldi	r20, 0x05	; 5
    2a96:	60 e0       	ldi	r22, 0x00	; 0
    2a98:	83 e4       	ldi	r24, 0x43	; 67
    2a9a:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
    case 5: play_note('E', 0, 4, 3); // e,natural,3,1/4
       break;
    case 6: play_rest(1);
       break;
//2
    case 7: play_note('C', 0, 4, 16);
    2a9e:	20 e1       	ldi	r18, 0x10	; 16
    2aa0:	44 e0       	ldi	r20, 0x04	; 4
    2aa2:	60 e0       	ldi	r22, 0x00	; 0
    2aa4:	83 e4       	ldi	r24, 0x43	; 67
    2aa6:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
    case 43: play_note('E', 0, 4, 3); // e,natural,3,1/4
       break;
    case 44: play_rest(1);
       break;
//11
    case 45: play_note('B', 0, 3, 4); // e,natural,3,1/4
    2aaa:	24 e0       	ldi	r18, 0x04	; 4
    2aac:	43 e0       	ldi	r20, 0x03	; 3
    2aae:	60 e0       	ldi	r22, 0x00	; 0
    2ab0:	82 e4       	ldi	r24, 0x42	; 66
    2ab2:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
    case 56: play_note('D', 0, 5, 3); // e,natural,3,1/4
       break;
    case 57: play_rest(1);
       break;
//13             
    case 58: play_note('B', 0, 4, 16); // e,natural,3,1/4
    2ab6:	20 e1       	ldi	r18, 0x10	; 16
    2ab8:	44 e0       	ldi	r20, 0x04	; 4
    2aba:	60 e0       	ldi	r22, 0x00	; 0
    2abc:	82 e4       	ldi	r24, 0x42	; 66
    2abe:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>
    case 13: play_note('D', 0, 4, 3); // e,natural,3,1/4
       break;
    case 14: play_rest(1);
       break;
//4,5
    case 15: play_note('B', 0, 3, 32);
    2ac2:	20 e2       	ldi	r18, 0x20	; 32
    2ac4:	43 e0       	ldi	r20, 0x03	; 3
    2ac6:	60 e0       	ldi	r22, 0x00	; 0
    2ac8:	82 e4       	ldi	r24, 0x42	; 66
    2aca:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <play_note>

00002ace <play_song>:
  }
}//song3
void play_song(uint8_t song, uint8_t note) {
  //if you add a song, you'll have to add it to this
  //switch statement.
  switch (song) {
    2ace:	82 30       	cpi	r24, 0x02	; 2
    2ad0:	a9 f0       	breq	.+42     	; 0x2afc <play_song+0x2e>
    2ad2:	40 f4       	brcc	.+16     	; 0x2ae4 <play_song+0x16>
    2ad4:	88 23       	and	r24, r24
    2ad6:	71 f0       	breq	.+28     	; 0x2af4 <play_song+0x26>
    2ad8:	81 30       	cpi	r24, 0x01	; 1
    2ada:	61 f4       	brne	.+24     	; 0x2af4 <play_song+0x26>
  case 0: song0(note); //beaver fight song
    break;
  case 1: song1(note); //tetris theme
    2adc:	86 2f       	mov	r24, r22
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	0c 94 05 0e 	jmp	0x1c0a	; 0x1c0a <song1>
  }
}//song3
void play_song(uint8_t song, uint8_t note) {
  //if you add a song, you'll have to add it to this
  //switch statement.
  switch (song) {
    2ae4:	83 30       	cpi	r24, 0x03	; 3
    2ae6:	71 f0       	breq	.+28     	; 0x2b04 <play_song+0x36>
    2ae8:	84 30       	cpi	r24, 0x04	; 4
    2aea:	21 f4       	brne	.+8      	; 0x2af4 <play_song+0x26>
    break;
  case 2: song2(note); //super mario bros
    break;
  case 3: song3(note);
    break;
  case 4: song4(note);
    2aec:	86 2f       	mov	r24, r22
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	0c 94 b6 14 	jmp	0x296c	; 0x296c <song4>
    break;
  default: song0(note); //defaults to beaver fight song
    2af4:	86 2f       	mov	r24, r22
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	0c 94 18 0d 	jmp	0x1a30	; 0x1a30 <song0>
  switch (song) {
  case 0: song0(note); //beaver fight song
    break;
  case 1: song1(note); //tetris theme
    break;
  case 2: song2(note); //super mario bros
    2afc:	86 2f       	mov	r24, r22
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	0c 94 f5 0e 	jmp	0x1dea	; 0x1dea <song2>
    break;
  case 3: song3(note);
    2b04:	86 2f       	mov	r24, r22
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <song3>

00002b0c <music_off>:
  }
}

void music_off(void) {
  //this turns the alarm timer off
  notes=0;
    2b0c:	10 92 99 01 	sts	0x0199, r1
  TCCR1B &= ~((1<<CS11)|(1<<CS10));
    2b10:	8e b5       	in	r24, 0x2e	; 46
    2b12:	8c 7f       	andi	r24, 0xFC	; 252
    2b14:	8e bd       	out	0x2e, r24	; 46
  //and mutes the output
  PORTD |= mute;
    2b16:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    2b18:	81 e0       	ldi	r24, 0x01	; 1
    2b1a:	80 93 88 01 	sts	0x0188, r24
    2b1e:	08 95       	ret

00002b20 <music_on>:
}

void music_on(void) {
  //this starts the alarm timer running
  notes=0;
    2b20:	10 92 99 01 	sts	0x0199, r1
  TCCR1B |= (1<<CS11)|(1<<CS10);
    2b24:	8e b5       	in	r24, 0x2e	; 46
    2b26:	83 60       	ori	r24, 0x03	; 3
    2b28:	8e bd       	out	0x2e, r24	; 46
  //unmutes the output
  PORTD &= unmute;
    2b2a:	92 98       	cbi	0x12, 2	; 18
  rest_mute = UNMUTE;
    2b2c:	10 92 88 01 	sts	0x0188, r1
  //and starts the selected song
  play_song(song, notes);
    2b30:	60 91 99 01 	lds	r22, 0x0199
    2b34:	80 91 9a 01 	lds	r24, 0x019A
    2b38:	0c 94 67 15 	jmp	0x2ace	; 0x2ace <play_song>

00002b3c <music_init>:
}

void music_init(void) {
  //initially turned off (use music_on() to turn on)
  TIMSK |= (1<<OCIE1A);  //enable timer interrupt 1 on compare
    2b3c:	87 b7       	in	r24, 0x37	; 55
    2b3e:	80 61       	ori	r24, 0x10	; 16
    2b40:	87 bf       	out	0x37, r24	; 55
  TCCR1A = 0x00;         //TCNT1, normal port operation
    2b42:	1f bc       	out	0x2f, r1	; 47
  TCCR1B |= (1<<WGM12);  //CTC, OCR1A = top, clk/64 (250kHz)
    2b44:	8e b5       	in	r24, 0x2e	; 46
    2b46:	88 60       	ori	r24, 0x08	; 8
    2b48:	8e bd       	out	0x2e, r24	; 46
  TCCR1C = 0x00;         //no forced compare
    2b4a:	10 92 7a 00 	sts	0x007A, r1
  OCR1A = 0x0031;        //(use to vary alarm frequency)
    2b4e:	81 e3       	ldi	r24, 0x31	; 49
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	9b bd       	out	0x2b, r25	; 43
    2b54:	8a bd       	out	0x2a, r24	; 42
  }
}

void music_off(void) {
  //this turns the alarm timer off
  notes=0;
    2b56:	10 92 99 01 	sts	0x0199, r1
  TCCR1B &= ~((1<<CS11)|(1<<CS10));
    2b5a:	8e b5       	in	r24, 0x2e	; 46
    2b5c:	8c 7f       	andi	r24, 0xFC	; 252
    2b5e:	8e bd       	out	0x2e, r24	; 46
  //and mutes the output
  PORTD |= mute;
    2b60:	92 9a       	sbi	0x12, 2	; 18
  rest_mute = MUTE;
    2b62:	81 e0       	ldi	r24, 0x01	; 1
    2b64:	80 93 88 01 	sts	0x0188, r24
  TCCR1A = 0x00;         //TCNT1, normal port operation
  TCCR1B |= (1<<WGM12);  //CTC, OCR1A = top, clk/64 (250kHz)
  TCCR1C = 0x00;         //no forced compare
  OCR1A = 0x0031;        //(use to vary alarm frequency)
  music_off();
  beat = 0;
    2b68:	10 92 9e 01 	sts	0x019E, r1
    2b6c:	10 92 9d 01 	sts	0x019D, r1
  max_beat = 0;
    2b70:	10 92 9c 01 	sts	0x019C, r1
    2b74:	10 92 9b 01 	sts	0x019B, r1
  notes = 0;
    2b78:	10 92 99 01 	sts	0x0199, r1
  song = 0;              //beaver fight song
    2b7c:	10 92 9a 01 	sts	0x019A, r1
    2b80:	08 95       	ret

00002b82 <__vector_12>:
    2b82:	1f 92       	push	r1
    2b84:	0f 92       	push	r0
    2b86:	0f b6       	in	r0, 0x3f	; 63
    2b88:	0f 92       	push	r0
    2b8a:	11 24       	eor	r1, r1
    2b8c:	0b b6       	in	r0, 0x3b	; 59
    2b8e:	0f 92       	push	r0
    2b90:	2f 93       	push	r18
    2b92:	3f 93       	push	r19
    2b94:	4f 93       	push	r20
    2b96:	5f 93       	push	r21
    2b98:	6f 93       	push	r22
    2b9a:	7f 93       	push	r23
    2b9c:	8f 93       	push	r24
    2b9e:	9f 93       	push	r25
    2ba0:	af 93       	push	r26
    2ba2:	bf 93       	push	r27
    2ba4:	ef 93       	push	r30
    2ba6:	ff 93       	push	r31
    2ba8:	80 91 88 01 	lds	r24, 0x0188
    2bac:	81 11       	cpse	r24, r1
    2bae:	03 c0       	rjmp	.+6      	; 0x2bb6 <__vector_12+0x34>
    2bb0:	82 b3       	in	r24, 0x12	; 18
    2bb2:	80 58       	subi	r24, 0x80	; 128
    2bb4:	82 bb       	out	0x12, r24	; 18
    2bb6:	20 91 9d 01 	lds	r18, 0x019D
    2bba:	30 91 9e 01 	lds	r19, 0x019E
    2bbe:	80 91 9b 01 	lds	r24, 0x019B
    2bc2:	90 91 9c 01 	lds	r25, 0x019C
    2bc6:	28 17       	cp	r18, r24
    2bc8:	39 07       	cpc	r19, r25
    2bca:	58 f0       	brcs	.+22     	; 0x2be2 <__vector_12+0x60>
    2bcc:	80 91 99 01 	lds	r24, 0x0199
    2bd0:	8f 5f       	subi	r24, 0xFF	; 255
    2bd2:	80 93 99 01 	sts	0x0199, r24
    2bd6:	60 91 99 01 	lds	r22, 0x0199
    2bda:	80 91 9a 01 	lds	r24, 0x019A
    2bde:	0e 94 67 15 	call	0x2ace	; 0x2ace <play_song>
    2be2:	ff 91       	pop	r31
    2be4:	ef 91       	pop	r30
    2be6:	bf 91       	pop	r27
    2be8:	af 91       	pop	r26
    2bea:	9f 91       	pop	r25
    2bec:	8f 91       	pop	r24
    2bee:	7f 91       	pop	r23
    2bf0:	6f 91       	pop	r22
    2bf2:	5f 91       	pop	r21
    2bf4:	4f 91       	pop	r20
    2bf6:	3f 91       	pop	r19
    2bf8:	2f 91       	pop	r18
    2bfa:	0f 90       	pop	r0
    2bfc:	0b be       	out	0x3b, r0	; 59
    2bfe:	0f 90       	pop	r0
    2c00:	0f be       	out	0x3f, r0	; 63
    2c02:	0f 90       	pop	r0
    2c04:	1f 90       	pop	r1
    2c06:	18 95       	reti

00002c08 <main>:
}

int main()
{

    DDRA    |= 0xFF;                //A all outputs
    2c08:	8a b3       	in	r24, 0x1a	; 26
    2c0a:	9f ef       	ldi	r25, 0xFF	; 255
    2c0c:	9a bb       	out	0x1a, r25	; 26
    DDRB    |= 0xF7;                //B bits 4-7 B as outputs, Turn on SS, MOSI, SCLK
    2c0e:	87 b3       	in	r24, 0x17	; 23
    2c10:	87 6f       	ori	r24, 0xF7	; 247
    2c12:	87 bb       	out	0x17, r24	; 23
    DDRD    |= (1<<PD7);            //D bit 7 output: music_signal
    2c14:	8f 9a       	sbi	0x11, 7	; 17
    DDRE    |= (1<<PE6) | (1<<PE3); //E bit 6 output: encoder SH/LD , 3 output: volume signal
    2c16:	82 b1       	in	r24, 0x02	; 2
    2c18:	88 64       	ori	r24, 0x48	; 72
    2c1a:	82 b9       	out	0x02, r24	; 2
    DDRF    |= (1<<PF3);                //F bit 3 as output
    2c1c:	80 91 61 00 	lds	r24, 0x0061
    2c20:	88 60       	ori	r24, 0x08	; 8
    2c22:	80 93 61 00 	sts	0x0061, r24

    PORTA   = 0xFF;                 //A to all ones  (off, active low)
    2c26:	9b bb       	out	0x1b, r25	; 27

    spi_init();
    2c28:	0e 94 01 06 	call	0xc02	; 0xc02 <spi_init>
    
    LCD_Init();
    2c2c:	0e 94 82 08 	call	0x1104	; 0x1104 <LCD_Init>
    LCD_Clr();
    2c30:	0e 94 49 06 	call	0xc92	; 0xc92 <LCD_Clr>
    LCD_PutStr("      ->!<-     ");
    2c34:	82 e2       	ldi	r24, 0x22	; 34
    2c36:	91 e0       	ldi	r25, 0x01	; 1
    2c38:	0e 94 44 08 	call	0x1088	; 0x1088 <LCD_PutStr>
    
    init_tcnt0();
    2c3c:	0e 94 d7 05 	call	0xbae	; 0xbae <init_tcnt0>
    ICR3   = 0x0fff;
    OCR3A  = 0x0fff/3; //Volume duty cycle.
}

void init_tcnt2(){
    TIMSK |= (1<<TOIE2);                             //enable timer overflow interrupt.
    2c40:	87 b7       	in	r24, 0x37	; 55
    2c42:	80 64       	ori	r24, 0x40	; 64
    2c44:	87 bf       	out	0x37, r24	; 55
    TCCR2 |= (1<<WGM20)|(1<<WGM21)|(1<<COM21)|(1<<COM20)|(0<<CS22)|(0<<CS21)|(1<<CS20); //Fast PWM, (non-inverting), 256 prescale 
    2c46:	85 b5       	in	r24, 0x25	; 37
    2c48:	89 67       	ori	r24, 0x79	; 121
    2c4a:	85 bd       	out	0x25, r24	; 37

// PORTD bit 7 -> alarm signal.
// PORTE bit 3 -> volume.
extern volatile uint16_t beat;
void init_tcnt3(){
    TCCR3A |= (1<<COM3A1) | (0<<COM3A0)  | (1<<WGM31) | (0<<WGM30);
    2c4c:	80 91 8b 00 	lds	r24, 0x008B
    2c50:	82 68       	ori	r24, 0x82	; 130
    2c52:	80 93 8b 00 	sts	0x008B, r24
    TCCR3B |= (1<<WGM33) | (1<<WGM32) | (1<<CS30);
    2c56:	80 91 8a 00 	lds	r24, 0x008A
    2c5a:	89 61       	ori	r24, 0x19	; 25
    2c5c:	80 93 8a 00 	sts	0x008A, r24
    ICR3   = 0x0fff;
    2c60:	8f ef       	ldi	r24, 0xFF	; 255
    2c62:	9f e0       	ldi	r25, 0x0F	; 15
    2c64:	90 93 81 00 	sts	0x0081, r25
    2c68:	80 93 80 00 	sts	0x0080, r24
    OCR3A  = 0x0fff/3; //Volume duty cycle.
    2c6c:	85 e5       	ldi	r24, 0x55	; 85
    2c6e:	95 e0       	ldi	r25, 0x05	; 5
    2c70:	90 93 87 00 	sts	0x0087, r25
    2c74:	80 93 86 00 	sts	0x0086, r24
uint8_t clock_conversion();
uint8_t clock_update();
uint8_t LED_seg(uint8_t mode, uint8_t clock, uint8_t alarm, uint8_t digit);

void init_adc(){
    ADMUX   = (0<<REFS1) | (1<<REFS0) | (1<<ADLAR) |(1<<MUX2)|(1<<MUX1)|(1<<MUX0); //AVCC refrence, Left justified.
    2c78:	87 e6       	ldi	r24, 0x67	; 103
    2c7a:	87 b9       	out	0x07, r24	; 7
    ADCSRA  = (1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //enable ADC, prescale by 128
    2c7c:	87 e8       	ldi	r24, 0x87	; 135
    2c7e:	86 b9       	out	0x06, r24	; 6
    init_tcnt2();
    init_tcnt3(); 

    init_adc();

    sei();
    2c80:	78 94       	sei
    OCR2 = 55;
    2c82:	87 e3       	ldi	r24, 0x37	; 55
    2c84:	83 bd       	out	0x23, r24	; 35

    music_init();
    2c86:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <music_init>
    music_on();   
    2c8a:	0e 94 90 15 	call	0x2b20	; 0x2b20 <music_on>
    while(1){

            PORTA = LED[0];         //push button determines which segment is on
            PORTB = ( (0) << 4 );   //digit i  on 
            _delay_us(LED_DELAY);
            PORTA = 0xFF;           //all segments off
    2c8e:	9f ef       	ldi	r25, 0xFF	; 255
            PORTB = 0xF0;           //digit i  off 
    2c90:	80 ef       	ldi	r24, 0xF0	; 240
//            _delay_us(LED_DELAY);
            PORTA = LED[1];         //push button determines which segment is on
            PORTB = ( (1) << 4 );   //digit i  on 
    2c92:	60 e1       	ldi	r22, 0x10	; 16
            _delay_us(LED_DELAY);
            PORTA = 0xFF;           //all segments off
            PORTB = 0xF0;           //digit i  off 
//            _delay_us(LED_DELAY);
            PORTA = LED[2];         //push button determines which segment is on
            PORTB = ( (2) << 4 );   //digit i  on 
    2c94:	50 e2       	ldi	r21, 0x20	; 32
            _delay_us(LED_DELAY);
            PORTA = 0xFF;           //all segments off
            PORTB = 0xF0;           //digit i  off 
//            _delay_us(LED_DELAY);
            PORTA = LED[3];         //push button determines which segment is on
            PORTB = ( (3) << 4 );   //digit i  on 
    2c96:	40 e3       	ldi	r20, 0x30	; 48
            _delay_us(LED_DELAY);
            PORTA = 0xFF;           //all segments off
            PORTB = 0xF0;           //digit i  off 
//            _delay_us(LED_DELAY);
            PORTA = LED[4];         //push button determines which segment is on
            PORTB = ( (4) << 4 );   //digit i  on 
    2c98:	30 e4       	ldi	r19, 0x40	; 64
    music_init();
    music_on();   

    while(1){

            PORTA = LED[0];         //push button determines which segment is on
    2c9a:	20 91 68 01 	lds	r18, 0x0168
    2c9e:	2b bb       	out	0x1b, r18	; 27
            PORTB = ( (0) << 4 );   //digit i  on 
    2ca0:	18 ba       	out	0x18, r1	; 24
    2ca2:	ef e1       	ldi	r30, 0x1F	; 31
    2ca4:	f3 e0       	ldi	r31, 0x03	; 3
    2ca6:	31 97       	sbiw	r30, 0x01	; 1
    2ca8:	f1 f7       	brne	.-4      	; 0x2ca6 <main+0x9e>
    2caa:	00 c0       	rjmp	.+0      	; 0x2cac <main+0xa4>
    2cac:	00 00       	nop
            _delay_us(LED_DELAY);
            PORTA = 0xFF;           //all segments off
    2cae:	9b bb       	out	0x1b, r25	; 27
            PORTB = 0xF0;           //digit i  off 
    2cb0:	88 bb       	out	0x18, r24	; 24
//            _delay_us(LED_DELAY);
            PORTA = LED[1];         //push button determines which segment is on
    2cb2:	20 91 69 01 	lds	r18, 0x0169
    2cb6:	2b bb       	out	0x1b, r18	; 27
            PORTB = ( (1) << 4 );   //digit i  on 
    2cb8:	68 bb       	out	0x18, r22	; 24
    2cba:	ef e1       	ldi	r30, 0x1F	; 31
    2cbc:	f3 e0       	ldi	r31, 0x03	; 3
    2cbe:	31 97       	sbiw	r30, 0x01	; 1
    2cc0:	f1 f7       	brne	.-4      	; 0x2cbe <main+0xb6>
    2cc2:	00 c0       	rjmp	.+0      	; 0x2cc4 <main+0xbc>
    2cc4:	00 00       	nop
            _delay_us(LED_DELAY);
            PORTA = 0xFF;           //all segments off
    2cc6:	9b bb       	out	0x1b, r25	; 27
            PORTB = 0xF0;           //digit i  off 
    2cc8:	88 bb       	out	0x18, r24	; 24
//            _delay_us(LED_DELAY);
            PORTA = LED[2];         //push button determines which segment is on
    2cca:	20 91 6a 01 	lds	r18, 0x016A
    2cce:	2b bb       	out	0x1b, r18	; 27
            PORTB = ( (2) << 4 );   //digit i  on 
    2cd0:	58 bb       	out	0x18, r21	; 24
    2cd2:	ef e1       	ldi	r30, 0x1F	; 31
    2cd4:	f3 e0       	ldi	r31, 0x03	; 3
    2cd6:	31 97       	sbiw	r30, 0x01	; 1
    2cd8:	f1 f7       	brne	.-4      	; 0x2cd6 <main+0xce>
    2cda:	00 c0       	rjmp	.+0      	; 0x2cdc <main+0xd4>
    2cdc:	00 00       	nop
            _delay_us(LED_DELAY);
            PORTA = 0xFF;           //all segments off
    2cde:	9b bb       	out	0x1b, r25	; 27
            PORTB = 0xF0;           //digit i  off 
    2ce0:	88 bb       	out	0x18, r24	; 24
//            _delay_us(LED_DELAY);
            PORTA = LED[3];         //push button determines which segment is on
    2ce2:	20 91 6b 01 	lds	r18, 0x016B
    2ce6:	2b bb       	out	0x1b, r18	; 27
            PORTB = ( (3) << 4 );   //digit i  on 
    2ce8:	48 bb       	out	0x18, r20	; 24
    2cea:	ef e1       	ldi	r30, 0x1F	; 31
    2cec:	f3 e0       	ldi	r31, 0x03	; 3
    2cee:	31 97       	sbiw	r30, 0x01	; 1
    2cf0:	f1 f7       	brne	.-4      	; 0x2cee <main+0xe6>
    2cf2:	00 c0       	rjmp	.+0      	; 0x2cf4 <main+0xec>
    2cf4:	00 00       	nop
            _delay_us(LED_DELAY);
            PORTA = 0xFF;           //all segments off
    2cf6:	9b bb       	out	0x1b, r25	; 27
            PORTB = 0xF0;           //digit i  off 
    2cf8:	88 bb       	out	0x18, r24	; 24
//            _delay_us(LED_DELAY);
            PORTA = LED[4];         //push button determines which segment is on
    2cfa:	20 91 6c 01 	lds	r18, 0x016C
    2cfe:	2b bb       	out	0x1b, r18	; 27
            PORTB = ( (4) << 4 );   //digit i  on 
    2d00:	38 bb       	out	0x18, r19	; 24
    2d02:	ef e1       	ldi	r30, 0x1F	; 31
    2d04:	f3 e0       	ldi	r31, 0x03	; 3
    2d06:	31 97       	sbiw	r30, 0x01	; 1
    2d08:	f1 f7       	brne	.-4      	; 0x2d06 <main+0xfe>
    2d0a:	00 c0       	rjmp	.+0      	; 0x2d0c <main+0x104>
    2d0c:	00 00       	nop
            _delay_us(LED_DELAY);
            PORTA = 0xFF;           //all segments off
    2d0e:	9b bb       	out	0x1b, r25	; 27
            PORTB = 0xF0;           //digit i  off 
    2d10:	88 bb       	out	0x18, r24	; 24
//            _delay_us(LED_DELAY);

/******************************************************************************************************/

    } //while
    2d12:	c3 cf       	rjmp	.-122    	; 0x2c9a <main+0x92>

00002d14 <__tablejump2__>:
    2d14:	ee 0f       	add	r30, r30
    2d16:	ff 1f       	adc	r31, r31
    2d18:	00 24       	eor	r0, r0
    2d1a:	00 1c       	adc	r0, r0
    2d1c:	0b be       	out	0x3b, r0	; 59
    2d1e:	07 90       	elpm	r0, Z+
    2d20:	f6 91       	elpm	r31, Z
    2d22:	e0 2d       	mov	r30, r0
    2d24:	09 94       	ijmp

00002d26 <_exit>:
    2d26:	f8 94       	cli

00002d28 <__stop_program>:
    2d28:	ff cf       	rjmp	.-2      	; 0x2d28 <__stop_program>
